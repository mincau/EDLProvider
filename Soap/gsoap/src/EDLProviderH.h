/* EDLProviderH.h
   Generated by gSOAP 2.8.21 from D:\Sandbox\EdlProvider\Soap\gsoap\src\EDLProviderInterface.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef EDLProviderH_H
#define EDLProviderH_H
#include "EDLProviderStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 EDLProvider_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 EDLProvider_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 EDLProvider_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_LONG64
#define SOAP_TYPE_LONG64 (406)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_LONG64(soap, data),0) || soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (16)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__duration(struct soap*, LONG64 *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__duration2s(struct soap*, LONG64);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__duration(struct soap*, const char*, int, const LONG64 *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__duration(struct soap*, const char*, LONG64 *);
SOAP_FMAC1 LONG64 * SOAP_FMAC2 soap_in_xsd__duration(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_xsd__duration
#define soap_write_xsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__duration(soap, data),0) || soap_put_xsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__duration(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_xsd__duration
#define soap_read_xsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (374)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data),0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (403)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data),0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedLONG64
#define SOAP_TYPE_unsignedLONG64 (407)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedLONG64(soap, data),0) || soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_time
#define SOAP_TYPE_time (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_time(soap, data),0) || soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__fims__QueryServiceDescriptionRequestType_responseType
#define SOAP_TYPE__fims__QueryServiceDescriptionRequestType_responseType (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default__fims__QueryServiceDescriptionRequestType_responseType(struct soap*, enum _fims__QueryServiceDescriptionRequestType_responseType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__QueryServiceDescriptionRequestType_responseType(struct soap*, const char*, int, const enum _fims__QueryServiceDescriptionRequestType_responseType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap__fims__QueryServiceDescriptionRequestType_responseType2s(struct soap*, enum _fims__QueryServiceDescriptionRequestType_responseType);
SOAP_FMAC3 enum _fims__QueryServiceDescriptionRequestType_responseType * SOAP_FMAC4 soap_in__fims__QueryServiceDescriptionRequestType_responseType(struct soap*, const char*, enum _fims__QueryServiceDescriptionRequestType_responseType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2_fims__QueryServiceDescriptionRequestType_responseType(struct soap*, const char*, enum _fims__QueryServiceDescriptionRequestType_responseType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put__fims__QueryServiceDescriptionRequestType_responseType(struct soap*, const enum _fims__QueryServiceDescriptionRequestType_responseType *, const char*, const char*);

#ifndef soap_write__fims__QueryServiceDescriptionRequestType_responseType
#define soap_write__fims__QueryServiceDescriptionRequestType_responseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__fims__QueryServiceDescriptionRequestType_responseType(soap, data),0) || soap_put__fims__QueryServiceDescriptionRequestType_responseType(soap, data, "fims:QueryServiceDescriptionRequestType-responseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum _fims__QueryServiceDescriptionRequestType_responseType * SOAP_FMAC4 soap_get__fims__QueryServiceDescriptionRequestType_responseType(struct soap*, enum _fims__QueryServiceDescriptionRequestType_responseType *, const char*, const char*);

#ifndef soap_read__fims__QueryServiceDescriptionRequestType_responseType
#define soap_read__fims__QueryServiceDescriptionRequestType_responseType(soap, data) ( soap_begin_recv(soap) || !soap_get__fims__QueryServiceDescriptionRequestType_responseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__EventClassificationType
#define SOAP_TYPE_fims__EventClassificationType (210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__EventClassificationType(struct soap*, enum fims__EventClassificationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EventClassificationType(struct soap*, const char*, int, const enum fims__EventClassificationType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__EventClassificationType2s(struct soap*, enum fims__EventClassificationType);
SOAP_FMAC3 enum fims__EventClassificationType * SOAP_FMAC4 soap_in_fims__EventClassificationType(struct soap*, const char*, enum fims__EventClassificationType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__EventClassificationType(struct soap*, const char*, enum fims__EventClassificationType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__EventClassificationType(struct soap*, const enum fims__EventClassificationType *, const char*, const char*);

#ifndef soap_write_fims__EventClassificationType
#define soap_write_fims__EventClassificationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__EventClassificationType(soap, data),0) || soap_put_fims__EventClassificationType(soap, data, "fims:EventClassificationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__EventClassificationType * SOAP_FMAC4 soap_get_fims__EventClassificationType(struct soap*, enum fims__EventClassificationType *, const char*, const char*);

#ifndef soap_read_fims__EventClassificationType
#define soap_read_fims__EventClassificationType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EventClassificationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__EventSubType
#define SOAP_TYPE_fims__EventSubType (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__EventSubType(struct soap*, enum fims__EventSubType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EventSubType(struct soap*, const char*, int, const enum fims__EventSubType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__EventSubType2s(struct soap*, enum fims__EventSubType);
SOAP_FMAC3 enum fims__EventSubType * SOAP_FMAC4 soap_in_fims__EventSubType(struct soap*, const char*, enum fims__EventSubType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__EventSubType(struct soap*, const char*, enum fims__EventSubType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__EventSubType(struct soap*, const enum fims__EventSubType *, const char*, const char*);

#ifndef soap_write_fims__EventSubType
#define soap_write_fims__EventSubType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__EventSubType(soap, data),0) || soap_put_fims__EventSubType(soap, data, "fims:EventSubType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__EventSubType * SOAP_FMAC4 soap_get_fims__EventSubType(struct soap*, enum fims__EventSubType *, const char*, const char*);

#ifndef soap_read_fims__EventSubType
#define soap_read_fims__EventSubType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EventSubType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__EventType
#define SOAP_TYPE_fims__EventType (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__EventType(struct soap*, enum fims__EventType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EventType(struct soap*, const char*, int, const enum fims__EventType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__EventType2s(struct soap*, enum fims__EventType);
SOAP_FMAC3 enum fims__EventType * SOAP_FMAC4 soap_in_fims__EventType(struct soap*, const char*, enum fims__EventType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__EventType(struct soap*, const char*, enum fims__EventType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__EventType(struct soap*, const enum fims__EventType *, const char*, const char*);

#ifndef soap_write_fims__EventType
#define soap_write_fims__EventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__EventType(soap, data),0) || soap_put_fims__EventType(soap, data, "fims:EventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__EventType * SOAP_FMAC4 soap_get_fims__EventType(struct soap*, enum fims__EventType *, const char*, const char*);

#ifndef soap_read_fims__EventType
#define soap_read_fims__EventType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__QueryParameterOperatorType
#define SOAP_TYPE_fims__QueryParameterOperatorType (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__QueryParameterOperatorType(struct soap*, enum fims__QueryParameterOperatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryParameterOperatorType(struct soap*, const char*, int, const enum fims__QueryParameterOperatorType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__QueryParameterOperatorType2s(struct soap*, enum fims__QueryParameterOperatorType);
SOAP_FMAC3 enum fims__QueryParameterOperatorType * SOAP_FMAC4 soap_in_fims__QueryParameterOperatorType(struct soap*, const char*, enum fims__QueryParameterOperatorType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__QueryParameterOperatorType(struct soap*, const char*, enum fims__QueryParameterOperatorType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__QueryParameterOperatorType(struct soap*, const enum fims__QueryParameterOperatorType *, const char*, const char*);

#ifndef soap_write_fims__QueryParameterOperatorType
#define soap_write_fims__QueryParameterOperatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__QueryParameterOperatorType(soap, data),0) || soap_put_fims__QueryParameterOperatorType(soap, data, "fims:QueryParameterOperatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__QueryParameterOperatorType * SOAP_FMAC4 soap_get_fims__QueryParameterOperatorType(struct soap*, enum fims__QueryParameterOperatorType *, const char*, const char*);

#ifndef soap_read_fims__QueryParameterOperatorType
#define soap_read_fims__QueryParameterOperatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryParameterOperatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__QueryGroupOperatorType
#define SOAP_TYPE_fims__QueryGroupOperatorType (206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__QueryGroupOperatorType(struct soap*, enum fims__QueryGroupOperatorType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryGroupOperatorType(struct soap*, const char*, int, const enum fims__QueryGroupOperatorType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__QueryGroupOperatorType2s(struct soap*, enum fims__QueryGroupOperatorType);
SOAP_FMAC3 enum fims__QueryGroupOperatorType * SOAP_FMAC4 soap_in_fims__QueryGroupOperatorType(struct soap*, const char*, enum fims__QueryGroupOperatorType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__QueryGroupOperatorType(struct soap*, const char*, enum fims__QueryGroupOperatorType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__QueryGroupOperatorType(struct soap*, const enum fims__QueryGroupOperatorType *, const char*, const char*);

#ifndef soap_write_fims__QueryGroupOperatorType
#define soap_write_fims__QueryGroupOperatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__QueryGroupOperatorType(soap, data),0) || soap_put_fims__QueryGroupOperatorType(soap, data, "fims:QueryGroupOperatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__QueryGroupOperatorType * SOAP_FMAC4 soap_get_fims__QueryGroupOperatorType(struct soap*, enum fims__QueryGroupOperatorType *, const char*, const char*);

#ifndef soap_read_fims__QueryGroupOperatorType
#define soap_read_fims__QueryGroupOperatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryGroupOperatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__BMStatusType
#define SOAP_TYPE_fims__BMStatusType (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__BMStatusType(struct soap*, enum fims__BMStatusType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMStatusType(struct soap*, const char*, int, const enum fims__BMStatusType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__BMStatusType2s(struct soap*, enum fims__BMStatusType);
SOAP_FMAC3 enum fims__BMStatusType * SOAP_FMAC4 soap_in_fims__BMStatusType(struct soap*, const char*, enum fims__BMStatusType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__BMStatusType(struct soap*, const char*, enum fims__BMStatusType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__BMStatusType(struct soap*, const enum fims__BMStatusType *, const char*, const char*);

#ifndef soap_write_fims__BMStatusType
#define soap_write_fims__BMStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__BMStatusType(soap, data),0) || soap_put_fims__BMStatusType(soap, data, "fims:BMStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__BMStatusType * SOAP_FMAC4 soap_get_fims__BMStatusType(struct soap*, enum fims__BMStatusType *, const char*, const char*);

#ifndef soap_read_fims__BMStatusType
#define soap_read_fims__BMStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__DataTypeType
#define SOAP_TYPE_fims__DataTypeType (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__DataTypeType(struct soap*, enum fims__DataTypeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__DataTypeType(struct soap*, const char*, int, const enum fims__DataTypeType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__DataTypeType2s(struct soap*, enum fims__DataTypeType);
SOAP_FMAC3 enum fims__DataTypeType * SOAP_FMAC4 soap_in_fims__DataTypeType(struct soap*, const char*, enum fims__DataTypeType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__DataTypeType(struct soap*, const char*, enum fims__DataTypeType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__DataTypeType(struct soap*, const enum fims__DataTypeType *, const char*, const char*);

#ifndef soap_write_fims__DataTypeType
#define soap_write_fims__DataTypeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__DataTypeType(soap, data),0) || soap_put_fims__DataTypeType(soap, data, "fims:DataTypeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__DataTypeType * SOAP_FMAC4 soap_get_fims__DataTypeType(struct soap*, enum fims__DataTypeType *, const char*, const char*);

#ifndef soap_read_fims__DataTypeType
#define soap_read_fims__DataTypeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__DataTypeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__JobInfoSelectionType
#define SOAP_TYPE_fims__JobInfoSelectionType (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__JobInfoSelectionType(struct soap*, enum fims__JobInfoSelectionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__JobInfoSelectionType(struct soap*, const char*, int, const enum fims__JobInfoSelectionType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__JobInfoSelectionType2s(struct soap*, enum fims__JobInfoSelectionType);
SOAP_FMAC3 enum fims__JobInfoSelectionType * SOAP_FMAC4 soap_in_fims__JobInfoSelectionType(struct soap*, const char*, enum fims__JobInfoSelectionType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__JobInfoSelectionType(struct soap*, const char*, enum fims__JobInfoSelectionType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__JobInfoSelectionType(struct soap*, const enum fims__JobInfoSelectionType *, const char*, const char*);

#ifndef soap_write_fims__JobInfoSelectionType
#define soap_write_fims__JobInfoSelectionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__JobInfoSelectionType(soap, data),0) || soap_put_fims__JobInfoSelectionType(soap, data, "fims:JobInfoSelectionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__JobInfoSelectionType * SOAP_FMAC4 soap_get_fims__JobInfoSelectionType(struct soap*, enum fims__JobInfoSelectionType *, const char*, const char*);

#ifndef soap_read_fims__JobInfoSelectionType
#define soap_read_fims__JobInfoSelectionType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__JobInfoSelectionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__ErrorCodeType
#define SOAP_TYPE_fims__ErrorCodeType (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__ErrorCodeType(struct soap*, enum fims__ErrorCodeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ErrorCodeType(struct soap*, const char*, int, const enum fims__ErrorCodeType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__ErrorCodeType2s(struct soap*, enum fims__ErrorCodeType);
SOAP_FMAC3 enum fims__ErrorCodeType * SOAP_FMAC4 soap_in_fims__ErrorCodeType(struct soap*, const char*, enum fims__ErrorCodeType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__ErrorCodeType(struct soap*, const char*, enum fims__ErrorCodeType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__ErrorCodeType(struct soap*, const enum fims__ErrorCodeType *, const char*, const char*);

#ifndef soap_write_fims__ErrorCodeType
#define soap_write_fims__ErrorCodeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__ErrorCodeType(soap, data),0) || soap_put_fims__ErrorCodeType(soap, data, "fims:ErrorCodeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__ErrorCodeType * SOAP_FMAC4 soap_get_fims__ErrorCodeType(struct soap*, enum fims__ErrorCodeType *, const char*, const char*);

#ifndef soap_read_fims__ErrorCodeType
#define soap_read_fims__ErrorCodeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ErrorCodeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__BitRateModeType
#define SOAP_TYPE_fims__BitRateModeType (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__BitRateModeType(struct soap*, enum fims__BitRateModeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BitRateModeType(struct soap*, const char*, int, const enum fims__BitRateModeType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__BitRateModeType2s(struct soap*, enum fims__BitRateModeType);
SOAP_FMAC3 enum fims__BitRateModeType * SOAP_FMAC4 soap_in_fims__BitRateModeType(struct soap*, const char*, enum fims__BitRateModeType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__BitRateModeType(struct soap*, const char*, enum fims__BitRateModeType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__BitRateModeType(struct soap*, const enum fims__BitRateModeType *, const char*, const char*);

#ifndef soap_write_fims__BitRateModeType
#define soap_write_fims__BitRateModeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__BitRateModeType(soap, data),0) || soap_put_fims__BitRateModeType(soap, data, "fims:BitRateModeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__BitRateModeType * SOAP_FMAC4 soap_get_fims__BitRateModeType(struct soap*, enum fims__BitRateModeType *, const char*, const char*);

#ifndef soap_read_fims__BitRateModeType
#define soap_read_fims__BitRateModeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BitRateModeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__ScanningOrderType
#define SOAP_TYPE_fims__ScanningOrderType (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__ScanningOrderType(struct soap*, enum fims__ScanningOrderType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ScanningOrderType(struct soap*, const char*, int, const enum fims__ScanningOrderType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__ScanningOrderType2s(struct soap*, enum fims__ScanningOrderType);
SOAP_FMAC3 enum fims__ScanningOrderType * SOAP_FMAC4 soap_in_fims__ScanningOrderType(struct soap*, const char*, enum fims__ScanningOrderType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__ScanningOrderType(struct soap*, const char*, enum fims__ScanningOrderType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__ScanningOrderType(struct soap*, const enum fims__ScanningOrderType *, const char*, const char*);

#ifndef soap_write_fims__ScanningOrderType
#define soap_write_fims__ScanningOrderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__ScanningOrderType(soap, data),0) || soap_put_fims__ScanningOrderType(soap, data, "fims:ScanningOrderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__ScanningOrderType * SOAP_FMAC4 soap_get_fims__ScanningOrderType(struct soap*, enum fims__ScanningOrderType *, const char*, const char*);

#ifndef soap_read_fims__ScanningOrderType
#define soap_read_fims__ScanningOrderType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ScanningOrderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__ScanningFormatType
#define SOAP_TYPE_fims__ScanningFormatType (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__ScanningFormatType(struct soap*, enum fims__ScanningFormatType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ScanningFormatType(struct soap*, const char*, int, const enum fims__ScanningFormatType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__ScanningFormatType2s(struct soap*, enum fims__ScanningFormatType);
SOAP_FMAC3 enum fims__ScanningFormatType * SOAP_FMAC4 soap_in_fims__ScanningFormatType(struct soap*, const char*, enum fims__ScanningFormatType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__ScanningFormatType(struct soap*, const char*, enum fims__ScanningFormatType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__ScanningFormatType(struct soap*, const enum fims__ScanningFormatType *, const char*, const char*);

#ifndef soap_write_fims__ScanningFormatType
#define soap_write_fims__ScanningFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__ScanningFormatType(soap, data),0) || soap_put_fims__ScanningFormatType(soap, data, "fims:ScanningFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__ScanningFormatType * SOAP_FMAC4 soap_get_fims__ScanningFormatType(struct soap*, enum fims__ScanningFormatType *, const char*, const char*);

#ifndef soap_read_fims__ScanningFormatType
#define soap_read_fims__ScanningFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ScanningFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__AudioSampleType
#define SOAP_TYPE_fims__AudioSampleType (198)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__AudioSampleType(struct soap*, enum fims__AudioSampleType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__AudioSampleType(struct soap*, const char*, int, const enum fims__AudioSampleType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__AudioSampleType2s(struct soap*, enum fims__AudioSampleType);
SOAP_FMAC3 enum fims__AudioSampleType * SOAP_FMAC4 soap_in_fims__AudioSampleType(struct soap*, const char*, enum fims__AudioSampleType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__AudioSampleType(struct soap*, const char*, enum fims__AudioSampleType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__AudioSampleType(struct soap*, const enum fims__AudioSampleType *, const char*, const char*);

#ifndef soap_write_fims__AudioSampleType
#define soap_write_fims__AudioSampleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__AudioSampleType(soap, data),0) || soap_put_fims__AudioSampleType(soap, data, "fims:AudioSampleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__AudioSampleType * SOAP_FMAC4 soap_get_fims__AudioSampleType(struct soap*, enum fims__AudioSampleType *, const char*, const char*);

#ifndef soap_read_fims__AudioSampleType
#define soap_read_fims__AudioSampleType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__AudioSampleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__JobStatusType
#define SOAP_TYPE_fims__JobStatusType (197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__JobStatusType(struct soap*, enum fims__JobStatusType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__JobStatusType(struct soap*, const char*, int, const enum fims__JobStatusType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__JobStatusType2s(struct soap*, enum fims__JobStatusType);
SOAP_FMAC3 enum fims__JobStatusType * SOAP_FMAC4 soap_in_fims__JobStatusType(struct soap*, const char*, enum fims__JobStatusType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__JobStatusType(struct soap*, const char*, enum fims__JobStatusType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__JobStatusType(struct soap*, const enum fims__JobStatusType *, const char*, const char*);

#ifndef soap_write_fims__JobStatusType
#define soap_write_fims__JobStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__JobStatusType(soap, data),0) || soap_put_fims__JobStatusType(soap, data, "fims:JobStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__JobStatusType * SOAP_FMAC4 soap_get_fims__JobStatusType(struct soap*, enum fims__JobStatusType *, const char*, const char*);

#ifndef soap_read_fims__JobStatusType
#define soap_read_fims__JobStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__JobStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__HashFunctionTypes
#define SOAP_TYPE_fims__HashFunctionTypes (196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__HashFunctionTypes(struct soap*, enum fims__HashFunctionTypes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__HashFunctionTypes(struct soap*, const char*, int, const enum fims__HashFunctionTypes *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__HashFunctionTypes2s(struct soap*, enum fims__HashFunctionTypes);
SOAP_FMAC3 enum fims__HashFunctionTypes * SOAP_FMAC4 soap_in_fims__HashFunctionTypes(struct soap*, const char*, enum fims__HashFunctionTypes *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__HashFunctionTypes(struct soap*, const char*, enum fims__HashFunctionTypes *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__HashFunctionTypes(struct soap*, const enum fims__HashFunctionTypes *, const char*, const char*);

#ifndef soap_write_fims__HashFunctionTypes
#define soap_write_fims__HashFunctionTypes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__HashFunctionTypes(soap, data),0) || soap_put_fims__HashFunctionTypes(soap, data, "fims:HashFunctionTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__HashFunctionTypes * SOAP_FMAC4 soap_get_fims__HashFunctionTypes(struct soap*, enum fims__HashFunctionTypes *, const char*, const char*);

#ifndef soap_read_fims__HashFunctionTypes
#define soap_read_fims__HashFunctionTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__HashFunctionTypes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__JobCommandType
#define SOAP_TYPE_fims__JobCommandType (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__JobCommandType(struct soap*, enum fims__JobCommandType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__JobCommandType(struct soap*, const char*, int, const enum fims__JobCommandType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__JobCommandType2s(struct soap*, enum fims__JobCommandType);
SOAP_FMAC3 enum fims__JobCommandType * SOAP_FMAC4 soap_in_fims__JobCommandType(struct soap*, const char*, enum fims__JobCommandType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__JobCommandType(struct soap*, const char*, enum fims__JobCommandType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__JobCommandType(struct soap*, const enum fims__JobCommandType *, const char*, const char*);

#ifndef soap_write_fims__JobCommandType
#define soap_write_fims__JobCommandType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__JobCommandType(soap, data),0) || soap_put_fims__JobCommandType(soap, data, "fims:JobCommandType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__JobCommandType * SOAP_FMAC4 soap_get_fims__JobCommandType(struct soap*, enum fims__JobCommandType *, const char*, const char*);

#ifndef soap_read_fims__JobCommandType
#define soap_read_fims__JobCommandType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__JobCommandType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__QueueCommandType
#define SOAP_TYPE_fims__QueueCommandType (194)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__QueueCommandType(struct soap*, enum fims__QueueCommandType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueueCommandType(struct soap*, const char*, int, const enum fims__QueueCommandType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__QueueCommandType2s(struct soap*, enum fims__QueueCommandType);
SOAP_FMAC3 enum fims__QueueCommandType * SOAP_FMAC4 soap_in_fims__QueueCommandType(struct soap*, const char*, enum fims__QueueCommandType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__QueueCommandType(struct soap*, const char*, enum fims__QueueCommandType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__QueueCommandType(struct soap*, const enum fims__QueueCommandType *, const char*, const char*);

#ifndef soap_write_fims__QueueCommandType
#define soap_write_fims__QueueCommandType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__QueueCommandType(soap, data),0) || soap_put_fims__QueueCommandType(soap, data, "fims:QueueCommandType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__QueueCommandType * SOAP_FMAC4 soap_get_fims__QueueCommandType(struct soap*, enum fims__QueueCommandType *, const char*, const char*);

#ifndef soap_read_fims__QueueCommandType
#define soap_read_fims__QueueCommandType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueueCommandType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__StorageTypes
#define SOAP_TYPE_fims__StorageTypes (193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__StorageTypes(struct soap*, enum fims__StorageTypes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StorageTypes(struct soap*, const char*, int, const enum fims__StorageTypes *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__StorageTypes2s(struct soap*, enum fims__StorageTypes);
SOAP_FMAC3 enum fims__StorageTypes * SOAP_FMAC4 soap_in_fims__StorageTypes(struct soap*, const char*, enum fims__StorageTypes *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__StorageTypes(struct soap*, const char*, enum fims__StorageTypes *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__StorageTypes(struct soap*, const enum fims__StorageTypes *, const char*, const char*);

#ifndef soap_write_fims__StorageTypes
#define soap_write_fims__StorageTypes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__StorageTypes(soap, data),0) || soap_put_fims__StorageTypes(soap, data, "fims:StorageTypes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__StorageTypes * SOAP_FMAC4 soap_get_fims__StorageTypes(struct soap*, enum fims__StorageTypes *, const char*, const char*);

#ifndef soap_read_fims__StorageTypes
#define soap_read_fims__StorageTypes(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StorageTypes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__PriorityType
#define SOAP_TYPE_fims__PriorityType (192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__PriorityType(struct soap*, enum fims__PriorityType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__PriorityType(struct soap*, const char*, int, const enum fims__PriorityType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__PriorityType2s(struct soap*, enum fims__PriorityType);
SOAP_FMAC3 enum fims__PriorityType * SOAP_FMAC4 soap_in_fims__PriorityType(struct soap*, const char*, enum fims__PriorityType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__PriorityType(struct soap*, const char*, enum fims__PriorityType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__PriorityType(struct soap*, const enum fims__PriorityType *, const char*, const char*);

#ifndef soap_write_fims__PriorityType
#define soap_write_fims__PriorityType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__PriorityType(soap, data),0) || soap_put_fims__PriorityType(soap, data, "fims:PriorityType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__PriorityType * SOAP_FMAC4 soap_get_fims__PriorityType(struct soap*, enum fims__PriorityType *, const char*, const char*);

#ifndef soap_read_fims__PriorityType
#define soap_read_fims__PriorityType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__PriorityType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__QueueStatusType
#define SOAP_TYPE_fims__QueueStatusType (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__QueueStatusType(struct soap*, enum fims__QueueStatusType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueueStatusType(struct soap*, const char*, int, const enum fims__QueueStatusType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__QueueStatusType2s(struct soap*, enum fims__QueueStatusType);
SOAP_FMAC3 enum fims__QueueStatusType * SOAP_FMAC4 soap_in_fims__QueueStatusType(struct soap*, const char*, enum fims__QueueStatusType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__QueueStatusType(struct soap*, const char*, enum fims__QueueStatusType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__QueueStatusType(struct soap*, const enum fims__QueueStatusType *, const char*, const char*);

#ifndef soap_write_fims__QueueStatusType
#define soap_write_fims__QueueStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__QueueStatusType(soap, data),0) || soap_put_fims__QueueStatusType(soap, data, "fims:QueueStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__QueueStatusType * SOAP_FMAC4 soap_get_fims__QueueStatusType(struct soap*, enum fims__QueueStatusType *, const char*, const char*);

#ifndef soap_read_fims__QueueStatusType
#define soap_read_fims__QueueStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueueStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_fims__CurrentVersion
#define SOAP_TYPE_fims__CurrentVersion (188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_fims__CurrentVersion(struct soap*, enum fims__CurrentVersion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CurrentVersion(struct soap*, const char*, int, const enum fims__CurrentVersion *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_fims__CurrentVersion2s(struct soap*, enum fims__CurrentVersion);
SOAP_FMAC3 enum fims__CurrentVersion * SOAP_FMAC4 soap_in_fims__CurrentVersion(struct soap*, const char*, enum fims__CurrentVersion *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2fims__CurrentVersion(struct soap*, const char*, enum fims__CurrentVersion *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__CurrentVersion(struct soap*, const enum fims__CurrentVersion *, const char*, const char*);

#ifndef soap_write_fims__CurrentVersion
#define soap_write_fims__CurrentVersion(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__CurrentVersion(soap, data),0) || soap_put_fims__CurrentVersion(soap, data, "fims:CurrentVersion", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__CurrentVersion * SOAP_FMAC4 soap_get_fims__CurrentVersion(struct soap*, enum fims__CurrentVersion *, const char*, const char*);

#ifndef soap_read_fims__CurrentVersion
#define soap_read_fims__CurrentVersion(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CurrentVersion(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_edlprovider__EdlProviderErrorCodeType
#define SOAP_TYPE_edlprovider__EdlProviderErrorCodeType (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_edlprovider__EdlProviderErrorCodeType(struct soap*, enum edlprovider__EdlProviderErrorCodeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__EdlProviderErrorCodeType(struct soap*, const char*, int, const enum edlprovider__EdlProviderErrorCodeType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_edlprovider__EdlProviderErrorCodeType2s(struct soap*, enum edlprovider__EdlProviderErrorCodeType);
SOAP_FMAC3 enum edlprovider__EdlProviderErrorCodeType * SOAP_FMAC4 soap_in_edlprovider__EdlProviderErrorCodeType(struct soap*, const char*, enum edlprovider__EdlProviderErrorCodeType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2edlprovider__EdlProviderErrorCodeType(struct soap*, const char*, enum edlprovider__EdlProviderErrorCodeType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_edlprovider__EdlProviderErrorCodeType(struct soap*, const enum edlprovider__EdlProviderErrorCodeType *, const char*, const char*);

#ifndef soap_write_edlprovider__EdlProviderErrorCodeType
#define soap_write_edlprovider__EdlProviderErrorCodeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_edlprovider__EdlProviderErrorCodeType(soap, data),0) || soap_put_edlprovider__EdlProviderErrorCodeType(soap, data, "edlprovider:EdlProviderErrorCodeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum edlprovider__EdlProviderErrorCodeType * SOAP_FMAC4 soap_get_edlprovider__EdlProviderErrorCodeType(struct soap*, enum edlprovider__EdlProviderErrorCodeType *, const char*, const char*);

#ifndef soap_read_edlprovider__EdlProviderErrorCodeType
#define soap_read_edlprovider__EdlProviderErrorCodeType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__EdlProviderErrorCodeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__fims__ContainerFormatType_containerFormat
#define SOAP_TYPE__fims__ContainerFormatType_containerFormat (450)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__ContainerFormatType_containerFormat(struct soap*, const char*, int, const _fims__ContainerFormatType_containerFormat *, const char*);
SOAP_FMAC3 _fims__ContainerFormatType_containerFormat * SOAP_FMAC4 soap_in__fims__ContainerFormatType_containerFormat(struct soap*, const char*, _fims__ContainerFormatType_containerFormat *, const char*);

#ifndef soap_write__fims__ContainerFormatType_containerFormat
#define soap_write__fims__ContainerFormatType_containerFormat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContainerFormatType-containerFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__ContainerFormatType_containerFormat * SOAP_FMAC4 soap_get__fims__ContainerFormatType_containerFormat(struct soap*, _fims__ContainerFormatType_containerFormat *, const char*, const char*);

#ifndef soap_read__fims__ContainerFormatType_containerFormat
#define soap_read__fims__ContainerFormatType_containerFormat(soap, data) ( soap_begin_recv(soap) || !soap_get__fims__ContainerFormatType_containerFormat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fims__ContainerFormatType_containerFormat * SOAP_FMAC2 soap_instantiate__fims__ContainerFormatType_containerFormat(struct soap*, int, const char*, const char*, size_t*);

inline _fims__ContainerFormatType_containerFormat * soap_new__fims__ContainerFormatType_containerFormat(struct soap *soap, int n = -1) { return soap_instantiate__fims__ContainerFormatType_containerFormat(soap, n, NULL, NULL, NULL); }

inline _fims__ContainerFormatType_containerFormat * soap_new_req__fims__ContainerFormatType_containerFormat(struct soap *soap, std::wstring& __item) { _fims__ContainerFormatType_containerFormat *_p = soap_instantiate__fims__ContainerFormatType_containerFormat(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__ContainerFormatType_containerFormat::__item = __item; } return _p; }

inline _fims__ContainerFormatType_containerFormat * soap_new_set__fims__ContainerFormatType_containerFormat(struct soap *soap, std::wstring& __item, std::wstring *formatLabel, std::wstring *formatDefinition, std::wstring *formatLink) { _fims__ContainerFormatType_containerFormat *_p = soap_instantiate__fims__ContainerFormatType_containerFormat(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__ContainerFormatType_containerFormat::__item = __item; _p->_fims__ContainerFormatType_containerFormat::formatLabel = formatLabel; _p->_fims__ContainerFormatType_containerFormat::formatDefinition = formatDefinition; _p->_fims__ContainerFormatType_containerFormat::formatLink = formatLink; } return _p; }

inline void soap_delete__fims__ContainerFormatType_containerFormat(struct soap *soap, _fims__ContainerFormatType_containerFormat *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fims__ContainerFormatType_containerFormat(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fims__AudioFormatType_trackConfiguration
#define SOAP_TYPE__fims__AudioFormatType_trackConfiguration (443)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__AudioFormatType_trackConfiguration(struct soap*, const char*, int, const _fims__AudioFormatType_trackConfiguration *, const char*);
SOAP_FMAC3 _fims__AudioFormatType_trackConfiguration * SOAP_FMAC4 soap_in__fims__AudioFormatType_trackConfiguration(struct soap*, const char*, _fims__AudioFormatType_trackConfiguration *, const char*);

#ifndef soap_write__fims__AudioFormatType_trackConfiguration
#define soap_write__fims__AudioFormatType_trackConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:AudioFormatType-trackConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__AudioFormatType_trackConfiguration * SOAP_FMAC4 soap_get__fims__AudioFormatType_trackConfiguration(struct soap*, _fims__AudioFormatType_trackConfiguration *, const char*, const char*);

#ifndef soap_read__fims__AudioFormatType_trackConfiguration
#define soap_read__fims__AudioFormatType_trackConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get__fims__AudioFormatType_trackConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fims__AudioFormatType_trackConfiguration * SOAP_FMAC2 soap_instantiate__fims__AudioFormatType_trackConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline _fims__AudioFormatType_trackConfiguration * soap_new__fims__AudioFormatType_trackConfiguration(struct soap *soap, int n = -1) { return soap_instantiate__fims__AudioFormatType_trackConfiguration(soap, n, NULL, NULL, NULL); }

inline _fims__AudioFormatType_trackConfiguration * soap_new_req__fims__AudioFormatType_trackConfiguration(struct soap *soap) { _fims__AudioFormatType_trackConfiguration *_p = soap_instantiate__fims__AudioFormatType_trackConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fims__AudioFormatType_trackConfiguration * soap_new_set__fims__AudioFormatType_trackConfiguration(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink) { _fims__AudioFormatType_trackConfiguration *_p = soap_instantiate__fims__AudioFormatType_trackConfiguration(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__AudioFormatType_trackConfiguration::typeLabel = typeLabel; _p->_fims__AudioFormatType_trackConfiguration::typeDefinition = typeDefinition; _p->_fims__AudioFormatType_trackConfiguration::typeLink = typeLink; } return _p; }

inline void soap_delete__fims__AudioFormatType_trackConfiguration(struct soap *soap, _fims__AudioFormatType_trackConfiguration *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fims__AudioFormatType_trackConfiguration(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fims__BMEssenceLocatorType_containerMimeType
#define SOAP_TYPE__fims__BMEssenceLocatorType_containerMimeType (432)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__BMEssenceLocatorType_containerMimeType(struct soap*, const char*, int, const _fims__BMEssenceLocatorType_containerMimeType *, const char*);
SOAP_FMAC3 _fims__BMEssenceLocatorType_containerMimeType * SOAP_FMAC4 soap_in__fims__BMEssenceLocatorType_containerMimeType(struct soap*, const char*, _fims__BMEssenceLocatorType_containerMimeType *, const char*);

#ifndef soap_write__fims__BMEssenceLocatorType_containerMimeType
#define soap_write__fims__BMEssenceLocatorType_containerMimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMEssenceLocatorType-containerMimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__BMEssenceLocatorType_containerMimeType * SOAP_FMAC4 soap_get__fims__BMEssenceLocatorType_containerMimeType(struct soap*, _fims__BMEssenceLocatorType_containerMimeType *, const char*, const char*);

#ifndef soap_read__fims__BMEssenceLocatorType_containerMimeType
#define soap_read__fims__BMEssenceLocatorType_containerMimeType(soap, data) ( soap_begin_recv(soap) || !soap_get__fims__BMEssenceLocatorType_containerMimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fims__BMEssenceLocatorType_containerMimeType * SOAP_FMAC2 soap_instantiate__fims__BMEssenceLocatorType_containerMimeType(struct soap*, int, const char*, const char*, size_t*);

inline _fims__BMEssenceLocatorType_containerMimeType * soap_new__fims__BMEssenceLocatorType_containerMimeType(struct soap *soap, int n = -1) { return soap_instantiate__fims__BMEssenceLocatorType_containerMimeType(soap, n, NULL, NULL, NULL); }

inline _fims__BMEssenceLocatorType_containerMimeType * soap_new_req__fims__BMEssenceLocatorType_containerMimeType(struct soap *soap, std::wstring& __item) { _fims__BMEssenceLocatorType_containerMimeType *_p = soap_instantiate__fims__BMEssenceLocatorType_containerMimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__BMEssenceLocatorType_containerMimeType::__item = __item; } return _p; }

inline _fims__BMEssenceLocatorType_containerMimeType * soap_new_set__fims__BMEssenceLocatorType_containerMimeType(struct soap *soap, std::wstring& __item, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink) { _fims__BMEssenceLocatorType_containerMimeType *_p = soap_instantiate__fims__BMEssenceLocatorType_containerMimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__BMEssenceLocatorType_containerMimeType::__item = __item; _p->_fims__BMEssenceLocatorType_containerMimeType::typeLabel = typeLabel; _p->_fims__BMEssenceLocatorType_containerMimeType::typeDefinition = typeDefinition; _p->_fims__BMEssenceLocatorType_containerMimeType::typeLink = typeLink; } return _p; }

inline void soap_delete__fims__BMEssenceLocatorType_containerMimeType(struct soap *soap, _fims__BMEssenceLocatorType_containerMimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fims__BMEssenceLocatorType_containerMimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fims__BMContentFormatType_mimeType
#define SOAP_TYPE__fims__BMContentFormatType_mimeType (429)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__BMContentFormatType_mimeType(struct soap*, const char*, int, const _fims__BMContentFormatType_mimeType *, const char*);
SOAP_FMAC3 _fims__BMContentFormatType_mimeType * SOAP_FMAC4 soap_in__fims__BMContentFormatType_mimeType(struct soap*, const char*, _fims__BMContentFormatType_mimeType *, const char*);

#ifndef soap_write__fims__BMContentFormatType_mimeType
#define soap_write__fims__BMContentFormatType_mimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMContentFormatType-mimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__BMContentFormatType_mimeType * SOAP_FMAC4 soap_get__fims__BMContentFormatType_mimeType(struct soap*, _fims__BMContentFormatType_mimeType *, const char*, const char*);

#ifndef soap_read__fims__BMContentFormatType_mimeType
#define soap_read__fims__BMContentFormatType_mimeType(soap, data) ( soap_begin_recv(soap) || !soap_get__fims__BMContentFormatType_mimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fims__BMContentFormatType_mimeType * SOAP_FMAC2 soap_instantiate__fims__BMContentFormatType_mimeType(struct soap*, int, const char*, const char*, size_t*);

inline _fims__BMContentFormatType_mimeType * soap_new__fims__BMContentFormatType_mimeType(struct soap *soap, int n = -1) { return soap_instantiate__fims__BMContentFormatType_mimeType(soap, n, NULL, NULL, NULL); }

inline _fims__BMContentFormatType_mimeType * soap_new_req__fims__BMContentFormatType_mimeType(struct soap *soap, std::wstring& __item) { _fims__BMContentFormatType_mimeType *_p = soap_instantiate__fims__BMContentFormatType_mimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__BMContentFormatType_mimeType::__item = __item; } return _p; }

inline _fims__BMContentFormatType_mimeType * soap_new_set__fims__BMContentFormatType_mimeType(struct soap *soap, std::wstring& __item, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink) { _fims__BMContentFormatType_mimeType *_p = soap_instantiate__fims__BMContentFormatType_mimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__BMContentFormatType_mimeType::__item = __item; _p->_fims__BMContentFormatType_mimeType::typeLabel = typeLabel; _p->_fims__BMContentFormatType_mimeType::typeDefinition = typeDefinition; _p->_fims__BMContentFormatType_mimeType::typeLink = typeLink; } return _p; }

inline void soap_delete__fims__BMContentFormatType_mimeType(struct soap *soap, _fims__BMContentFormatType_mimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fims__BMContentFormatType_mimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fims__ServiceType_serviceDescription
#define SOAP_TYPE__fims__ServiceType_serviceDescription (412)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__ServiceType_serviceDescription(struct soap*, const char*, int, const _fims__ServiceType_serviceDescription *, const char*);
SOAP_FMAC3 _fims__ServiceType_serviceDescription * SOAP_FMAC4 soap_in__fims__ServiceType_serviceDescription(struct soap*, const char*, _fims__ServiceType_serviceDescription *, const char*);

#ifndef soap_write__fims__ServiceType_serviceDescription
#define soap_write__fims__ServiceType_serviceDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ServiceType-serviceDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__ServiceType_serviceDescription * SOAP_FMAC4 soap_get__fims__ServiceType_serviceDescription(struct soap*, _fims__ServiceType_serviceDescription *, const char*, const char*);

#ifndef soap_read__fims__ServiceType_serviceDescription
#define soap_read__fims__ServiceType_serviceDescription(soap, data) ( soap_begin_recv(soap) || !soap_get__fims__ServiceType_serviceDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fims__ServiceType_serviceDescription * SOAP_FMAC2 soap_instantiate__fims__ServiceType_serviceDescription(struct soap*, int, const char*, const char*, size_t*);

inline _fims__ServiceType_serviceDescription * soap_new__fims__ServiceType_serviceDescription(struct soap *soap, int n = -1) { return soap_instantiate__fims__ServiceType_serviceDescription(soap, n, NULL, NULL, NULL); }

inline _fims__ServiceType_serviceDescription * soap_new_req__fims__ServiceType_serviceDescription(struct soap *soap) { _fims__ServiceType_serviceDescription *_p = soap_instantiate__fims__ServiceType_serviceDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fims__ServiceType_serviceDescription * soap_new_set__fims__ServiceType_serviceDescription(struct soap *soap, std::vector<char * >& __any) { _fims__ServiceType_serviceDescription *_p = soap_instantiate__fims__ServiceType_serviceDescription(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__ServiceType_serviceDescription::__any = __any; } return _p; }

inline void soap_delete__fims__ServiceType_serviceDescription(struct soap *soap, _fims__ServiceType_serviceDescription *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fims__ServiceType_serviceDescription(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__addressType_country
#define SOAP_TYPE__fimsdescription__addressType_country (400)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__addressType_country(struct soap*, const char*, int, const _fimsdescription__addressType_country *, const char*);
SOAP_FMAC3 _fimsdescription__addressType_country * SOAP_FMAC4 soap_in__fimsdescription__addressType_country(struct soap*, const char*, _fimsdescription__addressType_country *, const char*);

#ifndef soap_write__fimsdescription__addressType_country
#define soap_write__fimsdescription__addressType_country(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:addressType-country", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__addressType_country * SOAP_FMAC4 soap_get__fimsdescription__addressType_country(struct soap*, _fimsdescription__addressType_country *, const char*, const char*);

#ifndef soap_read__fimsdescription__addressType_country
#define soap_read__fimsdescription__addressType_country(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__addressType_country(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__addressType_country * SOAP_FMAC2 soap_instantiate__fimsdescription__addressType_country(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__addressType_country * soap_new__fimsdescription__addressType_country(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__addressType_country(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__addressType_country * soap_new_req__fimsdescription__addressType_country(struct soap *soap) { _fimsdescription__addressType_country *_p = soap_instantiate__fimsdescription__addressType_country(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__addressType_country * soap_new_set__fimsdescription__addressType_country(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__addressType_country *_p = soap_instantiate__fimsdescription__addressType_country(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__addressType_country::typeLabel = typeLabel; _p->_fimsdescription__addressType_country::typeDefinition = typeDefinition; _p->_fimsdescription__addressType_country::typeLink = typeLink; _p->_fimsdescription__addressType_country::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__addressType_country(struct soap *soap, _fimsdescription__addressType_country *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__addressType_country(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__organisationDetailsType_organisationDepartment
#define SOAP_TYPE__fimsdescription__organisationDetailsType_organisationDepartment (397)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, const char*, int, const _fimsdescription__organisationDetailsType_organisationDepartment *, const char*);
SOAP_FMAC3 _fimsdescription__organisationDetailsType_organisationDepartment * SOAP_FMAC4 soap_in__fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, const char*, _fimsdescription__organisationDetailsType_organisationDepartment *, const char*);

#ifndef soap_write__fimsdescription__organisationDetailsType_organisationDepartment
#define soap_write__fimsdescription__organisationDetailsType_organisationDepartment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:organisationDetailsType-organisationDepartment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__organisationDetailsType_organisationDepartment * SOAP_FMAC4 soap_get__fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, _fimsdescription__organisationDetailsType_organisationDepartment *, const char*, const char*);

#ifndef soap_read__fimsdescription__organisationDetailsType_organisationDepartment
#define soap_read__fimsdescription__organisationDetailsType_organisationDepartment(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__organisationDetailsType_organisationDepartment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__organisationDetailsType_organisationDepartment * SOAP_FMAC2 soap_instantiate__fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__organisationDetailsType_organisationDepartment * soap_new__fimsdescription__organisationDetailsType_organisationDepartment(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__organisationDetailsType_organisationDepartment(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__organisationDetailsType_organisationDepartment * soap_new_req__fimsdescription__organisationDetailsType_organisationDepartment(struct soap *soap) { _fimsdescription__organisationDetailsType_organisationDepartment *_p = soap_instantiate__fimsdescription__organisationDetailsType_organisationDepartment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__organisationDetailsType_organisationDepartment * soap_new_set__fimsdescription__organisationDetailsType_organisationDepartment(struct soap *soap, std::wstring *departmentId) { _fimsdescription__organisationDetailsType_organisationDepartment *_p = soap_instantiate__fimsdescription__organisationDetailsType_organisationDepartment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__organisationDetailsType_organisationDepartment::departmentId = departmentId; } return _p; }

inline void soap_delete__fimsdescription__organisationDetailsType_organisationDepartment(struct soap *soap, _fimsdescription__organisationDetailsType_organisationDepartment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__entityType_role
#define SOAP_TYPE__fimsdescription__entityType_role (391)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__entityType_role(struct soap*, const char*, int, const _fimsdescription__entityType_role *, const char*);
SOAP_FMAC3 _fimsdescription__entityType_role * SOAP_FMAC4 soap_in__fimsdescription__entityType_role(struct soap*, const char*, _fimsdescription__entityType_role *, const char*);

#ifndef soap_write__fimsdescription__entityType_role
#define soap_write__fimsdescription__entityType_role(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:entityType-role", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__entityType_role * SOAP_FMAC4 soap_get__fimsdescription__entityType_role(struct soap*, _fimsdescription__entityType_role *, const char*, const char*);

#ifndef soap_read__fimsdescription__entityType_role
#define soap_read__fimsdescription__entityType_role(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__entityType_role(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__entityType_role * SOAP_FMAC2 soap_instantiate__fimsdescription__entityType_role(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__entityType_role * soap_new__fimsdescription__entityType_role(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__entityType_role(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__entityType_role * soap_new_req__fimsdescription__entityType_role(struct soap *soap) { _fimsdescription__entityType_role *_p = soap_instantiate__fimsdescription__entityType_role(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__entityType_role * soap_new_set__fimsdescription__entityType_role(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__entityType_role *_p = soap_instantiate__fimsdescription__entityType_role(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__entityType_role::typeLabel = typeLabel; _p->_fimsdescription__entityType_role::typeDefinition = typeDefinition; _p->_fimsdescription__entityType_role::typeLink = typeLink; _p->_fimsdescription__entityType_role::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__entityType_role(struct soap *soap, _fimsdescription__entityType_role *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__entityType_role(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__dateType_alternative
#define SOAP_TYPE__fimsdescription__dateType_alternative (387)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__dateType_alternative(struct soap*, const char*, int, const _fimsdescription__dateType_alternative *, const char*);
SOAP_FMAC3 _fimsdescription__dateType_alternative * SOAP_FMAC4 soap_in__fimsdescription__dateType_alternative(struct soap*, const char*, _fimsdescription__dateType_alternative *, const char*);

#ifndef soap_write__fimsdescription__dateType_alternative
#define soap_write__fimsdescription__dateType_alternative(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:dateType-alternative", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_alternative * SOAP_FMAC4 soap_get__fimsdescription__dateType_alternative(struct soap*, _fimsdescription__dateType_alternative *, const char*, const char*);

#ifndef soap_read__fimsdescription__dateType_alternative
#define soap_read__fimsdescription__dateType_alternative(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__dateType_alternative(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__dateType_alternative * SOAP_FMAC2 soap_instantiate__fimsdescription__dateType_alternative(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__dateType_alternative * soap_new__fimsdescription__dateType_alternative(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__dateType_alternative(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__dateType_alternative * soap_new_req__fimsdescription__dateType_alternative(struct soap *soap) { _fimsdescription__dateType_alternative *_p = soap_instantiate__fimsdescription__dateType_alternative(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__dateType_alternative * soap_new_set__fimsdescription__dateType_alternative(struct soap *soap, std::wstring *startYear, std::wstring *startDate, std::wstring *startTime, std::wstring *endYear, std::wstring *endDate, std::wstring *endTime, std::wstring *period, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__dateType_alternative *_p = soap_instantiate__fimsdescription__dateType_alternative(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__dateType_alternative::startYear = startYear; _p->_fimsdescription__dateType_alternative::startDate = startDate; _p->_fimsdescription__dateType_alternative::startTime = startTime; _p->_fimsdescription__dateType_alternative::endYear = endYear; _p->_fimsdescription__dateType_alternative::endDate = endDate; _p->_fimsdescription__dateType_alternative::endTime = endTime; _p->_fimsdescription__dateType_alternative::period = period; _p->_fimsdescription__dateType_alternative::typeLabel = typeLabel; _p->_fimsdescription__dateType_alternative::typeDefinition = typeDefinition; _p->_fimsdescription__dateType_alternative::typeLink = typeLink; _p->_fimsdescription__dateType_alternative::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__dateType_alternative(struct soap *soap, _fimsdescription__dateType_alternative *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__dateType_alternative(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__dateType_issued
#define SOAP_TYPE__fimsdescription__dateType_issued (385)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__dateType_issued(struct soap*, const char*, int, const _fimsdescription__dateType_issued *, const char*);
SOAP_FMAC3 _fimsdescription__dateType_issued * SOAP_FMAC4 soap_in__fimsdescription__dateType_issued(struct soap*, const char*, _fimsdescription__dateType_issued *, const char*);

#ifndef soap_write__fimsdescription__dateType_issued
#define soap_write__fimsdescription__dateType_issued(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:dateType-issued", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_issued * SOAP_FMAC4 soap_get__fimsdescription__dateType_issued(struct soap*, _fimsdescription__dateType_issued *, const char*, const char*);

#ifndef soap_read__fimsdescription__dateType_issued
#define soap_read__fimsdescription__dateType_issued(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__dateType_issued(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__dateType_issued * SOAP_FMAC2 soap_instantiate__fimsdescription__dateType_issued(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__dateType_issued * soap_new__fimsdescription__dateType_issued(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__dateType_issued(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__dateType_issued * soap_new_req__fimsdescription__dateType_issued(struct soap *soap) { _fimsdescription__dateType_issued *_p = soap_instantiate__fimsdescription__dateType_issued(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__dateType_issued * soap_new_set__fimsdescription__dateType_issued(struct soap *soap, std::wstring *startYear, std::wstring *startDate, std::wstring *startTime, std::wstring *endYear, std::wstring *endDate, std::wstring *endTime, std::wstring *period) { _fimsdescription__dateType_issued *_p = soap_instantiate__fimsdescription__dateType_issued(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__dateType_issued::startYear = startYear; _p->_fimsdescription__dateType_issued::startDate = startDate; _p->_fimsdescription__dateType_issued::startTime = startTime; _p->_fimsdescription__dateType_issued::endYear = endYear; _p->_fimsdescription__dateType_issued::endDate = endDate; _p->_fimsdescription__dateType_issued::endTime = endTime; _p->_fimsdescription__dateType_issued::period = period; } return _p; }

inline void soap_delete__fimsdescription__dateType_issued(struct soap *soap, _fimsdescription__dateType_issued *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__dateType_issued(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__dateType_modified
#define SOAP_TYPE__fimsdescription__dateType_modified (383)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__dateType_modified(struct soap*, const char*, int, const _fimsdescription__dateType_modified *, const char*);
SOAP_FMAC3 _fimsdescription__dateType_modified * SOAP_FMAC4 soap_in__fimsdescription__dateType_modified(struct soap*, const char*, _fimsdescription__dateType_modified *, const char*);

#ifndef soap_write__fimsdescription__dateType_modified
#define soap_write__fimsdescription__dateType_modified(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:dateType-modified", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_modified * SOAP_FMAC4 soap_get__fimsdescription__dateType_modified(struct soap*, _fimsdescription__dateType_modified *, const char*, const char*);

#ifndef soap_read__fimsdescription__dateType_modified
#define soap_read__fimsdescription__dateType_modified(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__dateType_modified(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__dateType_modified * SOAP_FMAC2 soap_instantiate__fimsdescription__dateType_modified(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__dateType_modified * soap_new__fimsdescription__dateType_modified(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__dateType_modified(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__dateType_modified * soap_new_req__fimsdescription__dateType_modified(struct soap *soap) { _fimsdescription__dateType_modified *_p = soap_instantiate__fimsdescription__dateType_modified(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__dateType_modified * soap_new_set__fimsdescription__dateType_modified(struct soap *soap, std::wstring *startYear, std::wstring *startDate, std::wstring *startTime, std::wstring *endYear, std::wstring *endDate, std::wstring *endTime, std::wstring *period) { _fimsdescription__dateType_modified *_p = soap_instantiate__fimsdescription__dateType_modified(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__dateType_modified::startYear = startYear; _p->_fimsdescription__dateType_modified::startDate = startDate; _p->_fimsdescription__dateType_modified::startTime = startTime; _p->_fimsdescription__dateType_modified::endYear = endYear; _p->_fimsdescription__dateType_modified::endDate = endDate; _p->_fimsdescription__dateType_modified::endTime = endTime; _p->_fimsdescription__dateType_modified::period = period; } return _p; }

inline void soap_delete__fimsdescription__dateType_modified(struct soap *soap, _fimsdescription__dateType_modified *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__dateType_modified(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__dateType_created
#define SOAP_TYPE__fimsdescription__dateType_created (379)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__dateType_created(struct soap*, const char*, int, const _fimsdescription__dateType_created *, const char*);
SOAP_FMAC3 _fimsdescription__dateType_created * SOAP_FMAC4 soap_in__fimsdescription__dateType_created(struct soap*, const char*, _fimsdescription__dateType_created *, const char*);

#ifndef soap_write__fimsdescription__dateType_created
#define soap_write__fimsdescription__dateType_created(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:dateType-created", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_created * SOAP_FMAC4 soap_get__fimsdescription__dateType_created(struct soap*, _fimsdescription__dateType_created *, const char*, const char*);

#ifndef soap_read__fimsdescription__dateType_created
#define soap_read__fimsdescription__dateType_created(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__dateType_created(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__dateType_created * SOAP_FMAC2 soap_instantiate__fimsdescription__dateType_created(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__dateType_created * soap_new__fimsdescription__dateType_created(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__dateType_created(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__dateType_created * soap_new_req__fimsdescription__dateType_created(struct soap *soap) { _fimsdescription__dateType_created *_p = soap_instantiate__fimsdescription__dateType_created(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__dateType_created * soap_new_set__fimsdescription__dateType_created(struct soap *soap, std::wstring *startYear, std::wstring *startDate, std::wstring *startTime, std::wstring *endYear, std::wstring *endDate, std::wstring *endTime, std::wstring *period) { _fimsdescription__dateType_created *_p = soap_instantiate__fimsdescription__dateType_created(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__dateType_created::startYear = startYear; _p->_fimsdescription__dateType_created::startDate = startDate; _p->_fimsdescription__dateType_created::startTime = startTime; _p->_fimsdescription__dateType_created::endYear = endYear; _p->_fimsdescription__dateType_created::endDate = endDate; _p->_fimsdescription__dateType_created::endTime = endTime; _p->_fimsdescription__dateType_created::period = period; } return _p; }

inline void soap_delete__fimsdescription__dateType_created(struct soap *soap, _fimsdescription__dateType_created *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__dateType_created(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__coverageType_spatial_coordinates
#define SOAP_TYPE__fimsdescription__coverageType_spatial_coordinates (373)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__coverageType_spatial_coordinates(struct soap*, const char*, int, const _fimsdescription__coverageType_spatial_coordinates *, const char*);
SOAP_FMAC3 _fimsdescription__coverageType_spatial_coordinates * SOAP_FMAC4 soap_in__fimsdescription__coverageType_spatial_coordinates(struct soap*, const char*, _fimsdescription__coverageType_spatial_coordinates *, const char*);

#ifndef soap_write__fimsdescription__coverageType_spatial_coordinates
#define soap_write__fimsdescription__coverageType_spatial_coordinates(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:coverageType-spatial-coordinates", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__coverageType_spatial_coordinates * SOAP_FMAC4 soap_get__fimsdescription__coverageType_spatial_coordinates(struct soap*, _fimsdescription__coverageType_spatial_coordinates *, const char*, const char*);

#ifndef soap_read__fimsdescription__coverageType_spatial_coordinates
#define soap_read__fimsdescription__coverageType_spatial_coordinates(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__coverageType_spatial_coordinates(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__coverageType_spatial_coordinates * SOAP_FMAC2 soap_instantiate__fimsdescription__coverageType_spatial_coordinates(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__coverageType_spatial_coordinates * soap_new__fimsdescription__coverageType_spatial_coordinates(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__coverageType_spatial_coordinates(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__coverageType_spatial_coordinates * soap_new_req__fimsdescription__coverageType_spatial_coordinates(struct soap *soap, float posy, float posx) { _fimsdescription__coverageType_spatial_coordinates *_p = soap_instantiate__fimsdescription__coverageType_spatial_coordinates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__coverageType_spatial_coordinates::posy = posy; _p->_fimsdescription__coverageType_spatial_coordinates::posx = posx; } return _p; }

inline _fimsdescription__coverageType_spatial_coordinates * soap_new_set__fimsdescription__coverageType_spatial_coordinates(struct soap *soap, float posy, float posx, std::wstring *formatLabel, std::wstring *formatDefinition, std::wstring *formatLink, std::wstring *formatLanguage) { _fimsdescription__coverageType_spatial_coordinates *_p = soap_instantiate__fimsdescription__coverageType_spatial_coordinates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__coverageType_spatial_coordinates::posy = posy; _p->_fimsdescription__coverageType_spatial_coordinates::posx = posx; _p->_fimsdescription__coverageType_spatial_coordinates::formatLabel = formatLabel; _p->_fimsdescription__coverageType_spatial_coordinates::formatDefinition = formatDefinition; _p->_fimsdescription__coverageType_spatial_coordinates::formatLink = formatLink; _p->_fimsdescription__coverageType_spatial_coordinates::formatLanguage = formatLanguage; } return _p; }

inline void soap_delete__fimsdescription__coverageType_spatial_coordinates(struct soap *soap, _fimsdescription__coverageType_spatial_coordinates *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__coverageType_spatial_coordinates(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__coverageType_spatial_locationName
#define SOAP_TYPE__fimsdescription__coverageType_spatial_locationName (372)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__coverageType_spatial_locationName(struct soap*, const char*, int, const _fimsdescription__coverageType_spatial_locationName *, const char*);
SOAP_FMAC3 _fimsdescription__coverageType_spatial_locationName * SOAP_FMAC4 soap_in__fimsdescription__coverageType_spatial_locationName(struct soap*, const char*, _fimsdescription__coverageType_spatial_locationName *, const char*);

#ifndef soap_write__fimsdescription__coverageType_spatial_locationName
#define soap_write__fimsdescription__coverageType_spatial_locationName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:coverageType-spatial-locationName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__coverageType_spatial_locationName * SOAP_FMAC4 soap_get__fimsdescription__coverageType_spatial_locationName(struct soap*, _fimsdescription__coverageType_spatial_locationName *, const char*, const char*);

#ifndef soap_read__fimsdescription__coverageType_spatial_locationName
#define soap_read__fimsdescription__coverageType_spatial_locationName(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__coverageType_spatial_locationName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__coverageType_spatial_locationName * SOAP_FMAC2 soap_instantiate__fimsdescription__coverageType_spatial_locationName(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__coverageType_spatial_locationName * soap_new__fimsdescription__coverageType_spatial_locationName(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__coverageType_spatial_locationName(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__coverageType_spatial_locationName * soap_new_req__fimsdescription__coverageType_spatial_locationName(struct soap *soap) { _fimsdescription__coverageType_spatial_locationName *_p = soap_instantiate__fimsdescription__coverageType_spatial_locationName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__coverageType_spatial_locationName * soap_new_set__fimsdescription__coverageType_spatial_locationName(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__coverageType_spatial_locationName *_p = soap_instantiate__fimsdescription__coverageType_spatial_locationName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__coverageType_spatial_locationName::typeLabel = typeLabel; _p->_fimsdescription__coverageType_spatial_locationName::typeDefinition = typeDefinition; _p->_fimsdescription__coverageType_spatial_locationName::typeLink = typeLink; _p->_fimsdescription__coverageType_spatial_locationName::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__coverageType_spatial_locationName(struct soap *soap, _fimsdescription__coverageType_spatial_locationName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__coverageType_spatial_locationName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__coverageType_spatial
#define SOAP_TYPE__fimsdescription__coverageType_spatial (371)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__coverageType_spatial(struct soap*, const char*, int, const _fimsdescription__coverageType_spatial *, const char*);
SOAP_FMAC3 _fimsdescription__coverageType_spatial * SOAP_FMAC4 soap_in__fimsdescription__coverageType_spatial(struct soap*, const char*, _fimsdescription__coverageType_spatial *, const char*);

#ifndef soap_write__fimsdescription__coverageType_spatial
#define soap_write__fimsdescription__coverageType_spatial(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:coverageType-spatial", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__coverageType_spatial * SOAP_FMAC4 soap_get__fimsdescription__coverageType_spatial(struct soap*, _fimsdescription__coverageType_spatial *, const char*, const char*);

#ifndef soap_read__fimsdescription__coverageType_spatial
#define soap_read__fimsdescription__coverageType_spatial(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__coverageType_spatial(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__coverageType_spatial * SOAP_FMAC2 soap_instantiate__fimsdescription__coverageType_spatial(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__coverageType_spatial * soap_new__fimsdescription__coverageType_spatial(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__coverageType_spatial(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__coverageType_spatial * soap_new_req__fimsdescription__coverageType_spatial(struct soap *soap, _fimsdescription__coverageType_spatial_locationName& locationName) { _fimsdescription__coverageType_spatial *_p = soap_instantiate__fimsdescription__coverageType_spatial(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__coverageType_spatial::locationName = locationName; } return _p; }

inline _fimsdescription__coverageType_spatial * soap_new_set__fimsdescription__coverageType_spatial(struct soap *soap, _fimsdescription__coverageType_spatial_locationName& locationName, _fimsdescription__coverageType_spatial_coordinates *coordinates) { _fimsdescription__coverageType_spatial *_p = soap_instantiate__fimsdescription__coverageType_spatial(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__coverageType_spatial::locationName = locationName; _p->_fimsdescription__coverageType_spatial::coordinates = coordinates; } return _p; }

inline void soap_delete__fimsdescription__coverageType_spatial(struct soap *soap, _fimsdescription__coverageType_spatial *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__coverageType_spatial(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__coverageType_temporal
#define SOAP_TYPE__fimsdescription__coverageType_temporal (369)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__coverageType_temporal(struct soap*, const char*, int, const _fimsdescription__coverageType_temporal *, const char*);
SOAP_FMAC3 _fimsdescription__coverageType_temporal * SOAP_FMAC4 soap_in__fimsdescription__coverageType_temporal(struct soap*, const char*, _fimsdescription__coverageType_temporal *, const char*);

#ifndef soap_write__fimsdescription__coverageType_temporal
#define soap_write__fimsdescription__coverageType_temporal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:coverageType-temporal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__coverageType_temporal * SOAP_FMAC4 soap_get__fimsdescription__coverageType_temporal(struct soap*, _fimsdescription__coverageType_temporal *, const char*, const char*);

#ifndef soap_read__fimsdescription__coverageType_temporal
#define soap_read__fimsdescription__coverageType_temporal(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__coverageType_temporal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__coverageType_temporal * SOAP_FMAC2 soap_instantiate__fimsdescription__coverageType_temporal(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__coverageType_temporal * soap_new__fimsdescription__coverageType_temporal(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__coverageType_temporal(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__coverageType_temporal * soap_new_req__fimsdescription__coverageType_temporal(struct soap *soap) { _fimsdescription__coverageType_temporal *_p = soap_instantiate__fimsdescription__coverageType_temporal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__coverageType_temporal * soap_new_set__fimsdescription__coverageType_temporal(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__coverageType_temporal *_p = soap_instantiate__fimsdescription__coverageType_temporal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__coverageType_temporal::typeLabel = typeLabel; _p->_fimsdescription__coverageType_temporal::typeDefinition = typeDefinition; _p->_fimsdescription__coverageType_temporal::typeLink = typeLink; _p->_fimsdescription__coverageType_temporal::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__coverageType_temporal(struct soap *soap, _fimsdescription__coverageType_temporal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__coverageType_temporal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__typeType_targetAudience
#define SOAP_TYPE__fimsdescription__typeType_targetAudience (366)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__typeType_targetAudience(struct soap*, const char*, int, const _fimsdescription__typeType_targetAudience *, const char*);
SOAP_FMAC3 _fimsdescription__typeType_targetAudience * SOAP_FMAC4 soap_in__fimsdescription__typeType_targetAudience(struct soap*, const char*, _fimsdescription__typeType_targetAudience *, const char*);

#ifndef soap_write__fimsdescription__typeType_targetAudience
#define soap_write__fimsdescription__typeType_targetAudience(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:typeType-targetAudience", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__typeType_targetAudience * SOAP_FMAC4 soap_get__fimsdescription__typeType_targetAudience(struct soap*, _fimsdescription__typeType_targetAudience *, const char*, const char*);

#ifndef soap_read__fimsdescription__typeType_targetAudience
#define soap_read__fimsdescription__typeType_targetAudience(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__typeType_targetAudience(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__typeType_targetAudience * SOAP_FMAC2 soap_instantiate__fimsdescription__typeType_targetAudience(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__typeType_targetAudience * soap_new__fimsdescription__typeType_targetAudience(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__typeType_targetAudience(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__typeType_targetAudience * soap_new_req__fimsdescription__typeType_targetAudience(struct soap *soap) { _fimsdescription__typeType_targetAudience *_p = soap_instantiate__fimsdescription__typeType_targetAudience(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__typeType_targetAudience * soap_new_set__fimsdescription__typeType_targetAudience(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__typeType_targetAudience *_p = soap_instantiate__fimsdescription__typeType_targetAudience(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__typeType_targetAudience::typeLabel = typeLabel; _p->_fimsdescription__typeType_targetAudience::typeDefinition = typeDefinition; _p->_fimsdescription__typeType_targetAudience::typeLink = typeLink; _p->_fimsdescription__typeType_targetAudience::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__typeType_targetAudience(struct soap *soap, _fimsdescription__typeType_targetAudience *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__typeType_targetAudience(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__typeType_objectType
#define SOAP_TYPE__fimsdescription__typeType_objectType (363)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__typeType_objectType(struct soap*, const char*, int, const _fimsdescription__typeType_objectType *, const char*);
SOAP_FMAC3 _fimsdescription__typeType_objectType * SOAP_FMAC4 soap_in__fimsdescription__typeType_objectType(struct soap*, const char*, _fimsdescription__typeType_objectType *, const char*);

#ifndef soap_write__fimsdescription__typeType_objectType
#define soap_write__fimsdescription__typeType_objectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:typeType-objectType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__typeType_objectType * SOAP_FMAC4 soap_get__fimsdescription__typeType_objectType(struct soap*, _fimsdescription__typeType_objectType *, const char*, const char*);

#ifndef soap_read__fimsdescription__typeType_objectType
#define soap_read__fimsdescription__typeType_objectType(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__typeType_objectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__typeType_objectType * SOAP_FMAC2 soap_instantiate__fimsdescription__typeType_objectType(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__typeType_objectType * soap_new__fimsdescription__typeType_objectType(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__typeType_objectType(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__typeType_objectType * soap_new_req__fimsdescription__typeType_objectType(struct soap *soap) { _fimsdescription__typeType_objectType *_p = soap_instantiate__fimsdescription__typeType_objectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__typeType_objectType * soap_new_set__fimsdescription__typeType_objectType(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__typeType_objectType *_p = soap_instantiate__fimsdescription__typeType_objectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__typeType_objectType::typeLabel = typeLabel; _p->_fimsdescription__typeType_objectType::typeDefinition = typeDefinition; _p->_fimsdescription__typeType_objectType::typeLink = typeLink; _p->_fimsdescription__typeType_objectType::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__typeType_objectType(struct soap *soap, _fimsdescription__typeType_objectType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__typeType_objectType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fimsdescription__typeType_genre
#define SOAP_TYPE__fimsdescription__typeType_genre (360)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimsdescription__typeType_genre(struct soap*, const char*, int, const _fimsdescription__typeType_genre *, const char*);
SOAP_FMAC3 _fimsdescription__typeType_genre * SOAP_FMAC4 soap_in__fimsdescription__typeType_genre(struct soap*, const char*, _fimsdescription__typeType_genre *, const char*);

#ifndef soap_write__fimsdescription__typeType_genre
#define soap_write__fimsdescription__typeType_genre(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:typeType-genre", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__typeType_genre * SOAP_FMAC4 soap_get__fimsdescription__typeType_genre(struct soap*, _fimsdescription__typeType_genre *, const char*, const char*);

#ifndef soap_read__fimsdescription__typeType_genre
#define soap_read__fimsdescription__typeType_genre(soap, data) ( soap_begin_recv(soap) || !soap_get__fimsdescription__typeType_genre(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fimsdescription__typeType_genre * SOAP_FMAC2 soap_instantiate__fimsdescription__typeType_genre(struct soap*, int, const char*, const char*, size_t*);

inline _fimsdescription__typeType_genre * soap_new__fimsdescription__typeType_genre(struct soap *soap, int n = -1) { return soap_instantiate__fimsdescription__typeType_genre(soap, n, NULL, NULL, NULL); }

inline _fimsdescription__typeType_genre * soap_new_req__fimsdescription__typeType_genre(struct soap *soap) { _fimsdescription__typeType_genre *_p = soap_instantiate__fimsdescription__typeType_genre(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fimsdescription__typeType_genre * soap_new_set__fimsdescription__typeType_genre(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { _fimsdescription__typeType_genre *_p = soap_instantiate__fimsdescription__typeType_genre(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fimsdescription__typeType_genre::typeLabel = typeLabel; _p->_fimsdescription__typeType_genre::typeDefinition = typeDefinition; _p->_fimsdescription__typeType_genre::typeLink = typeLink; _p->_fimsdescription__typeType_genre::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete__fimsdescription__typeType_genre(struct soap *soap, _fimsdescription__typeType_genre *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fimsdescription__typeType_genre(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ResourceIDType
#define SOAP_TYPE_fims__ResourceIDType (213)
#endif

#define soap_default_fims__ResourceIDType(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fims__ResourceIDType(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ResourceIDType(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_fims__ResourceIDType(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__ResourceIDType(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_fims__ResourceIDType
#define soap_write_fims__ResourceIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__ResourceIDType(soap, data),0) || soap_put_fims__ResourceIDType(soap, data, "fims:ResourceIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_fims__ResourceIDType(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_fims__ResourceIDType
#define soap_read_fims__ResourceIDType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ResourceIDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_fims__ResourceIDType soap_instantiate_std__wstring


#define soap_copy_fims__ResourceIDType soap_copy_std__wstring

#ifndef SOAP_TYPE_fimstime__TimecodeDuration
#define SOAP_TYPE_fimstime__TimecodeDuration (212)
#endif

#define soap_default_fimstime__TimecodeDuration(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fimstime__TimecodeDuration(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimstime__TimecodeDuration(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_fimstime__TimecodeDuration(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fimstime__TimecodeDuration(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_fimstime__TimecodeDuration
#define soap_write_fimstime__TimecodeDuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fimstime__TimecodeDuration(soap, data),0) || soap_put_fimstime__TimecodeDuration(soap, data, "fimstime:TimecodeDuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_fimstime__TimecodeDuration(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_fimstime__TimecodeDuration
#define soap_read_fimstime__TimecodeDuration(soap, data) ( soap_begin_recv(soap) || !soap_get_fimstime__TimecodeDuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_fimstime__TimecodeDuration soap_instantiate_std__wstring


#define soap_copy_fimstime__TimecodeDuration soap_copy_std__wstring

#ifndef SOAP_TYPE_fimstime__Timecode
#define SOAP_TYPE_fimstime__Timecode (211)
#endif

#define soap_default_fimstime__Timecode(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fimstime__Timecode(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimstime__Timecode(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_fimstime__Timecode(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fimstime__Timecode(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_fimstime__Timecode
#define soap_write_fimstime__Timecode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fimstime__Timecode(soap, data),0) || soap_put_fimstime__Timecode(soap, data, "fimstime:Timecode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_fimstime__Timecode(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_fimstime__Timecode
#define soap_read_fimstime__Timecode(soap, data) ( soap_begin_recv(soap) || !soap_get_fimstime__Timecode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_fimstime__Timecode soap_instantiate_std__wstring


#define soap_copy_fimstime__Timecode soap_copy_std__wstring

#ifndef SOAP_TYPE_fims__RevisionIDType
#define SOAP_TYPE_fims__RevisionIDType (190)
#endif

#define soap_default_fims__RevisionIDType(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fims__RevisionIDType(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__RevisionIDType(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_fims__RevisionIDType(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__RevisionIDType(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_fims__RevisionIDType
#define soap_write_fims__RevisionIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__RevisionIDType(soap, data),0) || soap_put_fims__RevisionIDType(soap, data, "fims:RevisionIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_fims__RevisionIDType(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_fims__RevisionIDType
#define soap_read_fims__RevisionIDType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__RevisionIDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_fims__RevisionIDType soap_instantiate_std__wstring


#define soap_copy_fims__RevisionIDType soap_copy_std__wstring

#ifndef SOAP_TYPE_fims__UID
#define SOAP_TYPE_fims__UID (189)
#endif

#define soap_default_fims__UID(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_fims__UID(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__UID(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_fims__UID(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_fims__UID(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_fims__UID
#define soap_write_fims__UID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_fims__UID(soap, data),0) || soap_put_fims__UID(soap, data, "fims:UID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_fims__UID(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_fims__UID
#define soap_read_fims__UID(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__UID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_fims__UID soap_instantiate_std__wstring


#define soap_copy_fims__UID soap_copy_std__wstring

#ifndef SOAP_TYPE_fimsdescription__partType
#define SOAP_TYPE_fimsdescription__partType (186)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__partType(struct soap*, const char*, int, const fimsdescription__partType *, const char*);
SOAP_FMAC3 fimsdescription__partType * SOAP_FMAC4 soap_in_fimsdescription__partType(struct soap*, const char*, fimsdescription__partType *, const char*);

#ifndef soap_write_fimsdescription__partType
#define soap_write_fimsdescription__partType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:partType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__partType * SOAP_FMAC4 soap_get_fimsdescription__partType(struct soap*, fimsdescription__partType *, const char*, const char*);

#ifndef soap_read_fimsdescription__partType
#define soap_read_fimsdescription__partType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__partType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__partType * SOAP_FMAC2 soap_instantiate_fimsdescription__partType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__partType * soap_new_fimsdescription__partType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__partType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__partType * soap_new_req_fimsdescription__partType(struct soap *soap) { fimsdescription__partType *_p = soap_instantiate_fimsdescription__partType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__partType * soap_new_set_fimsdescription__partType(struct soap *soap, fimstime__TimeType *partStartTime, fimstime__DurationType *partDuration, std::wstring *partId, std::wstring *partName, std::wstring *partDefinition, std::wstring *partNumber, std::wstring *partTotalNumber, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage, std::vector<fimsdescription__textElementType * >& title1, std::vector<fimsdescription__titleType * >& alternativeTitle1, std::vector<fimsdescription__entityType * >& creator1, std::vector<fimsdescription__subjectType * >& subject1, std::vector<fimsdescription__descriptionType * >& description1, std::vector<fimsdescription__entityType * >& publisher1, std::vector<fimsdescription__entityType * >& contributor1, std::vector<fimsdescription__dateType * >& date1, std::vector<fimsdescription__typeType * >& type1, std::vector<fimsdescription__identifierType * >& identifier1, std::vector<fimsdescription__languageType * >& language1, std::vector<fimsdescription__relationType * >& relation1, std::vector<fimsdescription__relationType * >& isVersionOf1, std::vector<fimsdescription__relationType * >& hasVersion1, std::vector<fimsdescription__relationType * >& isReplacedBy1, std::vector<fimsdescription__relationType * >& replaces1, std::vector<fimsdescription__relationType * >& isRequiredBy1, std::vector<fimsdescription__relationType * >& requires1, std::vector<fimsdescription__relationType * >& isPartOf1, std::vector<fimsdescription__relationType * >& hasPart1, std::vector<fimsdescription__relationType * >& isReferencedBy1, std::vector<fimsdescription__relationType * >& references1, std::vector<fimsdescription__relationType * >& isFormatOf1, std::vector<fimsdescription__relationType * >& hasFormat1, std::vector<fimsdescription__relationType * >& isEpisodeOf1, std::vector<fimsdescription__relationType * >& isMemberOf1, std::vector<fimsdescription__relationType * >& hasMembers1, std::vector<fimsdescription__coverageType * >& coverage1, std::vector<fimsdescription__rightsType * >& rights1, std::wstring *version1, std::vector<fimsdescription__partType * >& part1, std::wstring *xml__lang1) { fimsdescription__partType *_p = soap_instantiate_fimsdescription__partType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__partType::partStartTime = partStartTime; _p->fimsdescription__partType::partDuration = partDuration; _p->fimsdescription__partType::partId = partId; _p->fimsdescription__partType::partName = partName; _p->fimsdescription__partType::partDefinition = partDefinition; _p->fimsdescription__partType::partNumber = partNumber; _p->fimsdescription__partType::partTotalNumber = partTotalNumber; _p->fimsdescription__partType::typeLabel = typeLabel; _p->fimsdescription__partType::typeDefinition = typeDefinition; _p->fimsdescription__partType::typeLink = typeLink; _p->fimsdescription__partType::typeLanguage = typeLanguage; _p->fimsdescription__bmContentDescriptionType::title = title1; _p->fimsdescription__bmContentDescriptionType::alternativeTitle = alternativeTitle1; _p->fimsdescription__bmContentDescriptionType::creator = creator1; _p->fimsdescription__bmContentDescriptionType::subject = subject1; _p->fimsdescription__bmContentDescriptionType::description = description1; _p->fimsdescription__bmContentDescriptionType::publisher = publisher1; _p->fimsdescription__bmContentDescriptionType::contributor = contributor1; _p->fimsdescription__bmContentDescriptionType::date = date1; _p->fimsdescription__bmContentDescriptionType::type = type1; _p->fimsdescription__bmContentDescriptionType::identifier = identifier1; _p->fimsdescription__bmContentDescriptionType::language = language1; _p->fimsdescription__bmContentDescriptionType::relation = relation1; _p->fimsdescription__bmContentDescriptionType::isVersionOf = isVersionOf1; _p->fimsdescription__bmContentDescriptionType::hasVersion = hasVersion1; _p->fimsdescription__bmContentDescriptionType::isReplacedBy = isReplacedBy1; _p->fimsdescription__bmContentDescriptionType::replaces = replaces1; _p->fimsdescription__bmContentDescriptionType::isRequiredBy = isRequiredBy1; _p->fimsdescription__bmContentDescriptionType::requires = requires1; _p->fimsdescription__bmContentDescriptionType::isPartOf = isPartOf1; _p->fimsdescription__bmContentDescriptionType::hasPart = hasPart1; _p->fimsdescription__bmContentDescriptionType::isReferencedBy = isReferencedBy1; _p->fimsdescription__bmContentDescriptionType::references = references1; _p->fimsdescription__bmContentDescriptionType::isFormatOf = isFormatOf1; _p->fimsdescription__bmContentDescriptionType::hasFormat = hasFormat1; _p->fimsdescription__bmContentDescriptionType::isEpisodeOf = isEpisodeOf1; _p->fimsdescription__bmContentDescriptionType::isMemberOf = isMemberOf1; _p->fimsdescription__bmContentDescriptionType::hasMembers = hasMembers1; _p->fimsdescription__bmContentDescriptionType::coverage = coverage1; _p->fimsdescription__bmContentDescriptionType::rights = rights1; _p->fimsdescription__bmContentDescriptionType::version = version1; _p->fimsdescription__bmContentDescriptionType::part = part1; _p->fimsdescription__bmContentDescriptionType::xml__lang = xml__lang1; } return _p; }

inline void soap_delete_fimsdescription__partType(struct soap *soap, fimsdescription__partType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__partType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__relationType
#define SOAP_TYPE_fimsdescription__relationType (185)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__relationType(struct soap*, const char*, int, const fimsdescription__relationType *, const char*);
SOAP_FMAC3 fimsdescription__relationType * SOAP_FMAC4 soap_in_fimsdescription__relationType(struct soap*, const char*, fimsdescription__relationType *, const char*);

#ifndef soap_write_fimsdescription__relationType
#define soap_write_fimsdescription__relationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:relationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__relationType * SOAP_FMAC4 soap_get_fimsdescription__relationType(struct soap*, fimsdescription__relationType *, const char*, const char*);

#ifndef soap_read_fimsdescription__relationType
#define soap_read_fimsdescription__relationType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__relationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__relationType * SOAP_FMAC2 soap_instantiate_fimsdescription__relationType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__relationType * soap_new_fimsdescription__relationType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__relationType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__relationType * soap_new_req_fimsdescription__relationType(struct soap *soap, fimsdescription__identifierType *relationIdentifier, std::wstring& relationLink) { fimsdescription__relationType *_p = soap_instantiate_fimsdescription__relationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__relationType::relationIdentifier = relationIdentifier; _p->fimsdescription__relationType::relationLink = relationLink; } return _p; }

inline fimsdescription__relationType * soap_new_set_fimsdescription__relationType(struct soap *soap, fimsdescription__identifierType *relationIdentifier, std::wstring& relationLink, std::wstring *runningOrderNumber, std::wstring *totalNumberOfGroupMembers, bool *orderedGroupFlag, std::wstring *note, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { fimsdescription__relationType *_p = soap_instantiate_fimsdescription__relationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__relationType::relationIdentifier = relationIdentifier; _p->fimsdescription__relationType::relationLink = relationLink; _p->fimsdescription__relationType::runningOrderNumber = runningOrderNumber; _p->fimsdescription__relationType::totalNumberOfGroupMembers = totalNumberOfGroupMembers; _p->fimsdescription__relationType::orderedGroupFlag = orderedGroupFlag; _p->fimsdescription__relationType::note = note; _p->fimsdescription__relationType::typeLabel = typeLabel; _p->fimsdescription__relationType::typeDefinition = typeDefinition; _p->fimsdescription__relationType::typeLink = typeLink; _p->fimsdescription__relationType::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete_fimsdescription__relationType(struct soap *soap, fimsdescription__relationType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__relationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__languageType
#define SOAP_TYPE_fimsdescription__languageType (184)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__languageType(struct soap*, const char*, int, const fimsdescription__languageType *, const char*);
SOAP_FMAC3 fimsdescription__languageType * SOAP_FMAC4 soap_in_fimsdescription__languageType(struct soap*, const char*, fimsdescription__languageType *, const char*);

#ifndef soap_write_fimsdescription__languageType
#define soap_write_fimsdescription__languageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:languageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__languageType * SOAP_FMAC4 soap_get_fimsdescription__languageType(struct soap*, fimsdescription__languageType *, const char*, const char*);

#ifndef soap_read_fimsdescription__languageType
#define soap_read_fimsdescription__languageType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__languageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__languageType * SOAP_FMAC2 soap_instantiate_fimsdescription__languageType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__languageType * soap_new_fimsdescription__languageType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__languageType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__languageType * soap_new_req_fimsdescription__languageType(struct soap *soap) { fimsdescription__languageType *_p = soap_instantiate_fimsdescription__languageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__languageType * soap_new_set_fimsdescription__languageType(struct soap *soap, std::wstring *xml__lang, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { fimsdescription__languageType *_p = soap_instantiate_fimsdescription__languageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__languageType::xml__lang = xml__lang; _p->fimsdescription__languageType::typeLabel = typeLabel; _p->fimsdescription__languageType::typeDefinition = typeDefinition; _p->fimsdescription__languageType::typeLink = typeLink; _p->fimsdescription__languageType::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete_fimsdescription__languageType(struct soap *soap, fimsdescription__languageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__languageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__addressType
#define SOAP_TYPE_fimsdescription__addressType (183)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__addressType(struct soap*, const char*, int, const fimsdescription__addressType *, const char*);
SOAP_FMAC3 fimsdescription__addressType * SOAP_FMAC4 soap_in_fimsdescription__addressType(struct soap*, const char*, fimsdescription__addressType *, const char*);

#ifndef soap_write_fimsdescription__addressType
#define soap_write_fimsdescription__addressType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:addressType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__addressType * SOAP_FMAC4 soap_get_fimsdescription__addressType(struct soap*, fimsdescription__addressType *, const char*, const char*);

#ifndef soap_read_fimsdescription__addressType
#define soap_read_fimsdescription__addressType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__addressType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__addressType * SOAP_FMAC2 soap_instantiate_fimsdescription__addressType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__addressType * soap_new_fimsdescription__addressType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__addressType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__addressType * soap_new_req_fimsdescription__addressType(struct soap *soap) { fimsdescription__addressType *_p = soap_instantiate_fimsdescription__addressType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__addressType * soap_new_set_fimsdescription__addressType(struct soap *soap, std::vector<fimsdescription__textElementType * >& addressLine, fimsdescription__textElementType *addressTownCity, fimsdescription__textElementType *addressCountyState, std::wstring *addressDeliveryCode, _fimsdescription__addressType_country *country) { fimsdescription__addressType *_p = soap_instantiate_fimsdescription__addressType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__addressType::addressLine = addressLine; _p->fimsdescription__addressType::addressTownCity = addressTownCity; _p->fimsdescription__addressType::addressCountyState = addressCountyState; _p->fimsdescription__addressType::addressDeliveryCode = addressDeliveryCode; _p->fimsdescription__addressType::country = country; } return _p; }

inline void soap_delete_fimsdescription__addressType(struct soap *soap, fimsdescription__addressType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__addressType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__detailsType
#define SOAP_TYPE_fimsdescription__detailsType (182)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__detailsType(struct soap*, const char*, int, const fimsdescription__detailsType *, const char*);
SOAP_FMAC3 fimsdescription__detailsType * SOAP_FMAC4 soap_in_fimsdescription__detailsType(struct soap*, const char*, fimsdescription__detailsType *, const char*);

#ifndef soap_write_fimsdescription__detailsType
#define soap_write_fimsdescription__detailsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:detailsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__detailsType * SOAP_FMAC4 soap_get_fimsdescription__detailsType(struct soap*, fimsdescription__detailsType *, const char*, const char*);

#ifndef soap_read_fimsdescription__detailsType
#define soap_read_fimsdescription__detailsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__detailsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__detailsType * SOAP_FMAC2 soap_instantiate_fimsdescription__detailsType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__detailsType * soap_new_fimsdescription__detailsType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__detailsType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__detailsType * soap_new_req_fimsdescription__detailsType(struct soap *soap) { fimsdescription__detailsType *_p = soap_instantiate_fimsdescription__detailsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__detailsType * soap_new_set_fimsdescription__detailsType(struct soap *soap, std::vector<std::wstring >& emailAddress, std::wstring *webAddress, fimsdescription__addressType *address, std::wstring *telephoneNumber, std::wstring *mobileTelephoneNumber, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { fimsdescription__detailsType *_p = soap_instantiate_fimsdescription__detailsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__detailsType::emailAddress = emailAddress; _p->fimsdescription__detailsType::webAddress = webAddress; _p->fimsdescription__detailsType::address = address; _p->fimsdescription__detailsType::telephoneNumber = telephoneNumber; _p->fimsdescription__detailsType::mobileTelephoneNumber = mobileTelephoneNumber; _p->fimsdescription__detailsType::typeLabel = typeLabel; _p->fimsdescription__detailsType::typeDefinition = typeDefinition; _p->fimsdescription__detailsType::typeLink = typeLink; _p->fimsdescription__detailsType::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete_fimsdescription__detailsType(struct soap *soap, fimsdescription__detailsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__detailsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__organisationDetailsType
#define SOAP_TYPE_fimsdescription__organisationDetailsType (181)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__organisationDetailsType(struct soap*, const char*, int, const fimsdescription__organisationDetailsType *, const char*);
SOAP_FMAC3 fimsdescription__organisationDetailsType * SOAP_FMAC4 soap_in_fimsdescription__organisationDetailsType(struct soap*, const char*, fimsdescription__organisationDetailsType *, const char*);

#ifndef soap_write_fimsdescription__organisationDetailsType
#define soap_write_fimsdescription__organisationDetailsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:organisationDetailsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__organisationDetailsType * SOAP_FMAC4 soap_get_fimsdescription__organisationDetailsType(struct soap*, fimsdescription__organisationDetailsType *, const char*, const char*);

#ifndef soap_read_fimsdescription__organisationDetailsType
#define soap_read_fimsdescription__organisationDetailsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__organisationDetailsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__organisationDetailsType * SOAP_FMAC2 soap_instantiate_fimsdescription__organisationDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__organisationDetailsType * soap_new_fimsdescription__organisationDetailsType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__organisationDetailsType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__organisationDetailsType * soap_new_req_fimsdescription__organisationDetailsType(struct soap *soap) { fimsdescription__organisationDetailsType *_p = soap_instantiate_fimsdescription__organisationDetailsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__organisationDetailsType * soap_new_set_fimsdescription__organisationDetailsType(struct soap *soap, std::vector<fimsdescription__textElementType * >& organisationName, std::vector<std::wstring >& organisationCode, _fimsdescription__organisationDetailsType_organisationDepartment *organisationDepartment, std::vector<fimsdescription__detailsType * >& details, std::vector<fimsdescription__entityType * >& contacts, std::wstring *organisationId, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { fimsdescription__organisationDetailsType *_p = soap_instantiate_fimsdescription__organisationDetailsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__organisationDetailsType::organisationName = organisationName; _p->fimsdescription__organisationDetailsType::organisationCode = organisationCode; _p->fimsdescription__organisationDetailsType::organisationDepartment = organisationDepartment; _p->fimsdescription__organisationDetailsType::details = details; _p->fimsdescription__organisationDetailsType::contacts = contacts; _p->fimsdescription__organisationDetailsType::organisationId = organisationId; _p->fimsdescription__organisationDetailsType::typeLabel = typeLabel; _p->fimsdescription__organisationDetailsType::typeDefinition = typeDefinition; _p->fimsdescription__organisationDetailsType::typeLink = typeLink; _p->fimsdescription__organisationDetailsType::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete_fimsdescription__organisationDetailsType(struct soap *soap, fimsdescription__organisationDetailsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__organisationDetailsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__contactDetailsType
#define SOAP_TYPE_fimsdescription__contactDetailsType (180)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__contactDetailsType(struct soap*, const char*, int, const fimsdescription__contactDetailsType *, const char*);
SOAP_FMAC3 fimsdescription__contactDetailsType * SOAP_FMAC4 soap_in_fimsdescription__contactDetailsType(struct soap*, const char*, fimsdescription__contactDetailsType *, const char*);

#ifndef soap_write_fimsdescription__contactDetailsType
#define soap_write_fimsdescription__contactDetailsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:contactDetailsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__contactDetailsType * SOAP_FMAC4 soap_get_fimsdescription__contactDetailsType(struct soap*, fimsdescription__contactDetailsType *, const char*, const char*);

#ifndef soap_read_fimsdescription__contactDetailsType
#define soap_read_fimsdescription__contactDetailsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__contactDetailsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__contactDetailsType * SOAP_FMAC2 soap_instantiate_fimsdescription__contactDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__contactDetailsType * soap_new_fimsdescription__contactDetailsType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__contactDetailsType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__contactDetailsType * soap_new_req_fimsdescription__contactDetailsType(struct soap *soap) { fimsdescription__contactDetailsType *_p = soap_instantiate_fimsdescription__contactDetailsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__contactDetailsType * soap_new_set_fimsdescription__contactDetailsType(struct soap *soap, std::wstring *name, std::wstring *givenName, std::wstring *familyName, std::vector<std::wstring >& otherGivenName, std::wstring *suffix, std::wstring *salutation, std::vector<fimsdescription__textElementType * >& username, fimsdescription__textElementType *occupation, std::vector<fimsdescription__detailsType * >& details, std::vector<fimsdescription__textElementType * >& stageName, std::vector<fimsdescription__entityType * >& relatedContacts, std::wstring *contactId, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { fimsdescription__contactDetailsType *_p = soap_instantiate_fimsdescription__contactDetailsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__contactDetailsType::name = name; _p->fimsdescription__contactDetailsType::givenName = givenName; _p->fimsdescription__contactDetailsType::familyName = familyName; _p->fimsdescription__contactDetailsType::otherGivenName = otherGivenName; _p->fimsdescription__contactDetailsType::suffix = suffix; _p->fimsdescription__contactDetailsType::salutation = salutation; _p->fimsdescription__contactDetailsType::username = username; _p->fimsdescription__contactDetailsType::occupation = occupation; _p->fimsdescription__contactDetailsType::details = details; _p->fimsdescription__contactDetailsType::stageName = stageName; _p->fimsdescription__contactDetailsType::relatedContacts = relatedContacts; _p->fimsdescription__contactDetailsType::contactId = contactId; _p->fimsdescription__contactDetailsType::typeLabel = typeLabel; _p->fimsdescription__contactDetailsType::typeDefinition = typeDefinition; _p->fimsdescription__contactDetailsType::typeLink = typeLink; _p->fimsdescription__contactDetailsType::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete_fimsdescription__contactDetailsType(struct soap *soap, fimsdescription__contactDetailsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__contactDetailsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__entityType
#define SOAP_TYPE_fimsdescription__entityType (179)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__entityType(struct soap*, const char*, int, const fimsdescription__entityType *, const char*);
SOAP_FMAC3 fimsdescription__entityType * SOAP_FMAC4 soap_in_fimsdescription__entityType(struct soap*, const char*, fimsdescription__entityType *, const char*);

#ifndef soap_write_fimsdescription__entityType
#define soap_write_fimsdescription__entityType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:entityType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__entityType * SOAP_FMAC4 soap_get_fimsdescription__entityType(struct soap*, fimsdescription__entityType *, const char*, const char*);

#ifndef soap_read_fimsdescription__entityType
#define soap_read_fimsdescription__entityType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__entityType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__entityType * SOAP_FMAC2 soap_instantiate_fimsdescription__entityType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__entityType * soap_new_fimsdescription__entityType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__entityType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__entityType * soap_new_req_fimsdescription__entityType(struct soap *soap) { fimsdescription__entityType *_p = soap_instantiate_fimsdescription__entityType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__entityType * soap_new_set_fimsdescription__entityType(struct soap *soap, std::vector<fimsdescription__contactDetailsType * >& contactDetails, std::vector<fimsdescription__organisationDetailsType * >& organisationDetails, std::vector<_fimsdescription__entityType_role >*role, std::wstring *entityId) { fimsdescription__entityType *_p = soap_instantiate_fimsdescription__entityType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__entityType::contactDetails = contactDetails; _p->fimsdescription__entityType::organisationDetails = organisationDetails; _p->fimsdescription__entityType::role = role; _p->fimsdescription__entityType::entityId = entityId; } return _p; }

inline void soap_delete_fimsdescription__entityType(struct soap *soap, fimsdescription__entityType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__entityType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__dateType
#define SOAP_TYPE_fimsdescription__dateType (178)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__dateType(struct soap*, const char*, int, const fimsdescription__dateType *, const char*);
SOAP_FMAC3 fimsdescription__dateType * SOAP_FMAC4 soap_in_fimsdescription__dateType(struct soap*, const char*, fimsdescription__dateType *, const char*);

#ifndef soap_write_fimsdescription__dateType
#define soap_write_fimsdescription__dateType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:dateType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__dateType * SOAP_FMAC4 soap_get_fimsdescription__dateType(struct soap*, fimsdescription__dateType *, const char*, const char*);

#ifndef soap_read_fimsdescription__dateType
#define soap_read_fimsdescription__dateType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__dateType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__dateType * SOAP_FMAC2 soap_instantiate_fimsdescription__dateType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__dateType * soap_new_fimsdescription__dateType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__dateType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__dateType * soap_new_req_fimsdescription__dateType(struct soap *soap) { fimsdescription__dateType *_p = soap_instantiate_fimsdescription__dateType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__dateType * soap_new_set_fimsdescription__dateType(struct soap *soap, _fimsdescription__dateType_created *created, _fimsdescription__dateType_modified *modified, _fimsdescription__dateType_issued *issued, _fimsdescription__dateType_alternative *alternative) { fimsdescription__dateType *_p = soap_instantiate_fimsdescription__dateType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__dateType::created = created; _p->fimsdescription__dateType::modified = modified; _p->fimsdescription__dateType::issued = issued; _p->fimsdescription__dateType::alternative = alternative; } return _p; }

inline void soap_delete_fimsdescription__dateType(struct soap *soap, fimsdescription__dateType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__dateType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__textElementType
#define SOAP_TYPE_fimsdescription__textElementType (177)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__textElementType(struct soap*, const char*, int, const fimsdescription__textElementType *, const char*);
SOAP_FMAC3 fimsdescription__textElementType * SOAP_FMAC4 soap_in_fimsdescription__textElementType(struct soap*, const char*, fimsdescription__textElementType *, const char*);

#ifndef soap_write_fimsdescription__textElementType
#define soap_write_fimsdescription__textElementType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:textElementType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__textElementType * SOAP_FMAC4 soap_get_fimsdescription__textElementType(struct soap*, fimsdescription__textElementType *, const char*, const char*);

#ifndef soap_read_fimsdescription__textElementType
#define soap_read_fimsdescription__textElementType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__textElementType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__textElementType * SOAP_FMAC2 soap_instantiate_fimsdescription__textElementType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__textElementType * soap_new_fimsdescription__textElementType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__textElementType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__textElementType * soap_new_req_fimsdescription__textElementType(struct soap *soap, std::wstring& __item) { fimsdescription__textElementType *_p = soap_instantiate_fimsdescription__textElementType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__textElementType::__item = __item; } return _p; }

inline fimsdescription__textElementType * soap_new_set_fimsdescription__textElementType(struct soap *soap, std::wstring& __item, std::wstring *xml__lang) { fimsdescription__textElementType *_p = soap_instantiate_fimsdescription__textElementType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__textElementType::__item = __item; _p->fimsdescription__textElementType::xml__lang = xml__lang; } return _p; }

inline void soap_delete_fimsdescription__textElementType(struct soap *soap, fimsdescription__textElementType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__textElementType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__rightsType
#define SOAP_TYPE_fimsdescription__rightsType (176)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__rightsType(struct soap*, const char*, int, const fimsdescription__rightsType *, const char*);
SOAP_FMAC3 fimsdescription__rightsType * SOAP_FMAC4 soap_in_fimsdescription__rightsType(struct soap*, const char*, fimsdescription__rightsType *, const char*);

#ifndef soap_write_fimsdescription__rightsType
#define soap_write_fimsdescription__rightsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:rightsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__rightsType * SOAP_FMAC4 soap_get_fimsdescription__rightsType(struct soap*, fimsdescription__rightsType *, const char*, const char*);

#ifndef soap_read_fimsdescription__rightsType
#define soap_read_fimsdescription__rightsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__rightsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__rightsType * SOAP_FMAC2 soap_instantiate_fimsdescription__rightsType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__rightsType * soap_new_fimsdescription__rightsType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__rightsType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__rightsType * soap_new_req_fimsdescription__rightsType(struct soap *soap) { fimsdescription__rightsType *_p = soap_instantiate_fimsdescription__rightsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__rightsType * soap_new_set_fimsdescription__rightsType(struct soap *soap, std::vector<fimsdescription__textElementType * >& rightsExpression, std::wstring *rightsLink, fimsdescription__entityType *rightsHolder, fimsdescription__textElementType *exploitationIssues, fimsdescription__coverageType *coverage, bool *rightsClearanceFlag, std::vector<fimsdescription__textElementType * >& disclaimer, std::vector<fimsdescription__identifierType * >& rightsId, std::vector<fimsdescription__contactDetailsType * >& contactDetails, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage) { fimsdescription__rightsType *_p = soap_instantiate_fimsdescription__rightsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__rightsType::rightsExpression = rightsExpression; _p->fimsdescription__rightsType::rightsLink = rightsLink; _p->fimsdescription__rightsType::rightsHolder = rightsHolder; _p->fimsdescription__rightsType::exploitationIssues = exploitationIssues; _p->fimsdescription__rightsType::coverage = coverage; _p->fimsdescription__rightsType::rightsClearanceFlag = rightsClearanceFlag; _p->fimsdescription__rightsType::disclaimer = disclaimer; _p->fimsdescription__rightsType::rightsId = rightsId; _p->fimsdescription__rightsType::contactDetails = contactDetails; _p->fimsdescription__rightsType::typeLabel = typeLabel; _p->fimsdescription__rightsType::typeDefinition = typeDefinition; _p->fimsdescription__rightsType::typeLink = typeLink; _p->fimsdescription__rightsType::typeLanguage = typeLanguage; } return _p; }

inline void soap_delete_fimsdescription__rightsType(struct soap *soap, fimsdescription__rightsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__rightsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__coverageType
#define SOAP_TYPE_fimsdescription__coverageType (175)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__coverageType(struct soap*, const char*, int, const fimsdescription__coverageType *, const char*);
SOAP_FMAC3 fimsdescription__coverageType * SOAP_FMAC4 soap_in_fimsdescription__coverageType(struct soap*, const char*, fimsdescription__coverageType *, const char*);

#ifndef soap_write_fimsdescription__coverageType
#define soap_write_fimsdescription__coverageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:coverageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__coverageType * SOAP_FMAC4 soap_get_fimsdescription__coverageType(struct soap*, fimsdescription__coverageType *, const char*, const char*);

#ifndef soap_read_fimsdescription__coverageType
#define soap_read_fimsdescription__coverageType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__coverageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__coverageType * SOAP_FMAC2 soap_instantiate_fimsdescription__coverageType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__coverageType * soap_new_fimsdescription__coverageType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__coverageType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__coverageType * soap_new_req_fimsdescription__coverageType(struct soap *soap) { fimsdescription__coverageType *_p = soap_instantiate_fimsdescription__coverageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__coverageType * soap_new_set_fimsdescription__coverageType(struct soap *soap, _fimsdescription__coverageType_temporal *temporal, _fimsdescription__coverageType_spatial *spatial) { fimsdescription__coverageType *_p = soap_instantiate_fimsdescription__coverageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__coverageType::temporal = temporal; _p->fimsdescription__coverageType::spatial = spatial; } return _p; }

inline void soap_delete_fimsdescription__coverageType(struct soap *soap, fimsdescription__coverageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__coverageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__descriptionType
#define SOAP_TYPE_fimsdescription__descriptionType (174)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__descriptionType(struct soap*, const char*, int, const fimsdescription__descriptionType *, const char*);
SOAP_FMAC3 fimsdescription__descriptionType * SOAP_FMAC4 soap_in_fimsdescription__descriptionType(struct soap*, const char*, fimsdescription__descriptionType *, const char*);

#ifndef soap_write_fimsdescription__descriptionType
#define soap_write_fimsdescription__descriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:descriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__descriptionType * SOAP_FMAC4 soap_get_fimsdescription__descriptionType(struct soap*, fimsdescription__descriptionType *, const char*, const char*);

#ifndef soap_read_fimsdescription__descriptionType
#define soap_read_fimsdescription__descriptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__descriptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__descriptionType * SOAP_FMAC2 soap_instantiate_fimsdescription__descriptionType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__descriptionType * soap_new_fimsdescription__descriptionType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__descriptionType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__descriptionType * soap_new_req_fimsdescription__descriptionType(struct soap *soap, std::wstring& __item1) { fimsdescription__descriptionType *_p = soap_instantiate_fimsdescription__descriptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__textElementType::__item = __item1; } return _p; }

inline fimsdescription__descriptionType * soap_new_set_fimsdescription__descriptionType(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage, std::wstring& __item1, std::wstring *xml__lang1) { fimsdescription__descriptionType *_p = soap_instantiate_fimsdescription__descriptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__descriptionType::typeLabel = typeLabel; _p->fimsdescription__descriptionType::typeDefinition = typeDefinition; _p->fimsdescription__descriptionType::typeLink = typeLink; _p->fimsdescription__descriptionType::typeLanguage = typeLanguage; _p->fimsdescription__textElementType::__item = __item1; _p->fimsdescription__textElementType::xml__lang = xml__lang1; } return _p; }

inline void soap_delete_fimsdescription__descriptionType(struct soap *soap, fimsdescription__descriptionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__descriptionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__typeType
#define SOAP_TYPE_fimsdescription__typeType (173)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__typeType(struct soap*, const char*, int, const fimsdescription__typeType *, const char*);
SOAP_FMAC3 fimsdescription__typeType * SOAP_FMAC4 soap_in_fimsdescription__typeType(struct soap*, const char*, fimsdescription__typeType *, const char*);

#ifndef soap_write_fimsdescription__typeType
#define soap_write_fimsdescription__typeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:typeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__typeType * SOAP_FMAC4 soap_get_fimsdescription__typeType(struct soap*, fimsdescription__typeType *, const char*, const char*);

#ifndef soap_read_fimsdescription__typeType
#define soap_read_fimsdescription__typeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__typeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__typeType * SOAP_FMAC2 soap_instantiate_fimsdescription__typeType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__typeType * soap_new_fimsdescription__typeType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__typeType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__typeType * soap_new_req_fimsdescription__typeType(struct soap *soap) { fimsdescription__typeType *_p = soap_instantiate_fimsdescription__typeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__typeType * soap_new_set_fimsdescription__typeType(struct soap *soap, std::vector<_fimsdescription__typeType_genre >*genre, std::vector<_fimsdescription__typeType_objectType >*objectType, std::vector<_fimsdescription__typeType_targetAudience >*targetAudience) { fimsdescription__typeType *_p = soap_instantiate_fimsdescription__typeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__typeType::genre = genre; _p->fimsdescription__typeType::objectType = objectType; _p->fimsdescription__typeType::targetAudience = targetAudience; } return _p; }

inline void soap_delete_fimsdescription__typeType(struct soap *soap, fimsdescription__typeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__typeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__subjectType
#define SOAP_TYPE_fimsdescription__subjectType (172)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__subjectType(struct soap*, const char*, int, const fimsdescription__subjectType *, const char*);
SOAP_FMAC3 fimsdescription__subjectType * SOAP_FMAC4 soap_in_fimsdescription__subjectType(struct soap*, const char*, fimsdescription__subjectType *, const char*);

#ifndef soap_write_fimsdescription__subjectType
#define soap_write_fimsdescription__subjectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:subjectType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__subjectType * SOAP_FMAC4 soap_get_fimsdescription__subjectType(struct soap*, fimsdescription__subjectType *, const char*, const char*);

#ifndef soap_read_fimsdescription__subjectType
#define soap_read_fimsdescription__subjectType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__subjectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__subjectType * SOAP_FMAC2 soap_instantiate_fimsdescription__subjectType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__subjectType * soap_new_fimsdescription__subjectType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__subjectType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__subjectType * soap_new_req_fimsdescription__subjectType(struct soap *soap, std::wstring& __item1) { fimsdescription__subjectType *_p = soap_instantiate_fimsdescription__subjectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__textElementType::__item = __item1; } return _p; }

inline fimsdescription__subjectType * soap_new_set_fimsdescription__subjectType(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage, std::wstring& __item1, std::wstring *xml__lang1) { fimsdescription__subjectType *_p = soap_instantiate_fimsdescription__subjectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__subjectType::typeLabel = typeLabel; _p->fimsdescription__subjectType::typeDefinition = typeDefinition; _p->fimsdescription__subjectType::typeLink = typeLink; _p->fimsdescription__subjectType::typeLanguage = typeLanguage; _p->fimsdescription__textElementType::__item = __item1; _p->fimsdescription__textElementType::xml__lang = xml__lang1; } return _p; }

inline void soap_delete_fimsdescription__subjectType(struct soap *soap, fimsdescription__subjectType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__subjectType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__identifierType
#define SOAP_TYPE_fimsdescription__identifierType (171)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__identifierType(struct soap*, const char*, int, const fimsdescription__identifierType *, const char*);
SOAP_FMAC3 fimsdescription__identifierType * SOAP_FMAC4 soap_in_fimsdescription__identifierType(struct soap*, const char*, fimsdescription__identifierType *, const char*);

#ifndef soap_write_fimsdescription__identifierType
#define soap_write_fimsdescription__identifierType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:identifierType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__identifierType * SOAP_FMAC4 soap_get_fimsdescription__identifierType(struct soap*, fimsdescription__identifierType *, const char*, const char*);

#ifndef soap_read_fimsdescription__identifierType
#define soap_read_fimsdescription__identifierType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__identifierType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__identifierType * SOAP_FMAC2 soap_instantiate_fimsdescription__identifierType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__identifierType * soap_new_fimsdescription__identifierType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__identifierType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__identifierType * soap_new_req_fimsdescription__identifierType(struct soap *soap, std::wstring& __item) { fimsdescription__identifierType *_p = soap_instantiate_fimsdescription__identifierType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__identifierType::__item = __item; } return _p; }

inline fimsdescription__identifierType * soap_new_set_fimsdescription__identifierType(struct soap *soap, std::wstring& __item, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage, std::wstring *formatLabel, std::wstring *formatDefinition, std::wstring *formatLink, std::wstring *formatLanguage) { fimsdescription__identifierType *_p = soap_instantiate_fimsdescription__identifierType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__identifierType::__item = __item; _p->fimsdescription__identifierType::typeLabel = typeLabel; _p->fimsdescription__identifierType::typeDefinition = typeDefinition; _p->fimsdescription__identifierType::typeLink = typeLink; _p->fimsdescription__identifierType::typeLanguage = typeLanguage; _p->fimsdescription__identifierType::formatLabel = formatLabel; _p->fimsdescription__identifierType::formatDefinition = formatDefinition; _p->fimsdescription__identifierType::formatLink = formatLink; _p->fimsdescription__identifierType::formatLanguage = formatLanguage; } return _p; }

inline void soap_delete_fimsdescription__identifierType(struct soap *soap, fimsdescription__identifierType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__identifierType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__titleType
#define SOAP_TYPE_fimsdescription__titleType (170)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__titleType(struct soap*, const char*, int, const fimsdescription__titleType *, const char*);
SOAP_FMAC3 fimsdescription__titleType * SOAP_FMAC4 soap_in_fimsdescription__titleType(struct soap*, const char*, fimsdescription__titleType *, const char*);

#ifndef soap_write_fimsdescription__titleType
#define soap_write_fimsdescription__titleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:titleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__titleType * SOAP_FMAC4 soap_get_fimsdescription__titleType(struct soap*, fimsdescription__titleType *, const char*, const char*);

#ifndef soap_read_fimsdescription__titleType
#define soap_read_fimsdescription__titleType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__titleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__titleType * SOAP_FMAC2 soap_instantiate_fimsdescription__titleType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__titleType * soap_new_fimsdescription__titleType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__titleType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__titleType * soap_new_req_fimsdescription__titleType(struct soap *soap, std::wstring& __item1) { fimsdescription__titleType *_p = soap_instantiate_fimsdescription__titleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__textElementType::__item = __item1; } return _p; }

inline fimsdescription__titleType * soap_new_set_fimsdescription__titleType(struct soap *soap, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *typeLanguage, std::wstring& __item1, std::wstring *xml__lang1) { fimsdescription__titleType *_p = soap_instantiate_fimsdescription__titleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__titleType::typeLabel = typeLabel; _p->fimsdescription__titleType::typeDefinition = typeDefinition; _p->fimsdescription__titleType::typeLink = typeLink; _p->fimsdescription__titleType::typeLanguage = typeLanguage; _p->fimsdescription__textElementType::__item = __item1; _p->fimsdescription__textElementType::xml__lang = xml__lang1; } return _p; }

inline void soap_delete_fimsdescription__titleType(struct soap *soap, fimsdescription__titleType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__titleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimsdescription__bmContentDescriptionType
#define SOAP_TYPE_fimsdescription__bmContentDescriptionType (169)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimsdescription__bmContentDescriptionType(struct soap*, const char*, int, const fimsdescription__bmContentDescriptionType *, const char*);
SOAP_FMAC3 fimsdescription__bmContentDescriptionType * SOAP_FMAC4 soap_in_fimsdescription__bmContentDescriptionType(struct soap*, const char*, fimsdescription__bmContentDescriptionType *, const char*);

#ifndef soap_write_fimsdescription__bmContentDescriptionType
#define soap_write_fimsdescription__bmContentDescriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimsdescription:bmContentDescriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__bmContentDescriptionType * SOAP_FMAC4 soap_get_fimsdescription__bmContentDescriptionType(struct soap*, fimsdescription__bmContentDescriptionType *, const char*, const char*);

#ifndef soap_read_fimsdescription__bmContentDescriptionType
#define soap_read_fimsdescription__bmContentDescriptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimsdescription__bmContentDescriptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimsdescription__bmContentDescriptionType * SOAP_FMAC2 soap_instantiate_fimsdescription__bmContentDescriptionType(struct soap*, int, const char*, const char*, size_t*);

inline fimsdescription__bmContentDescriptionType * soap_new_fimsdescription__bmContentDescriptionType(struct soap *soap, int n = -1) { return soap_instantiate_fimsdescription__bmContentDescriptionType(soap, n, NULL, NULL, NULL); }

inline fimsdescription__bmContentDescriptionType * soap_new_req_fimsdescription__bmContentDescriptionType(struct soap *soap) { fimsdescription__bmContentDescriptionType *_p = soap_instantiate_fimsdescription__bmContentDescriptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fimsdescription__bmContentDescriptionType * soap_new_set_fimsdescription__bmContentDescriptionType(struct soap *soap, std::vector<fimsdescription__textElementType * >& title, std::vector<fimsdescription__titleType * >& alternativeTitle, std::vector<fimsdescription__entityType * >& creator, std::vector<fimsdescription__subjectType * >& subject, std::vector<fimsdescription__descriptionType * >& description, std::vector<fimsdescription__entityType * >& publisher, std::vector<fimsdescription__entityType * >& contributor, std::vector<fimsdescription__dateType * >& date, std::vector<fimsdescription__typeType * >& type, std::vector<fimsdescription__identifierType * >& identifier, std::vector<fimsdescription__languageType * >& language, std::vector<fimsdescription__relationType * >& relation, std::vector<fimsdescription__relationType * >& isVersionOf, std::vector<fimsdescription__relationType * >& hasVersion, std::vector<fimsdescription__relationType * >& isReplacedBy, std::vector<fimsdescription__relationType * >& replaces, std::vector<fimsdescription__relationType * >& isRequiredBy, std::vector<fimsdescription__relationType * >& requires, std::vector<fimsdescription__relationType * >& isPartOf, std::vector<fimsdescription__relationType * >& hasPart, std::vector<fimsdescription__relationType * >& isReferencedBy, std::vector<fimsdescription__relationType * >& references, std::vector<fimsdescription__relationType * >& isFormatOf, std::vector<fimsdescription__relationType * >& hasFormat, std::vector<fimsdescription__relationType * >& isEpisodeOf, std::vector<fimsdescription__relationType * >& isMemberOf, std::vector<fimsdescription__relationType * >& hasMembers, std::vector<fimsdescription__coverageType * >& coverage, std::vector<fimsdescription__rightsType * >& rights, std::wstring *version, std::vector<fimsdescription__partType * >& part, std::wstring *xml__lang) { fimsdescription__bmContentDescriptionType *_p = soap_instantiate_fimsdescription__bmContentDescriptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimsdescription__bmContentDescriptionType::title = title; _p->fimsdescription__bmContentDescriptionType::alternativeTitle = alternativeTitle; _p->fimsdescription__bmContentDescriptionType::creator = creator; _p->fimsdescription__bmContentDescriptionType::subject = subject; _p->fimsdescription__bmContentDescriptionType::description = description; _p->fimsdescription__bmContentDescriptionType::publisher = publisher; _p->fimsdescription__bmContentDescriptionType::contributor = contributor; _p->fimsdescription__bmContentDescriptionType::date = date; _p->fimsdescription__bmContentDescriptionType::type = type; _p->fimsdescription__bmContentDescriptionType::identifier = identifier; _p->fimsdescription__bmContentDescriptionType::language = language; _p->fimsdescription__bmContentDescriptionType::relation = relation; _p->fimsdescription__bmContentDescriptionType::isVersionOf = isVersionOf; _p->fimsdescription__bmContentDescriptionType::hasVersion = hasVersion; _p->fimsdescription__bmContentDescriptionType::isReplacedBy = isReplacedBy; _p->fimsdescription__bmContentDescriptionType::replaces = replaces; _p->fimsdescription__bmContentDescriptionType::isRequiredBy = isRequiredBy; _p->fimsdescription__bmContentDescriptionType::requires = requires; _p->fimsdescription__bmContentDescriptionType::isPartOf = isPartOf; _p->fimsdescription__bmContentDescriptionType::hasPart = hasPart; _p->fimsdescription__bmContentDescriptionType::isReferencedBy = isReferencedBy; _p->fimsdescription__bmContentDescriptionType::references = references; _p->fimsdescription__bmContentDescriptionType::isFormatOf = isFormatOf; _p->fimsdescription__bmContentDescriptionType::hasFormat = hasFormat; _p->fimsdescription__bmContentDescriptionType::isEpisodeOf = isEpisodeOf; _p->fimsdescription__bmContentDescriptionType::isMemberOf = isMemberOf; _p->fimsdescription__bmContentDescriptionType::hasMembers = hasMembers; _p->fimsdescription__bmContentDescriptionType::coverage = coverage; _p->fimsdescription__bmContentDescriptionType::rights = rights; _p->fimsdescription__bmContentDescriptionType::version = version; _p->fimsdescription__bmContentDescriptionType::part = part; _p->fimsdescription__bmContentDescriptionType::xml__lang = xml__lang; } return _p; }

inline void soap_delete_fimsdescription__bmContentDescriptionType(struct soap *soap, fimsdescription__bmContentDescriptionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimsdescription__bmContentDescriptionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimstime__EditUnitNumberType
#define SOAP_TYPE_fimstime__EditUnitNumberType (168)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimstime__EditUnitNumberType(struct soap*, const char*, int, const fimstime__EditUnitNumberType *, const char*);
SOAP_FMAC3 fimstime__EditUnitNumberType * SOAP_FMAC4 soap_in_fimstime__EditUnitNumberType(struct soap*, const char*, fimstime__EditUnitNumberType *, const char*);

#ifndef soap_write_fimstime__EditUnitNumberType
#define soap_write_fimstime__EditUnitNumberType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimstime:EditUnitNumberType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimstime__EditUnitNumberType * SOAP_FMAC4 soap_get_fimstime__EditUnitNumberType(struct soap*, fimstime__EditUnitNumberType *, const char*, const char*);

#ifndef soap_read_fimstime__EditUnitNumberType
#define soap_read_fimstime__EditUnitNumberType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimstime__EditUnitNumberType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimstime__EditUnitNumberType * SOAP_FMAC2 soap_instantiate_fimstime__EditUnitNumberType(struct soap*, int, const char*, const char*, size_t*);

inline fimstime__EditUnitNumberType * soap_new_fimstime__EditUnitNumberType(struct soap *soap, int n = -1) { return soap_instantiate_fimstime__EditUnitNumberType(soap, n, NULL, NULL, NULL); }

inline fimstime__EditUnitNumberType * soap_new_req_fimstime__EditUnitNumberType(struct soap *soap, LONG64 __item, std::wstring& editRate, std::wstring& factorNumerator, std::wstring& factorDenominator) { fimstime__EditUnitNumberType *_p = soap_instantiate_fimstime__EditUnitNumberType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimstime__EditUnitNumberType::__item = __item; _p->fimstime__EditUnitNumberType::editRate = editRate; _p->fimstime__EditUnitNumberType::factorNumerator = factorNumerator; _p->fimstime__EditUnitNumberType::factorDenominator = factorDenominator; } return _p; }

inline fimstime__EditUnitNumberType * soap_new_set_fimstime__EditUnitNumberType(struct soap *soap, LONG64 __item, std::wstring& editRate, std::wstring& factorNumerator, std::wstring& factorDenominator) { fimstime__EditUnitNumberType *_p = soap_instantiate_fimstime__EditUnitNumberType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimstime__EditUnitNumberType::__item = __item; _p->fimstime__EditUnitNumberType::editRate = editRate; _p->fimstime__EditUnitNumberType::factorNumerator = factorNumerator; _p->fimstime__EditUnitNumberType::factorDenominator = factorDenominator; } return _p; }

inline void soap_delete_fimstime__EditUnitNumberType(struct soap *soap, fimstime__EditUnitNumberType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimstime__EditUnitNumberType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimstime__TimeType
#define SOAP_TYPE_fimstime__TimeType (167)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimstime__TimeType(struct soap*, const char*, int, const fimstime__TimeType *, const char*);
SOAP_FMAC3 fimstime__TimeType * SOAP_FMAC4 soap_in_fimstime__TimeType(struct soap*, const char*, fimstime__TimeType *, const char*);

#ifndef soap_write_fimstime__TimeType
#define soap_write_fimstime__TimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimstime:TimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimstime__TimeType * SOAP_FMAC4 soap_get_fimstime__TimeType(struct soap*, fimstime__TimeType *, const char*, const char*);

#ifndef soap_read_fimstime__TimeType
#define soap_read_fimstime__TimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimstime__TimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimstime__TimeType * SOAP_FMAC2 soap_instantiate_fimstime__TimeType(struct soap*, int, const char*, const char*, size_t*);

inline fimstime__TimeType * soap_new_fimstime__TimeType(struct soap *soap, int n = -1) { return soap_instantiate_fimstime__TimeType(soap, n, NULL, NULL, NULL); }

inline fimstime__TimeType * soap_new_req_fimstime__TimeType(struct soap *soap, int __union_TimeType, union _fimstime__union_TimeType& union_TimeType) { fimstime__TimeType *_p = soap_instantiate_fimstime__TimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimstime__TimeType::__union_TimeType = __union_TimeType; _p->fimstime__TimeType::union_TimeType = union_TimeType; } return _p; }

inline fimstime__TimeType * soap_new_set_fimstime__TimeType(struct soap *soap, int __union_TimeType, union _fimstime__union_TimeType& union_TimeType) { fimstime__TimeType *_p = soap_instantiate_fimstime__TimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimstime__TimeType::__union_TimeType = __union_TimeType; _p->fimstime__TimeType::union_TimeType = union_TimeType; } return _p; }

inline void soap_delete_fimstime__TimeType(struct soap *soap, fimstime__TimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimstime__TimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fimstime__DurationType
#define SOAP_TYPE_fimstime__DurationType (166)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fimstime__DurationType(struct soap*, const char*, int, const fimstime__DurationType *, const char*);
SOAP_FMAC3 fimstime__DurationType * SOAP_FMAC4 soap_in_fimstime__DurationType(struct soap*, const char*, fimstime__DurationType *, const char*);

#ifndef soap_write_fimstime__DurationType
#define soap_write_fimstime__DurationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fimstime:DurationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimstime__DurationType * SOAP_FMAC4 soap_get_fimstime__DurationType(struct soap*, fimstime__DurationType *, const char*, const char*);

#ifndef soap_read_fimstime__DurationType
#define soap_read_fimstime__DurationType(soap, data) ( soap_begin_recv(soap) || !soap_get_fimstime__DurationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fimstime__DurationType * SOAP_FMAC2 soap_instantiate_fimstime__DurationType(struct soap*, int, const char*, const char*, size_t*);

inline fimstime__DurationType * soap_new_fimstime__DurationType(struct soap *soap, int n = -1) { return soap_instantiate_fimstime__DurationType(soap, n, NULL, NULL, NULL); }

inline fimstime__DurationType * soap_new_req_fimstime__DurationType(struct soap *soap, int __union_DurationType, union _fimstime__union_DurationType& union_DurationType) { fimstime__DurationType *_p = soap_instantiate_fimstime__DurationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimstime__DurationType::__union_DurationType = __union_DurationType; _p->fimstime__DurationType::union_DurationType = union_DurationType; } return _p; }

inline fimstime__DurationType * soap_new_set_fimstime__DurationType(struct soap *soap, int __union_DurationType, union _fimstime__union_DurationType& union_DurationType) { fimstime__DurationType *_p = soap_instantiate_fimstime__DurationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fimstime__DurationType::__union_DurationType = __union_DurationType; _p->fimstime__DurationType::union_DurationType = union_DurationType; } return _p; }

inline void soap_delete_fimstime__DurationType(struct soap *soap, fimstime__DurationType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fimstime__DurationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__fims__formatCollection
#define SOAP_TYPE__fims__formatCollection (165)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__formatCollection(struct soap*, const char*, int, const _fims__formatCollection *, const char*);
SOAP_FMAC3 _fims__formatCollection * SOAP_FMAC4 soap_in__fims__formatCollection(struct soap*, const char*, _fims__formatCollection *, const char*);

#ifndef soap_write__fims__formatCollection
#define soap_write__fims__formatCollection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:formatCollection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__formatCollection * SOAP_FMAC4 soap_get__fims__formatCollection(struct soap*, _fims__formatCollection *, const char*, const char*);

#ifndef soap_read__fims__formatCollection
#define soap_read__fims__formatCollection(soap, data) ( soap_begin_recv(soap) || !soap_get__fims__formatCollection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _fims__formatCollection * SOAP_FMAC2 soap_instantiate__fims__formatCollection(struct soap*, int, const char*, const char*, size_t*);

inline _fims__formatCollection * soap_new__fims__formatCollection(struct soap *soap, int n = -1) { return soap_instantiate__fims__formatCollection(soap, n, NULL, NULL, NULL); }

inline _fims__formatCollection * soap_new_req__fims__formatCollection(struct soap *soap) { _fims__formatCollection *_p = soap_instantiate__fims__formatCollection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _fims__formatCollection * soap_new_set__fims__formatCollection(struct soap *soap, fims__VideoFormatType *videoFormat, fims__AudioFormatType *audioFormat, fims__DataFormatType *dataFormat, fims__ContainerFormatType *containerFormat) { _fims__formatCollection *_p = soap_instantiate__fims__formatCollection(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_fims__formatCollection::videoFormat = videoFormat; _p->_fims__formatCollection::audioFormat = audioFormat; _p->_fims__formatCollection::dataFormat = dataFormat; _p->_fims__formatCollection::containerFormat = containerFormat; } return _p; }

inline void soap_delete__fims__formatCollection(struct soap *soap, _fims__formatCollection *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__fims__formatCollection(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SystemPerformanceEventsType
#define SOAP_TYPE_fims__SystemPerformanceEventsType (164)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SystemPerformanceEventsType(struct soap*, const char*, int, const fims__SystemPerformanceEventsType *, const char*);
SOAP_FMAC3 fims__SystemPerformanceEventsType * SOAP_FMAC4 soap_in_fims__SystemPerformanceEventsType(struct soap*, const char*, fims__SystemPerformanceEventsType *, const char*);

#ifndef soap_write_fims__SystemPerformanceEventsType
#define soap_write_fims__SystemPerformanceEventsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SystemPerformanceEventsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemPerformanceEventsType * SOAP_FMAC4 soap_get_fims__SystemPerformanceEventsType(struct soap*, fims__SystemPerformanceEventsType *, const char*, const char*);

#ifndef soap_read_fims__SystemPerformanceEventsType
#define soap_read_fims__SystemPerformanceEventsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SystemPerformanceEventsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SystemPerformanceEventsType * SOAP_FMAC2 soap_instantiate_fims__SystemPerformanceEventsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SystemPerformanceEventsType * soap_new_fims__SystemPerformanceEventsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SystemPerformanceEventsType(soap, n, NULL, NULL, NULL); }

inline fims__SystemPerformanceEventsType * soap_new_req_fims__SystemPerformanceEventsType(struct soap *soap, std::vector<fims__SystemPerformanceEventType * >& systemPerformanceEvent) { fims__SystemPerformanceEventsType *_p = soap_instantiate_fims__SystemPerformanceEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemPerformanceEventsType::systemPerformanceEvent = systemPerformanceEvent; } return _p; }

inline fims__SystemPerformanceEventsType * soap_new_set_fims__SystemPerformanceEventsType(struct soap *soap, std::vector<fims__SystemPerformanceEventType * >& systemPerformanceEvent, std::vector<char * >& __any, char *__anyAttribute) { fims__SystemPerformanceEventsType *_p = soap_instantiate_fims__SystemPerformanceEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemPerformanceEventsType::systemPerformanceEvent = systemPerformanceEvent; _p->fims__SystemPerformanceEventsType::__any = __any; _p->fims__SystemPerformanceEventsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__SystemPerformanceEventsType(struct soap *soap, fims__SystemPerformanceEventsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SystemPerformanceEventsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SystemPerformanceEventType
#define SOAP_TYPE_fims__SystemPerformanceEventType (163)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SystemPerformanceEventType(struct soap*, const char*, int, const fims__SystemPerformanceEventType *, const char*);
SOAP_FMAC3 fims__SystemPerformanceEventType * SOAP_FMAC4 soap_in_fims__SystemPerformanceEventType(struct soap*, const char*, fims__SystemPerformanceEventType *, const char*);

#ifndef soap_write_fims__SystemPerformanceEventType
#define soap_write_fims__SystemPerformanceEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SystemPerformanceEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemPerformanceEventType * SOAP_FMAC4 soap_get_fims__SystemPerformanceEventType(struct soap*, fims__SystemPerformanceEventType *, const char*, const char*);

#ifndef soap_read_fims__SystemPerformanceEventType
#define soap_read_fims__SystemPerformanceEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SystemPerformanceEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SystemPerformanceEventType * SOAP_FMAC2 soap_instantiate_fims__SystemPerformanceEventType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SystemPerformanceEventType * soap_new_fims__SystemPerformanceEventType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SystemPerformanceEventType(soap, n, NULL, NULL, NULL); }

inline fims__SystemPerformanceEventType * soap_new_req_fims__SystemPerformanceEventType(struct soap *soap) { fims__SystemPerformanceEventType *_p = soap_instantiate_fims__SystemPerformanceEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__SystemPerformanceEventType * soap_new_set_fims__SystemPerformanceEventType(struct soap *soap, std::wstring *TBD) { fims__SystemPerformanceEventType *_p = soap_instantiate_fims__SystemPerformanceEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemPerformanceEventType::TBD = TBD; } return _p; }

inline void soap_delete_fims__SystemPerformanceEventType(struct soap *soap, fims__SystemPerformanceEventType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SystemPerformanceEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SystemExceptionEventsType
#define SOAP_TYPE_fims__SystemExceptionEventsType (162)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SystemExceptionEventsType(struct soap*, const char*, int, const fims__SystemExceptionEventsType *, const char*);
SOAP_FMAC3 fims__SystemExceptionEventsType * SOAP_FMAC4 soap_in_fims__SystemExceptionEventsType(struct soap*, const char*, fims__SystemExceptionEventsType *, const char*);

#ifndef soap_write_fims__SystemExceptionEventsType
#define soap_write_fims__SystemExceptionEventsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SystemExceptionEventsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemExceptionEventsType * SOAP_FMAC4 soap_get_fims__SystemExceptionEventsType(struct soap*, fims__SystemExceptionEventsType *, const char*, const char*);

#ifndef soap_read_fims__SystemExceptionEventsType
#define soap_read_fims__SystemExceptionEventsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SystemExceptionEventsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SystemExceptionEventsType * SOAP_FMAC2 soap_instantiate_fims__SystemExceptionEventsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SystemExceptionEventsType * soap_new_fims__SystemExceptionEventsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SystemExceptionEventsType(soap, n, NULL, NULL, NULL); }

inline fims__SystemExceptionEventsType * soap_new_req_fims__SystemExceptionEventsType(struct soap *soap, std::vector<fims__SystemExceptionEventType * >& systemExceptionEvent) { fims__SystemExceptionEventsType *_p = soap_instantiate_fims__SystemExceptionEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemExceptionEventsType::systemExceptionEvent = systemExceptionEvent; } return _p; }

inline fims__SystemExceptionEventsType * soap_new_set_fims__SystemExceptionEventsType(struct soap *soap, std::vector<fims__SystemExceptionEventType * >& systemExceptionEvent, std::vector<char * >& __any, char *__anyAttribute) { fims__SystemExceptionEventsType *_p = soap_instantiate_fims__SystemExceptionEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemExceptionEventsType::systemExceptionEvent = systemExceptionEvent; _p->fims__SystemExceptionEventsType::__any = __any; _p->fims__SystemExceptionEventsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__SystemExceptionEventsType(struct soap *soap, fims__SystemExceptionEventsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SystemExceptionEventsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SystemExceptionEventType
#define SOAP_TYPE_fims__SystemExceptionEventType (161)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SystemExceptionEventType(struct soap*, const char*, int, const fims__SystemExceptionEventType *, const char*);
SOAP_FMAC3 fims__SystemExceptionEventType * SOAP_FMAC4 soap_in_fims__SystemExceptionEventType(struct soap*, const char*, fims__SystemExceptionEventType *, const char*);

#ifndef soap_write_fims__SystemExceptionEventType
#define soap_write_fims__SystemExceptionEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SystemExceptionEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemExceptionEventType * SOAP_FMAC4 soap_get_fims__SystemExceptionEventType(struct soap*, fims__SystemExceptionEventType *, const char*, const char*);

#ifndef soap_read_fims__SystemExceptionEventType
#define soap_read_fims__SystemExceptionEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SystemExceptionEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SystemExceptionEventType * SOAP_FMAC2 soap_instantiate_fims__SystemExceptionEventType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SystemExceptionEventType * soap_new_fims__SystemExceptionEventType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SystemExceptionEventType(soap, n, NULL, NULL, NULL); }

inline fims__SystemExceptionEventType * soap_new_req_fims__SystemExceptionEventType(struct soap *soap) { fims__SystemExceptionEventType *_p = soap_instantiate_fims__SystemExceptionEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__SystemExceptionEventType * soap_new_set_fims__SystemExceptionEventType(struct soap *soap, std::wstring *errorCode, std::wstring *errorTitle, std::wstring *errorDescription, time_t *errorDateTime) { fims__SystemExceptionEventType *_p = soap_instantiate_fims__SystemExceptionEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemExceptionEventType::errorCode = errorCode; _p->fims__SystemExceptionEventType::errorTitle = errorTitle; _p->fims__SystemExceptionEventType::errorDescription = errorDescription; _p->fims__SystemExceptionEventType::errorDateTime = errorDateTime; } return _p; }

inline void soap_delete_fims__SystemExceptionEventType(struct soap *soap, fims__SystemExceptionEventType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SystemExceptionEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SystemEventsType
#define SOAP_TYPE_fims__SystemEventsType (160)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SystemEventsType(struct soap*, const char*, int, const fims__SystemEventsType *, const char*);
SOAP_FMAC3 fims__SystemEventsType * SOAP_FMAC4 soap_in_fims__SystemEventsType(struct soap*, const char*, fims__SystemEventsType *, const char*);

#ifndef soap_write_fims__SystemEventsType
#define soap_write_fims__SystemEventsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SystemEventsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemEventsType * SOAP_FMAC4 soap_get_fims__SystemEventsType(struct soap*, fims__SystemEventsType *, const char*, const char*);

#ifndef soap_read_fims__SystemEventsType
#define soap_read_fims__SystemEventsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SystemEventsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SystemEventsType * SOAP_FMAC2 soap_instantiate_fims__SystemEventsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SystemEventsType * soap_new_fims__SystemEventsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SystemEventsType(soap, n, NULL, NULL, NULL); }

inline fims__SystemEventsType * soap_new_req_fims__SystemEventsType(struct soap *soap, std::vector<fims__SystemEventType * >& systemEvent) { fims__SystemEventsType *_p = soap_instantiate_fims__SystemEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemEventsType::systemEvent = systemEvent; } return _p; }

inline fims__SystemEventsType * soap_new_set_fims__SystemEventsType(struct soap *soap, std::vector<fims__SystemEventType * >& systemEvent, std::vector<char * >& __any, char *__anyAttribute) { fims__SystemEventsType *_p = soap_instantiate_fims__SystemEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SystemEventsType::systemEvent = systemEvent; _p->fims__SystemEventsType::__any = __any; _p->fims__SystemEventsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__SystemEventsType(struct soap *soap, fims__SystemEventsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SystemEventsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SystemEventType
#define SOAP_TYPE_fims__SystemEventType (159)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SystemEventType(struct soap*, const char*, int, const fims__SystemEventType *, const char*);
SOAP_FMAC3 fims__SystemEventType * SOAP_FMAC4 soap_in_fims__SystemEventType(struct soap*, const char*, fims__SystemEventType *, const char*);

#ifndef soap_write_fims__SystemEventType
#define soap_write_fims__SystemEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SystemEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemEventType * SOAP_FMAC4 soap_get_fims__SystemEventType(struct soap*, fims__SystemEventType *, const char*, const char*);

#ifndef soap_read_fims__SystemEventType
#define soap_read_fims__SystemEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SystemEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SystemEventType * SOAP_FMAC2 soap_instantiate_fims__SystemEventType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SystemEventType * soap_new_fims__SystemEventType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SystemEventType(soap, n, NULL, NULL, NULL); }

inline fims__SystemEventType * soap_new_req_fims__SystemEventType(struct soap *soap) { fims__SystemEventType *_p = soap_instantiate_fims__SystemEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__SystemEventType * soap_new_set_fims__SystemEventType(struct soap *soap) { fims__SystemEventType *_p = soap_instantiate_fims__SystemEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__SystemEventType(struct soap *soap, fims__SystemEventType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SystemEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContentCustomEventsType
#define SOAP_TYPE_fims__ContentCustomEventsType (158)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContentCustomEventsType(struct soap*, const char*, int, const fims__ContentCustomEventsType *, const char*);
SOAP_FMAC3 fims__ContentCustomEventsType * SOAP_FMAC4 soap_in_fims__ContentCustomEventsType(struct soap*, const char*, fims__ContentCustomEventsType *, const char*);

#ifndef soap_write_fims__ContentCustomEventsType
#define soap_write_fims__ContentCustomEventsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContentCustomEventsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentCustomEventsType * SOAP_FMAC4 soap_get_fims__ContentCustomEventsType(struct soap*, fims__ContentCustomEventsType *, const char*, const char*);

#ifndef soap_read_fims__ContentCustomEventsType
#define soap_read_fims__ContentCustomEventsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContentCustomEventsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContentCustomEventsType * SOAP_FMAC2 soap_instantiate_fims__ContentCustomEventsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContentCustomEventsType * soap_new_fims__ContentCustomEventsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContentCustomEventsType(soap, n, NULL, NULL, NULL); }

inline fims__ContentCustomEventsType * soap_new_req_fims__ContentCustomEventsType(struct soap *soap, std::vector<fims__ContentCustomEventType * >& contentCustomEvent) { fims__ContentCustomEventsType *_p = soap_instantiate_fims__ContentCustomEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentCustomEventsType::contentCustomEvent = contentCustomEvent; } return _p; }

inline fims__ContentCustomEventsType * soap_new_set_fims__ContentCustomEventsType(struct soap *soap, std::vector<fims__ContentCustomEventType * >& contentCustomEvent, std::vector<char * >& __any, char *__anyAttribute) { fims__ContentCustomEventsType *_p = soap_instantiate_fims__ContentCustomEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentCustomEventsType::contentCustomEvent = contentCustomEvent; _p->fims__ContentCustomEventsType::__any = __any; _p->fims__ContentCustomEventsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ContentCustomEventsType(struct soap *soap, fims__ContentCustomEventsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContentCustomEventsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContentCustomEventType
#define SOAP_TYPE_fims__ContentCustomEventType (157)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContentCustomEventType(struct soap*, const char*, int, const fims__ContentCustomEventType *, const char*);
SOAP_FMAC3 fims__ContentCustomEventType * SOAP_FMAC4 soap_in_fims__ContentCustomEventType(struct soap*, const char*, fims__ContentCustomEventType *, const char*);

#ifndef soap_write_fims__ContentCustomEventType
#define soap_write_fims__ContentCustomEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContentCustomEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentCustomEventType * SOAP_FMAC4 soap_get_fims__ContentCustomEventType(struct soap*, fims__ContentCustomEventType *, const char*, const char*);

#ifndef soap_read_fims__ContentCustomEventType
#define soap_read_fims__ContentCustomEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContentCustomEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContentCustomEventType * SOAP_FMAC2 soap_instantiate_fims__ContentCustomEventType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContentCustomEventType * soap_new_fims__ContentCustomEventType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContentCustomEventType(soap, n, NULL, NULL, NULL); }

inline fims__ContentCustomEventType * soap_new_req_fims__ContentCustomEventType(struct soap *soap) { fims__ContentCustomEventType *_p = soap_instantiate_fims__ContentCustomEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__ContentCustomEventType * soap_new_set_fims__ContentCustomEventType(struct soap *soap, std::wstring *templateID, fims__CustomEventTemplateType *customEventTemplate, fims__ResourceReferenceType *targetResourceReference1, fims__ExtensionGroup *ExtensionGroup1) { fims__ContentCustomEventType *_p = soap_instantiate_fims__ContentCustomEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentCustomEventType::templateID = templateID; _p->fims__ContentCustomEventType::customEventTemplate = customEventTemplate; _p->fims__ContentEventType::targetResourceReference = targetResourceReference1; _p->fims__ContentEventType::ExtensionGroup = ExtensionGroup1; } return _p; }

inline void soap_delete_fims__ContentCustomEventType(struct soap *soap, fims__ContentCustomEventType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContentCustomEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContentStatusEventsType
#define SOAP_TYPE_fims__ContentStatusEventsType (156)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContentStatusEventsType(struct soap*, const char*, int, const fims__ContentStatusEventsType *, const char*);
SOAP_FMAC3 fims__ContentStatusEventsType * SOAP_FMAC4 soap_in_fims__ContentStatusEventsType(struct soap*, const char*, fims__ContentStatusEventsType *, const char*);

#ifndef soap_write_fims__ContentStatusEventsType
#define soap_write_fims__ContentStatusEventsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContentStatusEventsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentStatusEventsType * SOAP_FMAC4 soap_get_fims__ContentStatusEventsType(struct soap*, fims__ContentStatusEventsType *, const char*, const char*);

#ifndef soap_read_fims__ContentStatusEventsType
#define soap_read_fims__ContentStatusEventsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContentStatusEventsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContentStatusEventsType * SOAP_FMAC2 soap_instantiate_fims__ContentStatusEventsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContentStatusEventsType * soap_new_fims__ContentStatusEventsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContentStatusEventsType(soap, n, NULL, NULL, NULL); }

inline fims__ContentStatusEventsType * soap_new_req_fims__ContentStatusEventsType(struct soap *soap, std::vector<fims__ContentStatusEventType * >& contentStatusEvent) { fims__ContentStatusEventsType *_p = soap_instantiate_fims__ContentStatusEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentStatusEventsType::contentStatusEvent = contentStatusEvent; } return _p; }

inline fims__ContentStatusEventsType * soap_new_set_fims__ContentStatusEventsType(struct soap *soap, std::vector<fims__ContentStatusEventType * >& contentStatusEvent, std::vector<char * >& __any, char *__anyAttribute) { fims__ContentStatusEventsType *_p = soap_instantiate_fims__ContentStatusEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentStatusEventsType::contentStatusEvent = contentStatusEvent; _p->fims__ContentStatusEventsType::__any = __any; _p->fims__ContentStatusEventsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ContentStatusEventsType(struct soap *soap, fims__ContentStatusEventsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContentStatusEventsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContentStatusEventType
#define SOAP_TYPE_fims__ContentStatusEventType (155)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContentStatusEventType(struct soap*, const char*, int, const fims__ContentStatusEventType *, const char*);
SOAP_FMAC3 fims__ContentStatusEventType * SOAP_FMAC4 soap_in_fims__ContentStatusEventType(struct soap*, const char*, fims__ContentStatusEventType *, const char*);

#ifndef soap_write_fims__ContentStatusEventType
#define soap_write_fims__ContentStatusEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContentStatusEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentStatusEventType * SOAP_FMAC4 soap_get_fims__ContentStatusEventType(struct soap*, fims__ContentStatusEventType *, const char*, const char*);

#ifndef soap_read_fims__ContentStatusEventType
#define soap_read_fims__ContentStatusEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContentStatusEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContentStatusEventType * SOAP_FMAC2 soap_instantiate_fims__ContentStatusEventType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContentStatusEventType * soap_new_fims__ContentStatusEventType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContentStatusEventType(soap, n, NULL, NULL, NULL); }

inline fims__ContentStatusEventType * soap_new_req_fims__ContentStatusEventType(struct soap *soap) { fims__ContentStatusEventType *_p = soap_instantiate_fims__ContentStatusEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__ContentStatusEventType * soap_new_set_fims__ContentStatusEventType(struct soap *soap, fims__ResourceReferenceType *targetResourceReference1, fims__ExtensionGroup *ExtensionGroup1) { fims__ContentStatusEventType *_p = soap_instantiate_fims__ContentStatusEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentEventType::targetResourceReference = targetResourceReference1; _p->fims__ContentEventType::ExtensionGroup = ExtensionGroup1; } return _p; }

inline void soap_delete_fims__ContentStatusEventType(struct soap *soap, fims__ContentStatusEventType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContentStatusEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContentEventsType
#define SOAP_TYPE_fims__ContentEventsType (154)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContentEventsType(struct soap*, const char*, int, const fims__ContentEventsType *, const char*);
SOAP_FMAC3 fims__ContentEventsType * SOAP_FMAC4 soap_in_fims__ContentEventsType(struct soap*, const char*, fims__ContentEventsType *, const char*);

#ifndef soap_write_fims__ContentEventsType
#define soap_write_fims__ContentEventsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContentEventsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentEventsType * SOAP_FMAC4 soap_get_fims__ContentEventsType(struct soap*, fims__ContentEventsType *, const char*, const char*);

#ifndef soap_read_fims__ContentEventsType
#define soap_read_fims__ContentEventsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContentEventsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContentEventsType * SOAP_FMAC2 soap_instantiate_fims__ContentEventsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContentEventsType * soap_new_fims__ContentEventsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContentEventsType(soap, n, NULL, NULL, NULL); }

inline fims__ContentEventsType * soap_new_req_fims__ContentEventsType(struct soap *soap, std::vector<fims__ContentEventType * >& contentEvent) { fims__ContentEventsType *_p = soap_instantiate_fims__ContentEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentEventsType::contentEvent = contentEvent; } return _p; }

inline fims__ContentEventsType * soap_new_set_fims__ContentEventsType(struct soap *soap, std::vector<fims__ContentEventType * >& contentEvent, std::vector<char * >& __any, char *__anyAttribute) { fims__ContentEventsType *_p = soap_instantiate_fims__ContentEventsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentEventsType::contentEvent = contentEvent; _p->fims__ContentEventsType::__any = __any; _p->fims__ContentEventsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ContentEventsType(struct soap *soap, fims__ContentEventsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContentEventsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContentEventType
#define SOAP_TYPE_fims__ContentEventType (153)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContentEventType(struct soap*, const char*, int, const fims__ContentEventType *, const char*);
SOAP_FMAC3 fims__ContentEventType * SOAP_FMAC4 soap_in_fims__ContentEventType(struct soap*, const char*, fims__ContentEventType *, const char*);

#ifndef soap_write_fims__ContentEventType
#define soap_write_fims__ContentEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContentEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentEventType * SOAP_FMAC4 soap_get_fims__ContentEventType(struct soap*, fims__ContentEventType *, const char*, const char*);

#ifndef soap_read_fims__ContentEventType
#define soap_read_fims__ContentEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContentEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContentEventType * SOAP_FMAC2 soap_instantiate_fims__ContentEventType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContentEventType * soap_new_fims__ContentEventType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContentEventType(soap, n, NULL, NULL, NULL); }

inline fims__ContentEventType * soap_new_req_fims__ContentEventType(struct soap *soap) { fims__ContentEventType *_p = soap_instantiate_fims__ContentEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__ContentEventType * soap_new_set_fims__ContentEventType(struct soap *soap, fims__ResourceReferenceType *targetResourceReference, fims__ExtensionGroup *ExtensionGroup) { fims__ContentEventType *_p = soap_instantiate_fims__ContentEventType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContentEventType::targetResourceReference = targetResourceReference; _p->fims__ContentEventType::ExtensionGroup = ExtensionGroup; } return _p; }

inline void soap_delete_fims__ContentEventType(struct soap *soap, fims__ContentEventType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContentEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__EventPayloadsType
#define SOAP_TYPE_fims__EventPayloadsType (152)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EventPayloadsType(struct soap*, const char*, int, const fims__EventPayloadsType *, const char*);
SOAP_FMAC3 fims__EventPayloadsType * SOAP_FMAC4 soap_in_fims__EventPayloadsType(struct soap*, const char*, fims__EventPayloadsType *, const char*);

#ifndef soap_write_fims__EventPayloadsType
#define soap_write_fims__EventPayloadsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:EventPayloadsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__EventPayloadsType * SOAP_FMAC4 soap_get_fims__EventPayloadsType(struct soap*, fims__EventPayloadsType *, const char*, const char*);

#ifndef soap_read_fims__EventPayloadsType
#define soap_read_fims__EventPayloadsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EventPayloadsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__EventPayloadsType * SOAP_FMAC2 soap_instantiate_fims__EventPayloadsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__EventPayloadsType * soap_new_fims__EventPayloadsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__EventPayloadsType(soap, n, NULL, NULL, NULL); }

inline fims__EventPayloadsType * soap_new_req_fims__EventPayloadsType(struct soap *soap, std::vector<fims__EventPayloadType * >& eventPayload) { fims__EventPayloadsType *_p = soap_instantiate_fims__EventPayloadsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__EventPayloadsType::eventPayload = eventPayload; } return _p; }

inline fims__EventPayloadsType * soap_new_set_fims__EventPayloadsType(struct soap *soap, std::vector<fims__EventPayloadType * >& eventPayload, std::vector<char * >& __any, char *__anyAttribute) { fims__EventPayloadsType *_p = soap_instantiate_fims__EventPayloadsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__EventPayloadsType::eventPayload = eventPayload; _p->fims__EventPayloadsType::__any = __any; _p->fims__EventPayloadsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__EventPayloadsType(struct soap *soap, fims__EventPayloadsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__EventPayloadsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__EventPayloadType
#define SOAP_TYPE_fims__EventPayloadType (151)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EventPayloadType(struct soap*, const char*, int, const fims__EventPayloadType *, const char*);
SOAP_FMAC3 fims__EventPayloadType * SOAP_FMAC4 soap_in_fims__EventPayloadType(struct soap*, const char*, fims__EventPayloadType *, const char*);

#ifndef soap_write_fims__EventPayloadType
#define soap_write_fims__EventPayloadType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:EventPayloadType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__EventPayloadType * SOAP_FMAC4 soap_get_fims__EventPayloadType(struct soap*, fims__EventPayloadType *, const char*, const char*);

#ifndef soap_read_fims__EventPayloadType
#define soap_read_fims__EventPayloadType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EventPayloadType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__EventPayloadType * SOAP_FMAC2 soap_instantiate_fims__EventPayloadType(struct soap*, int, const char*, const char*, size_t*);

inline fims__EventPayloadType * soap_new_fims__EventPayloadType(struct soap *soap, int n = -1) { return soap_instantiate_fims__EventPayloadType(soap, n, NULL, NULL, NULL); }

inline fims__EventPayloadType * soap_new_req_fims__EventPayloadType(struct soap *soap) { fims__EventPayloadType *_p = soap_instantiate_fims__EventPayloadType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__EventPayloadType * soap_new_set_fims__EventPayloadType(struct soap *soap) { fims__EventPayloadType *_p = soap_instantiate_fims__EventPayloadType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__EventPayloadType(struct soap *soap, fims__EventPayloadType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__EventPayloadType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__EventEnvelopesType
#define SOAP_TYPE_fims__EventEnvelopesType (150)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EventEnvelopesType(struct soap*, const char*, int, const fims__EventEnvelopesType *, const char*);
SOAP_FMAC3 fims__EventEnvelopesType * SOAP_FMAC4 soap_in_fims__EventEnvelopesType(struct soap*, const char*, fims__EventEnvelopesType *, const char*);

#ifndef soap_write_fims__EventEnvelopesType
#define soap_write_fims__EventEnvelopesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:EventEnvelopesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__EventEnvelopesType * SOAP_FMAC4 soap_get_fims__EventEnvelopesType(struct soap*, fims__EventEnvelopesType *, const char*, const char*);

#ifndef soap_read_fims__EventEnvelopesType
#define soap_read_fims__EventEnvelopesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EventEnvelopesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__EventEnvelopesType * SOAP_FMAC2 soap_instantiate_fims__EventEnvelopesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__EventEnvelopesType * soap_new_fims__EventEnvelopesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__EventEnvelopesType(soap, n, NULL, NULL, NULL); }

inline fims__EventEnvelopesType * soap_new_req_fims__EventEnvelopesType(struct soap *soap, std::vector<fims__EventEnvelopeType * >& eventEnvelope) { fims__EventEnvelopesType *_p = soap_instantiate_fims__EventEnvelopesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__EventEnvelopesType::eventEnvelope = eventEnvelope; } return _p; }

inline fims__EventEnvelopesType * soap_new_set_fims__EventEnvelopesType(struct soap *soap, std::vector<fims__EventEnvelopeType * >& eventEnvelope, std::vector<char * >& __any, char *__anyAttribute) { fims__EventEnvelopesType *_p = soap_instantiate_fims__EventEnvelopesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__EventEnvelopesType::eventEnvelope = eventEnvelope; _p->fims__EventEnvelopesType::__any = __any; _p->fims__EventEnvelopesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__EventEnvelopesType(struct soap *soap, fims__EventEnvelopesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__EventEnvelopesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__EventEnvelopeType
#define SOAP_TYPE_fims__EventEnvelopeType (149)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EventEnvelopeType(struct soap*, const char*, int, const fims__EventEnvelopeType *, const char*);
SOAP_FMAC3 fims__EventEnvelopeType * SOAP_FMAC4 soap_in_fims__EventEnvelopeType(struct soap*, const char*, fims__EventEnvelopeType *, const char*);

#ifndef soap_write_fims__EventEnvelopeType
#define soap_write_fims__EventEnvelopeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:EventEnvelopeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__EventEnvelopeType * SOAP_FMAC4 soap_get_fims__EventEnvelopeType(struct soap*, fims__EventEnvelopeType *, const char*, const char*);

#ifndef soap_read_fims__EventEnvelopeType
#define soap_read_fims__EventEnvelopeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EventEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__EventEnvelopeType * SOAP_FMAC2 soap_instantiate_fims__EventEnvelopeType(struct soap*, int, const char*, const char*, size_t*);

inline fims__EventEnvelopeType * soap_new_fims__EventEnvelopeType(struct soap *soap, int n = -1) { return soap_instantiate_fims__EventEnvelopeType(soap, n, NULL, NULL, NULL); }

inline fims__EventEnvelopeType * soap_new_req_fims__EventEnvelopeType(struct soap *soap, enum fims__CurrentVersion version) { fims__EventEnvelopeType *_p = soap_instantiate_fims__EventEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__EventEnvelopeType::version = version; } return _p; }

inline fims__EventEnvelopeType * soap_new_set_fims__EventEnvelopeType(struct soap *soap, time_t *timestamp, enum fims__EventType *eventType, enum fims__EventSubType *eventSubType, enum fims__EventClassificationType *eventClassification, fims__EventPayloadType *eventPayload, enum fims__CurrentVersion version) { fims__EventEnvelopeType *_p = soap_instantiate_fims__EventEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__EventEnvelopeType::timestamp = timestamp; _p->fims__EventEnvelopeType::eventType = eventType; _p->fims__EventEnvelopeType::eventSubType = eventSubType; _p->fims__EventEnvelopeType::eventClassification = eventClassification; _p->fims__EventEnvelopeType::eventPayload = eventPayload; _p->fims__EventEnvelopeType::version = version; } return _p; }

inline void soap_delete_fims__EventEnvelopeType(struct soap *soap, fims__EventEnvelopeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__EventEnvelopeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomEventTemplatesType
#define SOAP_TYPE_fims__CustomEventTemplatesType (148)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomEventTemplatesType(struct soap*, const char*, int, const fims__CustomEventTemplatesType *, const char*);
SOAP_FMAC3 fims__CustomEventTemplatesType * SOAP_FMAC4 soap_in_fims__CustomEventTemplatesType(struct soap*, const char*, fims__CustomEventTemplatesType *, const char*);

#ifndef soap_write_fims__CustomEventTemplatesType
#define soap_write_fims__CustomEventTemplatesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomEventTemplatesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomEventTemplatesType * SOAP_FMAC4 soap_get_fims__CustomEventTemplatesType(struct soap*, fims__CustomEventTemplatesType *, const char*, const char*);

#ifndef soap_read_fims__CustomEventTemplatesType
#define soap_read_fims__CustomEventTemplatesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomEventTemplatesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomEventTemplatesType * SOAP_FMAC2 soap_instantiate_fims__CustomEventTemplatesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomEventTemplatesType * soap_new_fims__CustomEventTemplatesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomEventTemplatesType(soap, n, NULL, NULL, NULL); }

inline fims__CustomEventTemplatesType * soap_new_req_fims__CustomEventTemplatesType(struct soap *soap, std::vector<fims__CustomEventTemplateType * >& customEventTemplate) { fims__CustomEventTemplatesType *_p = soap_instantiate_fims__CustomEventTemplatesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomEventTemplatesType::customEventTemplate = customEventTemplate; } return _p; }

inline fims__CustomEventTemplatesType * soap_new_set_fims__CustomEventTemplatesType(struct soap *soap, std::vector<fims__CustomEventTemplateType * >& customEventTemplate, std::vector<char * >& __any, char *__anyAttribute) { fims__CustomEventTemplatesType *_p = soap_instantiate_fims__CustomEventTemplatesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomEventTemplatesType::customEventTemplate = customEventTemplate; _p->fims__CustomEventTemplatesType::__any = __any; _p->fims__CustomEventTemplatesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__CustomEventTemplatesType(struct soap *soap, fims__CustomEventTemplatesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomEventTemplatesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomEventTemplateType
#define SOAP_TYPE_fims__CustomEventTemplateType (147)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomEventTemplateType(struct soap*, const char*, int, const fims__CustomEventTemplateType *, const char*);
SOAP_FMAC3 fims__CustomEventTemplateType * SOAP_FMAC4 soap_in_fims__CustomEventTemplateType(struct soap*, const char*, fims__CustomEventTemplateType *, const char*);

#ifndef soap_write_fims__CustomEventTemplateType
#define soap_write_fims__CustomEventTemplateType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomEventTemplateType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomEventTemplateType * SOAP_FMAC4 soap_get_fims__CustomEventTemplateType(struct soap*, fims__CustomEventTemplateType *, const char*, const char*);

#ifndef soap_read_fims__CustomEventTemplateType
#define soap_read_fims__CustomEventTemplateType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomEventTemplateType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomEventTemplateType * SOAP_FMAC2 soap_instantiate_fims__CustomEventTemplateType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomEventTemplateType * soap_new_fims__CustomEventTemplateType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomEventTemplateType(soap, n, NULL, NULL, NULL); }

inline fims__CustomEventTemplateType * soap_new_req_fims__CustomEventTemplateType(struct soap *soap, std::wstring& name) { fims__CustomEventTemplateType *_p = soap_instantiate_fims__CustomEventTemplateType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomEventTemplateType::name = name; } return _p; }

inline fims__CustomEventTemplateType * soap_new_set_fims__CustomEventTemplateType(struct soap *soap, std::wstring *templateID, std::wstring& name, fims__QueryExpressionsType *parameters) { fims__CustomEventTemplateType *_p = soap_instantiate_fims__CustomEventTemplateType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomEventTemplateType::templateID = templateID; _p->fims__CustomEventTemplateType::name = name; _p->fims__CustomEventTemplateType::parameters = parameters; } return _p; }

inline void soap_delete_fims__CustomEventTemplateType(struct soap *soap, fims__CustomEventTemplateType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomEventTemplateType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryGroupsType
#define SOAP_TYPE_fims__QueryGroupsType (146)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryGroupsType(struct soap*, const char*, int, const fims__QueryGroupsType *, const char*);
SOAP_FMAC3 fims__QueryGroupsType * SOAP_FMAC4 soap_in_fims__QueryGroupsType(struct soap*, const char*, fims__QueryGroupsType *, const char*);

#ifndef soap_write_fims__QueryGroupsType
#define soap_write_fims__QueryGroupsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryGroupsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryGroupsType * SOAP_FMAC4 soap_get_fims__QueryGroupsType(struct soap*, fims__QueryGroupsType *, const char*, const char*);

#ifndef soap_read_fims__QueryGroupsType
#define soap_read_fims__QueryGroupsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryGroupsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryGroupsType * SOAP_FMAC2 soap_instantiate_fims__QueryGroupsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryGroupsType * soap_new_fims__QueryGroupsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryGroupsType(soap, n, NULL, NULL, NULL); }

inline fims__QueryGroupsType * soap_new_req_fims__QueryGroupsType(struct soap *soap, std::vector<fims__QueryGroupType * >& queryGroup) { fims__QueryGroupsType *_p = soap_instantiate_fims__QueryGroupsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryGroupsType::queryGroup = queryGroup; } return _p; }

inline fims__QueryGroupsType * soap_new_set_fims__QueryGroupsType(struct soap *soap, std::vector<fims__QueryGroupType * >& queryGroup, std::vector<char * >& __any, char *__anyAttribute) { fims__QueryGroupsType *_p = soap_instantiate_fims__QueryGroupsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryGroupsType::queryGroup = queryGroup; _p->fims__QueryGroupsType::__any = __any; _p->fims__QueryGroupsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__QueryGroupsType(struct soap *soap, fims__QueryGroupsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryGroupsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryGroupType
#define SOAP_TYPE_fims__QueryGroupType (145)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryGroupType(struct soap*, const char*, int, const fims__QueryGroupType *, const char*);
SOAP_FMAC3 fims__QueryGroupType * SOAP_FMAC4 soap_in_fims__QueryGroupType(struct soap*, const char*, fims__QueryGroupType *, const char*);

#ifndef soap_write_fims__QueryGroupType
#define soap_write_fims__QueryGroupType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryGroupType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryGroupType * SOAP_FMAC4 soap_get_fims__QueryGroupType(struct soap*, fims__QueryGroupType *, const char*, const char*);

#ifndef soap_read_fims__QueryGroupType
#define soap_read_fims__QueryGroupType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryGroupType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryGroupType * SOAP_FMAC2 soap_instantiate_fims__QueryGroupType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryGroupType * soap_new_fims__QueryGroupType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryGroupType(soap, n, NULL, NULL, NULL); }

inline fims__QueryGroupType * soap_new_req_fims__QueryGroupType(struct soap *soap, union _fims__union_QueryGroupType& union_QueryGroupType) { fims__QueryGroupType *_p = soap_instantiate_fims__QueryGroupType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryGroupType::union_QueryGroupType = union_QueryGroupType; } return _p; }

inline fims__QueryGroupType * soap_new_set_fims__QueryGroupType(struct soap *soap, fims__QueryParametersType *parameters, fims__QueryGroupsType *groups, int __union_QueryGroupType, union _fims__union_QueryGroupType& union_QueryGroupType) { fims__QueryGroupType *_p = soap_instantiate_fims__QueryGroupType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryGroupType::parameters = parameters; _p->fims__QueryGroupType::groups = groups; _p->fims__QueryGroupType::__union_QueryGroupType = __union_QueryGroupType; _p->fims__QueryGroupType::union_QueryGroupType = union_QueryGroupType; } return _p; }

inline void soap_delete_fims__QueryGroupType(struct soap *soap, fims__QueryGroupType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryGroupType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomQueryGroupOperatorsType
#define SOAP_TYPE_fims__CustomQueryGroupOperatorsType (144)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomQueryGroupOperatorsType(struct soap*, const char*, int, const fims__CustomQueryGroupOperatorsType *, const char*);
SOAP_FMAC3 fims__CustomQueryGroupOperatorsType * SOAP_FMAC4 soap_in_fims__CustomQueryGroupOperatorsType(struct soap*, const char*, fims__CustomQueryGroupOperatorsType *, const char*);

#ifndef soap_write_fims__CustomQueryGroupOperatorsType
#define soap_write_fims__CustomQueryGroupOperatorsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomQueryGroupOperatorsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomQueryGroupOperatorsType * SOAP_FMAC4 soap_get_fims__CustomQueryGroupOperatorsType(struct soap*, fims__CustomQueryGroupOperatorsType *, const char*, const char*);

#ifndef soap_read_fims__CustomQueryGroupOperatorsType
#define soap_read_fims__CustomQueryGroupOperatorsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomQueryGroupOperatorsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomQueryGroupOperatorsType * SOAP_FMAC2 soap_instantiate_fims__CustomQueryGroupOperatorsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomQueryGroupOperatorsType * soap_new_fims__CustomQueryGroupOperatorsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomQueryGroupOperatorsType(soap, n, NULL, NULL, NULL); }

inline fims__CustomQueryGroupOperatorsType * soap_new_req_fims__CustomQueryGroupOperatorsType(struct soap *soap, std::vector<fims__CustomQueryGroupOperatorType * >& customQueryGroupOperator) { fims__CustomQueryGroupOperatorsType *_p = soap_instantiate_fims__CustomQueryGroupOperatorsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomQueryGroupOperatorsType::customQueryGroupOperator = customQueryGroupOperator; } return _p; }

inline fims__CustomQueryGroupOperatorsType * soap_new_set_fims__CustomQueryGroupOperatorsType(struct soap *soap, std::vector<fims__CustomQueryGroupOperatorType * >& customQueryGroupOperator, std::vector<char * >& __any, char *__anyAttribute) { fims__CustomQueryGroupOperatorsType *_p = soap_instantiate_fims__CustomQueryGroupOperatorsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomQueryGroupOperatorsType::customQueryGroupOperator = customQueryGroupOperator; _p->fims__CustomQueryGroupOperatorsType::__any = __any; _p->fims__CustomQueryGroupOperatorsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__CustomQueryGroupOperatorsType(struct soap *soap, fims__CustomQueryGroupOperatorsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomQueryGroupOperatorsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomQueryGroupOperatorType
#define SOAP_TYPE_fims__CustomQueryGroupOperatorType (143)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomQueryGroupOperatorType(struct soap*, const char*, int, const fims__CustomQueryGroupOperatorType *, const char*);
SOAP_FMAC3 fims__CustomQueryGroupOperatorType * SOAP_FMAC4 soap_in_fims__CustomQueryGroupOperatorType(struct soap*, const char*, fims__CustomQueryGroupOperatorType *, const char*);

#ifndef soap_write_fims__CustomQueryGroupOperatorType
#define soap_write_fims__CustomQueryGroupOperatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomQueryGroupOperatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomQueryGroupOperatorType * SOAP_FMAC4 soap_get_fims__CustomQueryGroupOperatorType(struct soap*, fims__CustomQueryGroupOperatorType *, const char*, const char*);

#ifndef soap_read_fims__CustomQueryGroupOperatorType
#define soap_read_fims__CustomQueryGroupOperatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomQueryGroupOperatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomQueryGroupOperatorType * SOAP_FMAC2 soap_instantiate_fims__CustomQueryGroupOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomQueryGroupOperatorType * soap_new_fims__CustomQueryGroupOperatorType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomQueryGroupOperatorType(soap, n, NULL, NULL, NULL); }

inline fims__CustomQueryGroupOperatorType * soap_new_req_fims__CustomQueryGroupOperatorType(struct soap *soap) { fims__CustomQueryGroupOperatorType *_p = soap_instantiate_fims__CustomQueryGroupOperatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__CustomQueryGroupOperatorType * soap_new_set_fims__CustomQueryGroupOperatorType(struct soap *soap) { fims__CustomQueryGroupOperatorType *_p = soap_instantiate_fims__CustomQueryGroupOperatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__CustomQueryGroupOperatorType(struct soap *soap, fims__CustomQueryGroupOperatorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomQueryGroupOperatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryParametersType
#define SOAP_TYPE_fims__QueryParametersType (142)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryParametersType(struct soap*, const char*, int, const fims__QueryParametersType *, const char*);
SOAP_FMAC3 fims__QueryParametersType * SOAP_FMAC4 soap_in_fims__QueryParametersType(struct soap*, const char*, fims__QueryParametersType *, const char*);

#ifndef soap_write_fims__QueryParametersType
#define soap_write_fims__QueryParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryParametersType * SOAP_FMAC4 soap_get_fims__QueryParametersType(struct soap*, fims__QueryParametersType *, const char*, const char*);

#ifndef soap_read_fims__QueryParametersType
#define soap_read_fims__QueryParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryParametersType * SOAP_FMAC2 soap_instantiate_fims__QueryParametersType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryParametersType * soap_new_fims__QueryParametersType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryParametersType(soap, n, NULL, NULL, NULL); }

inline fims__QueryParametersType * soap_new_req_fims__QueryParametersType(struct soap *soap, std::vector<fims__QueryParameterType * >& queryParameter) { fims__QueryParametersType *_p = soap_instantiate_fims__QueryParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryParametersType::queryParameter = queryParameter; } return _p; }

inline fims__QueryParametersType * soap_new_set_fims__QueryParametersType(struct soap *soap, std::vector<fims__QueryParameterType * >& queryParameter, std::vector<char * >& __any, char *__anyAttribute) { fims__QueryParametersType *_p = soap_instantiate_fims__QueryParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryParametersType::queryParameter = queryParameter; _p->fims__QueryParametersType::__any = __any; _p->fims__QueryParametersType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__QueryParametersType(struct soap *soap, fims__QueryParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryParameterType
#define SOAP_TYPE_fims__QueryParameterType (141)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryParameterType(struct soap*, const char*, int, const fims__QueryParameterType *, const char*);
SOAP_FMAC3 fims__QueryParameterType * SOAP_FMAC4 soap_in_fims__QueryParameterType(struct soap*, const char*, fims__QueryParameterType *, const char*);

#ifndef soap_write_fims__QueryParameterType
#define soap_write_fims__QueryParameterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryParameterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryParameterType * SOAP_FMAC4 soap_get_fims__QueryParameterType(struct soap*, fims__QueryParameterType *, const char*, const char*);

#ifndef soap_read_fims__QueryParameterType
#define soap_read_fims__QueryParameterType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryParameterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryParameterType * SOAP_FMAC2 soap_instantiate_fims__QueryParameterType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryParameterType * soap_new_fims__QueryParameterType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryParameterType(soap, n, NULL, NULL, NULL); }

inline fims__QueryParameterType * soap_new_req_fims__QueryParameterType(struct soap *soap, std::wstring& name, union _fims__union_QueryParameterType& union_QueryParameterType, int __union_QueryParameterType_, union _fims__union_QueryParameterType_& union_QueryParameterType_) { fims__QueryParameterType *_p = soap_instantiate_fims__QueryParameterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryParameterType::name = name; _p->fims__QueryParameterType::union_QueryParameterType = union_QueryParameterType; _p->fims__QueryParameterType::__union_QueryParameterType_ = __union_QueryParameterType_; _p->fims__QueryParameterType::union_QueryParameterType_ = union_QueryParameterType_; } return _p; }

inline fims__QueryParameterType * soap_new_set_fims__QueryParameterType(struct soap *soap, std::wstring& name, bool *caseSensitive, int __union_QueryParameterType, union _fims__union_QueryParameterType& union_QueryParameterType, int __union_QueryParameterType_, union _fims__union_QueryParameterType_& union_QueryParameterType_) { fims__QueryParameterType *_p = soap_instantiate_fims__QueryParameterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryParameterType::name = name; _p->fims__QueryParameterType::caseSensitive = caseSensitive; _p->fims__QueryParameterType::__union_QueryParameterType = __union_QueryParameterType; _p->fims__QueryParameterType::union_QueryParameterType = union_QueryParameterType; _p->fims__QueryParameterType::__union_QueryParameterType_ = __union_QueryParameterType_; _p->fims__QueryParameterType::union_QueryParameterType_ = union_QueryParameterType_; } return _p; }

inline void soap_delete_fims__QueryParameterType(struct soap *soap, fims__QueryParameterType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryParameterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomQueryParameterOperatorsType
#define SOAP_TYPE_fims__CustomQueryParameterOperatorsType (140)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomQueryParameterOperatorsType(struct soap*, const char*, int, const fims__CustomQueryParameterOperatorsType *, const char*);
SOAP_FMAC3 fims__CustomQueryParameterOperatorsType * SOAP_FMAC4 soap_in_fims__CustomQueryParameterOperatorsType(struct soap*, const char*, fims__CustomQueryParameterOperatorsType *, const char*);

#ifndef soap_write_fims__CustomQueryParameterOperatorsType
#define soap_write_fims__CustomQueryParameterOperatorsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomQueryParameterOperatorsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomQueryParameterOperatorsType * SOAP_FMAC4 soap_get_fims__CustomQueryParameterOperatorsType(struct soap*, fims__CustomQueryParameterOperatorsType *, const char*, const char*);

#ifndef soap_read_fims__CustomQueryParameterOperatorsType
#define soap_read_fims__CustomQueryParameterOperatorsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomQueryParameterOperatorsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomQueryParameterOperatorsType * SOAP_FMAC2 soap_instantiate_fims__CustomQueryParameterOperatorsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomQueryParameterOperatorsType * soap_new_fims__CustomQueryParameterOperatorsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomQueryParameterOperatorsType(soap, n, NULL, NULL, NULL); }

inline fims__CustomQueryParameterOperatorsType * soap_new_req_fims__CustomQueryParameterOperatorsType(struct soap *soap, std::vector<fims__CustomQueryParameterOperatorType * >& customQueryParameterOperator) { fims__CustomQueryParameterOperatorsType *_p = soap_instantiate_fims__CustomQueryParameterOperatorsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomQueryParameterOperatorsType::customQueryParameterOperator = customQueryParameterOperator; } return _p; }

inline fims__CustomQueryParameterOperatorsType * soap_new_set_fims__CustomQueryParameterOperatorsType(struct soap *soap, std::vector<fims__CustomQueryParameterOperatorType * >& customQueryParameterOperator, std::vector<char * >& __any, char *__anyAttribute) { fims__CustomQueryParameterOperatorsType *_p = soap_instantiate_fims__CustomQueryParameterOperatorsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomQueryParameterOperatorsType::customQueryParameterOperator = customQueryParameterOperator; _p->fims__CustomQueryParameterOperatorsType::__any = __any; _p->fims__CustomQueryParameterOperatorsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__CustomQueryParameterOperatorsType(struct soap *soap, fims__CustomQueryParameterOperatorsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomQueryParameterOperatorsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomQueryParameterOperatorType
#define SOAP_TYPE_fims__CustomQueryParameterOperatorType (139)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomQueryParameterOperatorType(struct soap*, const char*, int, const fims__CustomQueryParameterOperatorType *, const char*);
SOAP_FMAC3 fims__CustomQueryParameterOperatorType * SOAP_FMAC4 soap_in_fims__CustomQueryParameterOperatorType(struct soap*, const char*, fims__CustomQueryParameterOperatorType *, const char*);

#ifndef soap_write_fims__CustomQueryParameterOperatorType
#define soap_write_fims__CustomQueryParameterOperatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomQueryParameterOperatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomQueryParameterOperatorType * SOAP_FMAC4 soap_get_fims__CustomQueryParameterOperatorType(struct soap*, fims__CustomQueryParameterOperatorType *, const char*, const char*);

#ifndef soap_read_fims__CustomQueryParameterOperatorType
#define soap_read_fims__CustomQueryParameterOperatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomQueryParameterOperatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomQueryParameterOperatorType * SOAP_FMAC2 soap_instantiate_fims__CustomQueryParameterOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomQueryParameterOperatorType * soap_new_fims__CustomQueryParameterOperatorType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomQueryParameterOperatorType(soap, n, NULL, NULL, NULL); }

inline fims__CustomQueryParameterOperatorType * soap_new_req_fims__CustomQueryParameterOperatorType(struct soap *soap) { fims__CustomQueryParameterOperatorType *_p = soap_instantiate_fims__CustomQueryParameterOperatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__CustomQueryParameterOperatorType * soap_new_set_fims__CustomQueryParameterOperatorType(struct soap *soap) { fims__CustomQueryParameterOperatorType *_p = soap_instantiate_fims__CustomQueryParameterOperatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__CustomQueryParameterOperatorType(struct soap *soap, fims__CustomQueryParameterOperatorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomQueryParameterOperatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryExpressionsType
#define SOAP_TYPE_fims__QueryExpressionsType (138)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryExpressionsType(struct soap*, const char*, int, const fims__QueryExpressionsType *, const char*);
SOAP_FMAC3 fims__QueryExpressionsType * SOAP_FMAC4 soap_in_fims__QueryExpressionsType(struct soap*, const char*, fims__QueryExpressionsType *, const char*);

#ifndef soap_write_fims__QueryExpressionsType
#define soap_write_fims__QueryExpressionsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryExpressionsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryExpressionsType * SOAP_FMAC4 soap_get_fims__QueryExpressionsType(struct soap*, fims__QueryExpressionsType *, const char*, const char*);

#ifndef soap_read_fims__QueryExpressionsType
#define soap_read_fims__QueryExpressionsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryExpressionsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryExpressionsType * SOAP_FMAC2 soap_instantiate_fims__QueryExpressionsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryExpressionsType * soap_new_fims__QueryExpressionsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryExpressionsType(soap, n, NULL, NULL, NULL); }

inline fims__QueryExpressionsType * soap_new_req_fims__QueryExpressionsType(struct soap *soap, std::vector<fims__QueryExpressionType * >& queryExpression) { fims__QueryExpressionsType *_p = soap_instantiate_fims__QueryExpressionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryExpressionsType::queryExpression = queryExpression; } return _p; }

inline fims__QueryExpressionsType * soap_new_set_fims__QueryExpressionsType(struct soap *soap, std::vector<fims__QueryExpressionType * >& queryExpression, std::vector<char * >& __any, char *__anyAttribute) { fims__QueryExpressionsType *_p = soap_instantiate_fims__QueryExpressionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryExpressionsType::queryExpression = queryExpression; _p->fims__QueryExpressionsType::__any = __any; _p->fims__QueryExpressionsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__QueryExpressionsType(struct soap *soap, fims__QueryExpressionsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryExpressionsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryExpressionType
#define SOAP_TYPE_fims__QueryExpressionType (137)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryExpressionType(struct soap*, const char*, int, const fims__QueryExpressionType *, const char*);
SOAP_FMAC3 fims__QueryExpressionType * SOAP_FMAC4 soap_in_fims__QueryExpressionType(struct soap*, const char*, fims__QueryExpressionType *, const char*);

#ifndef soap_write_fims__QueryExpressionType
#define soap_write_fims__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryExpressionType * SOAP_FMAC4 soap_get_fims__QueryExpressionType(struct soap*, fims__QueryExpressionType *, const char*, const char*);

#ifndef soap_read_fims__QueryExpressionType
#define soap_read_fims__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryExpressionType * SOAP_FMAC2 soap_instantiate_fims__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryExpressionType * soap_new_fims__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline fims__QueryExpressionType * soap_new_req_fims__QueryExpressionType(struct soap *soap, int __union_QueryExpressionType, union _fims__union_QueryExpressionType& union_QueryExpressionType) { fims__QueryExpressionType *_p = soap_instantiate_fims__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryExpressionType::__union_QueryExpressionType = __union_QueryExpressionType; _p->fims__QueryExpressionType::union_QueryExpressionType = union_QueryExpressionType; } return _p; }

inline fims__QueryExpressionType * soap_new_set_fims__QueryExpressionType(struct soap *soap, int __union_QueryExpressionType, union _fims__union_QueryExpressionType& union_QueryExpressionType) { fims__QueryExpressionType *_p = soap_instantiate_fims__QueryExpressionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryExpressionType::__union_QueryExpressionType = __union_QueryExpressionType; _p->fims__QueryExpressionType::union_QueryExpressionType = union_QueryExpressionType; } return _p; }

inline void soap_delete_fims__QueryExpressionType(struct soap *soap, fims__QueryExpressionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SuperLockTokensType
#define SOAP_TYPE_fims__SuperLockTokensType (136)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SuperLockTokensType(struct soap*, const char*, int, const fims__SuperLockTokensType *, const char*);
SOAP_FMAC3 fims__SuperLockTokensType * SOAP_FMAC4 soap_in_fims__SuperLockTokensType(struct soap*, const char*, fims__SuperLockTokensType *, const char*);

#ifndef soap_write_fims__SuperLockTokensType
#define soap_write_fims__SuperLockTokensType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SuperLockTokensType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SuperLockTokensType * SOAP_FMAC4 soap_get_fims__SuperLockTokensType(struct soap*, fims__SuperLockTokensType *, const char*, const char*);

#ifndef soap_read_fims__SuperLockTokensType
#define soap_read_fims__SuperLockTokensType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SuperLockTokensType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SuperLockTokensType * SOAP_FMAC2 soap_instantiate_fims__SuperLockTokensType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SuperLockTokensType * soap_new_fims__SuperLockTokensType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SuperLockTokensType(soap, n, NULL, NULL, NULL); }

inline fims__SuperLockTokensType * soap_new_req_fims__SuperLockTokensType(struct soap *soap, std::vector<fims__SuperLockTokenType * >& superLockToken) { fims__SuperLockTokensType *_p = soap_instantiate_fims__SuperLockTokensType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SuperLockTokensType::superLockToken = superLockToken; } return _p; }

inline fims__SuperLockTokensType * soap_new_set_fims__SuperLockTokensType(struct soap *soap, std::vector<fims__SuperLockTokenType * >& superLockToken, std::vector<char * >& __any, char *__anyAttribute) { fims__SuperLockTokensType *_p = soap_instantiate_fims__SuperLockTokensType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SuperLockTokensType::superLockToken = superLockToken; _p->fims__SuperLockTokensType::__any = __any; _p->fims__SuperLockTokensType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__SuperLockTokensType(struct soap *soap, fims__SuperLockTokensType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SuperLockTokensType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SuperLockTokenType
#define SOAP_TYPE_fims__SuperLockTokenType (135)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SuperLockTokenType(struct soap*, const char*, int, const fims__SuperLockTokenType *, const char*);
SOAP_FMAC3 fims__SuperLockTokenType * SOAP_FMAC4 soap_in_fims__SuperLockTokenType(struct soap*, const char*, fims__SuperLockTokenType *, const char*);

#ifndef soap_write_fims__SuperLockTokenType
#define soap_write_fims__SuperLockTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SuperLockTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SuperLockTokenType * SOAP_FMAC4 soap_get_fims__SuperLockTokenType(struct soap*, fims__SuperLockTokenType *, const char*, const char*);

#ifndef soap_read_fims__SuperLockTokenType
#define soap_read_fims__SuperLockTokenType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SuperLockTokenType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SuperLockTokenType * SOAP_FMAC2 soap_instantiate_fims__SuperLockTokenType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SuperLockTokenType * soap_new_fims__SuperLockTokenType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SuperLockTokenType(soap, n, NULL, NULL, NULL); }

inline fims__SuperLockTokenType * soap_new_req_fims__SuperLockTokenType(struct soap *soap, std::wstring& resourceID2) { fims__SuperLockTokenType *_p = soap_instantiate_fims__SuperLockTokenType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__SuperLockTokenType * soap_new_set_fims__SuperLockTokenType(struct soap *soap, std::wstring *userName, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__SuperLockTokenType *_p = soap_instantiate_fims__SuperLockTokenType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SuperLockTokenType::userName = userName; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__SuperLockTokenType(struct soap *soap, fims__SuperLockTokenType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SuperLockTokenType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__LockTokensType
#define SOAP_TYPE_fims__LockTokensType (134)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__LockTokensType(struct soap*, const char*, int, const fims__LockTokensType *, const char*);
SOAP_FMAC3 fims__LockTokensType * SOAP_FMAC4 soap_in_fims__LockTokensType(struct soap*, const char*, fims__LockTokensType *, const char*);

#ifndef soap_write_fims__LockTokensType
#define soap_write_fims__LockTokensType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:LockTokensType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__LockTokensType * SOAP_FMAC4 soap_get_fims__LockTokensType(struct soap*, fims__LockTokensType *, const char*, const char*);

#ifndef soap_read_fims__LockTokensType
#define soap_read_fims__LockTokensType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__LockTokensType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__LockTokensType * SOAP_FMAC2 soap_instantiate_fims__LockTokensType(struct soap*, int, const char*, const char*, size_t*);

inline fims__LockTokensType * soap_new_fims__LockTokensType(struct soap *soap, int n = -1) { return soap_instantiate_fims__LockTokensType(soap, n, NULL, NULL, NULL); }

inline fims__LockTokensType * soap_new_req_fims__LockTokensType(struct soap *soap, std::vector<fims__LockTokenType * >& lockToken) { fims__LockTokensType *_p = soap_instantiate_fims__LockTokensType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__LockTokensType::lockToken = lockToken; } return _p; }

inline fims__LockTokensType * soap_new_set_fims__LockTokensType(struct soap *soap, std::vector<fims__LockTokenType * >& lockToken, std::vector<char * >& __any, char *__anyAttribute) { fims__LockTokensType *_p = soap_instantiate_fims__LockTokensType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__LockTokensType::lockToken = lockToken; _p->fims__LockTokensType::__any = __any; _p->fims__LockTokensType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__LockTokensType(struct soap *soap, fims__LockTokensType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__LockTokensType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__LockTokenType
#define SOAP_TYPE_fims__LockTokenType (133)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__LockTokenType(struct soap*, const char*, int, const fims__LockTokenType *, const char*);
SOAP_FMAC3 fims__LockTokenType * SOAP_FMAC4 soap_in_fims__LockTokenType(struct soap*, const char*, fims__LockTokenType *, const char*);

#ifndef soap_write_fims__LockTokenType
#define soap_write_fims__LockTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:LockTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__LockTokenType * SOAP_FMAC4 soap_get_fims__LockTokenType(struct soap*, fims__LockTokenType *, const char*, const char*);

#ifndef soap_read_fims__LockTokenType
#define soap_read_fims__LockTokenType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__LockTokenType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__LockTokenType * SOAP_FMAC2 soap_instantiate_fims__LockTokenType(struct soap*, int, const char*, const char*, size_t*);

inline fims__LockTokenType * soap_new_fims__LockTokenType(struct soap *soap, int n = -1) { return soap_instantiate_fims__LockTokenType(soap, n, NULL, NULL, NULL); }

inline fims__LockTokenType * soap_new_req_fims__LockTokenType(struct soap *soap, std::wstring& resourceID2) { fims__LockTokenType *_p = soap_instantiate_fims__LockTokenType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__LockTokenType * soap_new_set_fims__LockTokenType(struct soap *soap, std::wstring *userName, time_t *expiration, fims__ResourceReferencesType *resourceReferences, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__LockTokenType *_p = soap_instantiate_fims__LockTokenType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__LockTokenType::userName = userName; _p->fims__LockTokenType::expiration = expiration; _p->fims__LockTokenType::resourceReferences = resourceReferences; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__LockTokenType(struct soap *soap, fims__LockTokenType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__LockTokenType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CredentialsType
#define SOAP_TYPE_fims__CredentialsType (132)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CredentialsType(struct soap*, const char*, int, const fims__CredentialsType *, const char*);
SOAP_FMAC3 fims__CredentialsType * SOAP_FMAC4 soap_in_fims__CredentialsType(struct soap*, const char*, fims__CredentialsType *, const char*);

#ifndef soap_write_fims__CredentialsType
#define soap_write_fims__CredentialsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CredentialsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CredentialsType * SOAP_FMAC4 soap_get_fims__CredentialsType(struct soap*, fims__CredentialsType *, const char*, const char*);

#ifndef soap_read_fims__CredentialsType
#define soap_read_fims__CredentialsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CredentialsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CredentialsType * SOAP_FMAC2 soap_instantiate_fims__CredentialsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CredentialsType * soap_new_fims__CredentialsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CredentialsType(soap, n, NULL, NULL, NULL); }

inline fims__CredentialsType * soap_new_req_fims__CredentialsType(struct soap *soap, std::vector<fims__CredentialType * >& credential) { fims__CredentialsType *_p = soap_instantiate_fims__CredentialsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CredentialsType::credential = credential; } return _p; }

inline fims__CredentialsType * soap_new_set_fims__CredentialsType(struct soap *soap, std::vector<fims__CredentialType * >& credential, std::vector<char * >& __any, char *__anyAttribute) { fims__CredentialsType *_p = soap_instantiate_fims__CredentialsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CredentialsType::credential = credential; _p->fims__CredentialsType::__any = __any; _p->fims__CredentialsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__CredentialsType(struct soap *soap, fims__CredentialsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CredentialsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CredentialType
#define SOAP_TYPE_fims__CredentialType (131)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CredentialType(struct soap*, const char*, int, const fims__CredentialType *, const char*);
SOAP_FMAC3 fims__CredentialType * SOAP_FMAC4 soap_in_fims__CredentialType(struct soap*, const char*, fims__CredentialType *, const char*);

#ifndef soap_write_fims__CredentialType
#define soap_write_fims__CredentialType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CredentialType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CredentialType * SOAP_FMAC4 soap_get_fims__CredentialType(struct soap*, fims__CredentialType *, const char*, const char*);

#ifndef soap_read_fims__CredentialType
#define soap_read_fims__CredentialType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CredentialType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CredentialType * SOAP_FMAC2 soap_instantiate_fims__CredentialType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CredentialType * soap_new_fims__CredentialType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CredentialType(soap, n, NULL, NULL, NULL); }

inline fims__CredentialType * soap_new_req_fims__CredentialType(struct soap *soap) { fims__CredentialType *_p = soap_instantiate_fims__CredentialType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__CredentialType * soap_new_set_fims__CredentialType(struct soap *soap, std::wstring *userName, std::wstring *password, std::wstring *sessionToken, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes) { fims__CredentialType *_p = soap_instantiate_fims__CredentialType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CredentialType::userName = userName; _p->fims__CredentialType::password = password; _p->fims__CredentialType::sessionToken = sessionToken; _p->fims__CredentialType::ExtensionGroup = ExtensionGroup; _p->fims__CredentialType::ExtensionAttributes = ExtensionAttributes; } return _p; }

inline void soap_delete_fims__CredentialType(struct soap *soap, fims__CredentialType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CredentialType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMEssenceLocatorStatusesType
#define SOAP_TYPE_fims__BMEssenceLocatorStatusesType (130)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMEssenceLocatorStatusesType(struct soap*, const char*, int, const fims__BMEssenceLocatorStatusesType *, const char*);
SOAP_FMAC3 fims__BMEssenceLocatorStatusesType * SOAP_FMAC4 soap_in_fims__BMEssenceLocatorStatusesType(struct soap*, const char*, fims__BMEssenceLocatorStatusesType *, const char*);

#ifndef soap_write_fims__BMEssenceLocatorStatusesType
#define soap_write_fims__BMEssenceLocatorStatusesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMEssenceLocatorStatusesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMEssenceLocatorStatusesType * SOAP_FMAC4 soap_get_fims__BMEssenceLocatorStatusesType(struct soap*, fims__BMEssenceLocatorStatusesType *, const char*, const char*);

#ifndef soap_read_fims__BMEssenceLocatorStatusesType
#define soap_read_fims__BMEssenceLocatorStatusesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMEssenceLocatorStatusesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMEssenceLocatorStatusesType * SOAP_FMAC2 soap_instantiate_fims__BMEssenceLocatorStatusesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMEssenceLocatorStatusesType * soap_new_fims__BMEssenceLocatorStatusesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMEssenceLocatorStatusesType(soap, n, NULL, NULL, NULL); }

inline fims__BMEssenceLocatorStatusesType * soap_new_req_fims__BMEssenceLocatorStatusesType(struct soap *soap, std::vector<fims__BMEssenceLocatorStatusType * >& bmEssenceLocatorStatus) { fims__BMEssenceLocatorStatusesType *_p = soap_instantiate_fims__BMEssenceLocatorStatusesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorStatusesType::bmEssenceLocatorStatus = bmEssenceLocatorStatus; } return _p; }

inline fims__BMEssenceLocatorStatusesType * soap_new_set_fims__BMEssenceLocatorStatusesType(struct soap *soap, std::vector<fims__BMEssenceLocatorStatusType * >& bmEssenceLocatorStatus, std::vector<char * >& __any, char *__anyAttribute) { fims__BMEssenceLocatorStatusesType *_p = soap_instantiate_fims__BMEssenceLocatorStatusesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorStatusesType::bmEssenceLocatorStatus = bmEssenceLocatorStatus; _p->fims__BMEssenceLocatorStatusesType::__any = __any; _p->fims__BMEssenceLocatorStatusesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__BMEssenceLocatorStatusesType(struct soap *soap, fims__BMEssenceLocatorStatusesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMEssenceLocatorStatusesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMEssenceLocatorStatusType
#define SOAP_TYPE_fims__BMEssenceLocatorStatusType (129)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMEssenceLocatorStatusType(struct soap*, const char*, int, const fims__BMEssenceLocatorStatusType *, const char*);
SOAP_FMAC3 fims__BMEssenceLocatorStatusType * SOAP_FMAC4 soap_in_fims__BMEssenceLocatorStatusType(struct soap*, const char*, fims__BMEssenceLocatorStatusType *, const char*);

#ifndef soap_write_fims__BMEssenceLocatorStatusType
#define soap_write_fims__BMEssenceLocatorStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMEssenceLocatorStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMEssenceLocatorStatusType * SOAP_FMAC4 soap_get_fims__BMEssenceLocatorStatusType(struct soap*, fims__BMEssenceLocatorStatusType *, const char*, const char*);

#ifndef soap_read_fims__BMEssenceLocatorStatusType
#define soap_read_fims__BMEssenceLocatorStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMEssenceLocatorStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMEssenceLocatorStatusType * SOAP_FMAC2 soap_instantiate_fims__BMEssenceLocatorStatusType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMEssenceLocatorStatusType * soap_new_fims__BMEssenceLocatorStatusType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMEssenceLocatorStatusType(soap, n, NULL, NULL, NULL); }

inline fims__BMEssenceLocatorStatusType * soap_new_req_fims__BMEssenceLocatorStatusType(struct soap *soap, enum fims__BMStatusType status, std::wstring& resourceID2) { fims__BMEssenceLocatorStatusType *_p = soap_instantiate_fims__BMEssenceLocatorStatusType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorStatusType::status = status; _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__BMEssenceLocatorStatusType * soap_new_set_fims__BMEssenceLocatorStatusType(struct soap *soap, enum fims__BMStatusType status, fims__BMCustomStatusExtensionType *subStatus, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__BMEssenceLocatorStatusType *_p = soap_instantiate_fims__BMEssenceLocatorStatusType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorStatusType::status = status; _p->fims__BMEssenceLocatorStatusType::subStatus = subStatus; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__BMEssenceLocatorStatusType(struct soap *soap, fims__BMEssenceLocatorStatusType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMEssenceLocatorStatusType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMContentStatusesType
#define SOAP_TYPE_fims__BMContentStatusesType (128)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMContentStatusesType(struct soap*, const char*, int, const fims__BMContentStatusesType *, const char*);
SOAP_FMAC3 fims__BMContentStatusesType * SOAP_FMAC4 soap_in_fims__BMContentStatusesType(struct soap*, const char*, fims__BMContentStatusesType *, const char*);

#ifndef soap_write_fims__BMContentStatusesType
#define soap_write_fims__BMContentStatusesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMContentStatusesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentStatusesType * SOAP_FMAC4 soap_get_fims__BMContentStatusesType(struct soap*, fims__BMContentStatusesType *, const char*, const char*);

#ifndef soap_read_fims__BMContentStatusesType
#define soap_read_fims__BMContentStatusesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMContentStatusesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMContentStatusesType * SOAP_FMAC2 soap_instantiate_fims__BMContentStatusesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMContentStatusesType * soap_new_fims__BMContentStatusesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMContentStatusesType(soap, n, NULL, NULL, NULL); }

inline fims__BMContentStatusesType * soap_new_req_fims__BMContentStatusesType(struct soap *soap, std::vector<fims__BMContentStatusType * >& bmContentStatus) { fims__BMContentStatusesType *_p = soap_instantiate_fims__BMContentStatusesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentStatusesType::bmContentStatus = bmContentStatus; } return _p; }

inline fims__BMContentStatusesType * soap_new_set_fims__BMContentStatusesType(struct soap *soap, std::vector<fims__BMContentStatusType * >& bmContentStatus, std::vector<char * >& __any, char *__anyAttribute) { fims__BMContentStatusesType *_p = soap_instantiate_fims__BMContentStatusesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentStatusesType::bmContentStatus = bmContentStatus; _p->fims__BMContentStatusesType::__any = __any; _p->fims__BMContentStatusesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__BMContentStatusesType(struct soap *soap, fims__BMContentStatusesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMContentStatusesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMContentStatusType
#define SOAP_TYPE_fims__BMContentStatusType (127)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMContentStatusType(struct soap*, const char*, int, const fims__BMContentStatusType *, const char*);
SOAP_FMAC3 fims__BMContentStatusType * SOAP_FMAC4 soap_in_fims__BMContentStatusType(struct soap*, const char*, fims__BMContentStatusType *, const char*);

#ifndef soap_write_fims__BMContentStatusType
#define soap_write_fims__BMContentStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMContentStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentStatusType * SOAP_FMAC4 soap_get_fims__BMContentStatusType(struct soap*, fims__BMContentStatusType *, const char*, const char*);

#ifndef soap_read_fims__BMContentStatusType
#define soap_read_fims__BMContentStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMContentStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMContentStatusType * SOAP_FMAC2 soap_instantiate_fims__BMContentStatusType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMContentStatusType * soap_new_fims__BMContentStatusType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMContentStatusType(soap, n, NULL, NULL, NULL); }

inline fims__BMContentStatusType * soap_new_req_fims__BMContentStatusType(struct soap *soap, enum fims__BMStatusType status, std::wstring& resourceID2) { fims__BMContentStatusType *_p = soap_instantiate_fims__BMContentStatusType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentStatusType::status = status; _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__BMContentStatusType * soap_new_set_fims__BMContentStatusType(struct soap *soap, enum fims__BMStatusType status, fims__BMCustomStatusExtensionType *subStatus, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__BMContentStatusType *_p = soap_instantiate_fims__BMContentStatusType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentStatusType::status = status; _p->fims__BMContentStatusType::subStatus = subStatus; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__BMContentStatusType(struct soap *soap, fims__BMContentStatusType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMContentStatusType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMCustomStatusExtensionsType
#define SOAP_TYPE_fims__BMCustomStatusExtensionsType (126)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMCustomStatusExtensionsType(struct soap*, const char*, int, const fims__BMCustomStatusExtensionsType *, const char*);
SOAP_FMAC3 fims__BMCustomStatusExtensionsType * SOAP_FMAC4 soap_in_fims__BMCustomStatusExtensionsType(struct soap*, const char*, fims__BMCustomStatusExtensionsType *, const char*);

#ifndef soap_write_fims__BMCustomStatusExtensionsType
#define soap_write_fims__BMCustomStatusExtensionsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMCustomStatusExtensionsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMCustomStatusExtensionsType * SOAP_FMAC4 soap_get_fims__BMCustomStatusExtensionsType(struct soap*, fims__BMCustomStatusExtensionsType *, const char*, const char*);

#ifndef soap_read_fims__BMCustomStatusExtensionsType
#define soap_read_fims__BMCustomStatusExtensionsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMCustomStatusExtensionsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMCustomStatusExtensionsType * SOAP_FMAC2 soap_instantiate_fims__BMCustomStatusExtensionsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMCustomStatusExtensionsType * soap_new_fims__BMCustomStatusExtensionsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMCustomStatusExtensionsType(soap, n, NULL, NULL, NULL); }

inline fims__BMCustomStatusExtensionsType * soap_new_req_fims__BMCustomStatusExtensionsType(struct soap *soap, std::vector<fims__BMCustomStatusExtensionType * >& bmCustomStatusExtension) { fims__BMCustomStatusExtensionsType *_p = soap_instantiate_fims__BMCustomStatusExtensionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMCustomStatusExtensionsType::bmCustomStatusExtension = bmCustomStatusExtension; } return _p; }

inline fims__BMCustomStatusExtensionsType * soap_new_set_fims__BMCustomStatusExtensionsType(struct soap *soap, std::vector<fims__BMCustomStatusExtensionType * >& bmCustomStatusExtension, std::vector<char * >& __any, char *__anyAttribute) { fims__BMCustomStatusExtensionsType *_p = soap_instantiate_fims__BMCustomStatusExtensionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMCustomStatusExtensionsType::bmCustomStatusExtension = bmCustomStatusExtension; _p->fims__BMCustomStatusExtensionsType::__any = __any; _p->fims__BMCustomStatusExtensionsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__BMCustomStatusExtensionsType(struct soap *soap, fims__BMCustomStatusExtensionsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMCustomStatusExtensionsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMCustomStatusExtensionType
#define SOAP_TYPE_fims__BMCustomStatusExtensionType (125)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMCustomStatusExtensionType(struct soap*, const char*, int, const fims__BMCustomStatusExtensionType *, const char*);
SOAP_FMAC3 fims__BMCustomStatusExtensionType * SOAP_FMAC4 soap_in_fims__BMCustomStatusExtensionType(struct soap*, const char*, fims__BMCustomStatusExtensionType *, const char*);

#ifndef soap_write_fims__BMCustomStatusExtensionType
#define soap_write_fims__BMCustomStatusExtensionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMCustomStatusExtensionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMCustomStatusExtensionType * SOAP_FMAC4 soap_get_fims__BMCustomStatusExtensionType(struct soap*, fims__BMCustomStatusExtensionType *, const char*, const char*);

#ifndef soap_read_fims__BMCustomStatusExtensionType
#define soap_read_fims__BMCustomStatusExtensionType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMCustomStatusExtensionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMCustomStatusExtensionType * SOAP_FMAC2 soap_instantiate_fims__BMCustomStatusExtensionType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMCustomStatusExtensionType * soap_new_fims__BMCustomStatusExtensionType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMCustomStatusExtensionType(soap, n, NULL, NULL, NULL); }

inline fims__BMCustomStatusExtensionType * soap_new_req_fims__BMCustomStatusExtensionType(struct soap *soap, std::wstring& code, std::wstring& resourceID2) { fims__BMCustomStatusExtensionType *_p = soap_instantiate_fims__BMCustomStatusExtensionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMCustomStatusExtensionType::code = code; _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__BMCustomStatusExtensionType * soap_new_set_fims__BMCustomStatusExtensionType(struct soap *soap, std::wstring& code, std::wstring *description, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__BMCustomStatusExtensionType *_p = soap_instantiate_fims__BMCustomStatusExtensionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMCustomStatusExtensionType::code = code; _p->fims__BMCustomStatusExtensionType::description = description; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__BMCustomStatusExtensionType(struct soap *soap, fims__BMCustomStatusExtensionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMCustomStatusExtensionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomValuesType
#define SOAP_TYPE_fims__CustomValuesType (124)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomValuesType(struct soap*, const char*, int, const fims__CustomValuesType *, const char*);
SOAP_FMAC3 fims__CustomValuesType * SOAP_FMAC4 soap_in_fims__CustomValuesType(struct soap*, const char*, fims__CustomValuesType *, const char*);

#ifndef soap_write_fims__CustomValuesType
#define soap_write_fims__CustomValuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomValuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomValuesType * SOAP_FMAC4 soap_get_fims__CustomValuesType(struct soap*, fims__CustomValuesType *, const char*, const char*);

#ifndef soap_read_fims__CustomValuesType
#define soap_read_fims__CustomValuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomValuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomValuesType * SOAP_FMAC2 soap_instantiate_fims__CustomValuesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomValuesType * soap_new_fims__CustomValuesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomValuesType(soap, n, NULL, NULL, NULL); }

inline fims__CustomValuesType * soap_new_req_fims__CustomValuesType(struct soap *soap, std::vector<fims__CustomValueType * >& customValue) { fims__CustomValuesType *_p = soap_instantiate_fims__CustomValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomValuesType::customValue = customValue; } return _p; }

inline fims__CustomValuesType * soap_new_set_fims__CustomValuesType(struct soap *soap, std::vector<fims__CustomValueType * >& customValue, std::vector<char * >& __any, char *__anyAttribute) { fims__CustomValuesType *_p = soap_instantiate_fims__CustomValuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CustomValuesType::customValue = customValue; _p->fims__CustomValuesType::__any = __any; _p->fims__CustomValuesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__CustomValuesType(struct soap *soap, fims__CustomValuesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomValuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CustomValueType
#define SOAP_TYPE_fims__CustomValueType (123)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CustomValueType(struct soap*, const char*, int, const fims__CustomValueType *, const char*);
SOAP_FMAC3 fims__CustomValueType * SOAP_FMAC4 soap_in_fims__CustomValueType(struct soap*, const char*, fims__CustomValueType *, const char*);

#ifndef soap_write_fims__CustomValueType
#define soap_write_fims__CustomValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CustomValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomValueType * SOAP_FMAC4 soap_get_fims__CustomValueType(struct soap*, fims__CustomValueType *, const char*, const char*);

#ifndef soap_read_fims__CustomValueType
#define soap_read_fims__CustomValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CustomValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CustomValueType * SOAP_FMAC2 soap_instantiate_fims__CustomValueType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CustomValueType * soap_new_fims__CustomValueType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CustomValueType(soap, n, NULL, NULL, NULL); }

inline fims__CustomValueType * soap_new_req_fims__CustomValueType(struct soap *soap) { fims__CustomValueType *_p = soap_instantiate_fims__CustomValueType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__CustomValueType * soap_new_set_fims__CustomValueType(struct soap *soap) { fims__CustomValueType *_p = soap_instantiate_fims__CustomValueType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__CustomValueType(struct soap *soap, fims__CustomValueType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CustomValueType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ResourceReferencesType
#define SOAP_TYPE_fims__ResourceReferencesType (122)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ResourceReferencesType(struct soap*, const char*, int, const fims__ResourceReferencesType *, const char*);
SOAP_FMAC3 fims__ResourceReferencesType * SOAP_FMAC4 soap_in_fims__ResourceReferencesType(struct soap*, const char*, fims__ResourceReferencesType *, const char*);

#ifndef soap_write_fims__ResourceReferencesType
#define soap_write_fims__ResourceReferencesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ResourceReferencesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ResourceReferencesType * SOAP_FMAC4 soap_get_fims__ResourceReferencesType(struct soap*, fims__ResourceReferencesType *, const char*, const char*);

#ifndef soap_read_fims__ResourceReferencesType
#define soap_read_fims__ResourceReferencesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ResourceReferencesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ResourceReferencesType * SOAP_FMAC2 soap_instantiate_fims__ResourceReferencesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ResourceReferencesType * soap_new_fims__ResourceReferencesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ResourceReferencesType(soap, n, NULL, NULL, NULL); }

inline fims__ResourceReferencesType * soap_new_req_fims__ResourceReferencesType(struct soap *soap, std::vector<fims__ResourceReferenceType * >& resourceReference) { fims__ResourceReferencesType *_p = soap_instantiate_fims__ResourceReferencesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferencesType::resourceReference = resourceReference; } return _p; }

inline fims__ResourceReferencesType * soap_new_set_fims__ResourceReferencesType(struct soap *soap, std::vector<fims__ResourceReferenceType * >& resourceReference, std::vector<char * >& __any, char *__anyAttribute) { fims__ResourceReferencesType *_p = soap_instantiate_fims__ResourceReferencesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferencesType::resourceReference = resourceReference; _p->fims__ResourceReferencesType::__any = __any; _p->fims__ResourceReferencesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ResourceReferencesType(struct soap *soap, fims__ResourceReferencesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ResourceReferencesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__DescriptionsType
#define SOAP_TYPE_fims__DescriptionsType (121)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__DescriptionsType(struct soap*, const char*, int, const fims__DescriptionsType *, const char*);
SOAP_FMAC3 fims__DescriptionsType * SOAP_FMAC4 soap_in_fims__DescriptionsType(struct soap*, const char*, fims__DescriptionsType *, const char*);

#ifndef soap_write_fims__DescriptionsType
#define soap_write_fims__DescriptionsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:DescriptionsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__DescriptionsType * SOAP_FMAC4 soap_get_fims__DescriptionsType(struct soap*, fims__DescriptionsType *, const char*, const char*);

#ifndef soap_read_fims__DescriptionsType
#define soap_read_fims__DescriptionsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__DescriptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__DescriptionsType * SOAP_FMAC2 soap_instantiate_fims__DescriptionsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__DescriptionsType * soap_new_fims__DescriptionsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__DescriptionsType(soap, n, NULL, NULL, NULL); }

inline fims__DescriptionsType * soap_new_req_fims__DescriptionsType(struct soap *soap, std::vector<fims__DescriptionType * >& description) { fims__DescriptionsType *_p = soap_instantiate_fims__DescriptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__DescriptionsType::description = description; } return _p; }

inline fims__DescriptionsType * soap_new_set_fims__DescriptionsType(struct soap *soap, std::vector<fims__DescriptionType * >& description, std::vector<char * >& __any, char *__anyAttribute) { fims__DescriptionsType *_p = soap_instantiate_fims__DescriptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__DescriptionsType::description = description; _p->fims__DescriptionsType::__any = __any; _p->fims__DescriptionsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__DescriptionsType(struct soap *soap, fims__DescriptionsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__DescriptionsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMEssenceLocatorsType
#define SOAP_TYPE_fims__BMEssenceLocatorsType (120)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMEssenceLocatorsType(struct soap*, const char*, int, const fims__BMEssenceLocatorsType *, const char*);
SOAP_FMAC3 fims__BMEssenceLocatorsType * SOAP_FMAC4 soap_in_fims__BMEssenceLocatorsType(struct soap*, const char*, fims__BMEssenceLocatorsType *, const char*);

#ifndef soap_write_fims__BMEssenceLocatorsType
#define soap_write_fims__BMEssenceLocatorsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMEssenceLocatorsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMEssenceLocatorsType * SOAP_FMAC4 soap_get_fims__BMEssenceLocatorsType(struct soap*, fims__BMEssenceLocatorsType *, const char*, const char*);

#ifndef soap_read_fims__BMEssenceLocatorsType
#define soap_read_fims__BMEssenceLocatorsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMEssenceLocatorsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMEssenceLocatorsType * SOAP_FMAC2 soap_instantiate_fims__BMEssenceLocatorsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMEssenceLocatorsType * soap_new_fims__BMEssenceLocatorsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMEssenceLocatorsType(soap, n, NULL, NULL, NULL); }

inline fims__BMEssenceLocatorsType * soap_new_req_fims__BMEssenceLocatorsType(struct soap *soap, std::vector<fims__BMEssenceLocatorType * >& bmEssenceLocator) { fims__BMEssenceLocatorsType *_p = soap_instantiate_fims__BMEssenceLocatorsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorsType::bmEssenceLocator = bmEssenceLocator; } return _p; }

inline fims__BMEssenceLocatorsType * soap_new_set_fims__BMEssenceLocatorsType(struct soap *soap, std::vector<fims__BMEssenceLocatorType * >& bmEssenceLocator, std::vector<char * >& __any, char *__anyAttribute) { fims__BMEssenceLocatorsType *_p = soap_instantiate_fims__BMEssenceLocatorsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorsType::bmEssenceLocator = bmEssenceLocator; _p->fims__BMEssenceLocatorsType::__any = __any; _p->fims__BMEssenceLocatorsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__BMEssenceLocatorsType(struct soap *soap, fims__BMEssenceLocatorsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMEssenceLocatorsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMContentFormatsType
#define SOAP_TYPE_fims__BMContentFormatsType (119)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMContentFormatsType(struct soap*, const char*, int, const fims__BMContentFormatsType *, const char*);
SOAP_FMAC3 fims__BMContentFormatsType * SOAP_FMAC4 soap_in_fims__BMContentFormatsType(struct soap*, const char*, fims__BMContentFormatsType *, const char*);

#ifndef soap_write_fims__BMContentFormatsType
#define soap_write_fims__BMContentFormatsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMContentFormatsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentFormatsType * SOAP_FMAC4 soap_get_fims__BMContentFormatsType(struct soap*, fims__BMContentFormatsType *, const char*, const char*);

#ifndef soap_read_fims__BMContentFormatsType
#define soap_read_fims__BMContentFormatsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMContentFormatsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMContentFormatsType * SOAP_FMAC2 soap_instantiate_fims__BMContentFormatsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMContentFormatsType * soap_new_fims__BMContentFormatsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMContentFormatsType(soap, n, NULL, NULL, NULL); }

inline fims__BMContentFormatsType * soap_new_req_fims__BMContentFormatsType(struct soap *soap, std::vector<fims__BMContentFormatType * >& bmContentFormat) { fims__BMContentFormatsType *_p = soap_instantiate_fims__BMContentFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentFormatsType::bmContentFormat = bmContentFormat; } return _p; }

inline fims__BMContentFormatsType * soap_new_set_fims__BMContentFormatsType(struct soap *soap, std::vector<fims__BMContentFormatType * >& bmContentFormat, std::vector<char * >& __any, char *__anyAttribute) { fims__BMContentFormatsType *_p = soap_instantiate_fims__BMContentFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentFormatsType::bmContentFormat = bmContentFormat; _p->fims__BMContentFormatsType::__any = __any; _p->fims__BMContentFormatsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__BMContentFormatsType(struct soap *soap, fims__BMContentFormatsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMContentFormatsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMContentsType
#define SOAP_TYPE_fims__BMContentsType (118)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMContentsType(struct soap*, const char*, int, const fims__BMContentsType *, const char*);
SOAP_FMAC3 fims__BMContentsType * SOAP_FMAC4 soap_in_fims__BMContentsType(struct soap*, const char*, fims__BMContentsType *, const char*);

#ifndef soap_write_fims__BMContentsType
#define soap_write_fims__BMContentsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMContentsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentsType * SOAP_FMAC4 soap_get_fims__BMContentsType(struct soap*, fims__BMContentsType *, const char*, const char*);

#ifndef soap_read_fims__BMContentsType
#define soap_read_fims__BMContentsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMContentsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMContentsType * SOAP_FMAC2 soap_instantiate_fims__BMContentsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMContentsType * soap_new_fims__BMContentsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMContentsType(soap, n, NULL, NULL, NULL); }

inline fims__BMContentsType * soap_new_req_fims__BMContentsType(struct soap *soap, std::vector<fims__BMContentType * >& bmContent) { fims__BMContentsType *_p = soap_instantiate_fims__BMContentsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentsType::bmContent = bmContent; } return _p; }

inline fims__BMContentsType * soap_new_set_fims__BMContentsType(struct soap *soap, std::vector<fims__BMContentType * >& bmContent, std::vector<char * >& __any, char *__anyAttribute) { fims__BMContentsType *_p = soap_instantiate_fims__BMContentsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentsType::bmContent = bmContent; _p->fims__BMContentsType::__any = __any; _p->fims__BMContentsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__BMContentsType(struct soap *soap, fims__BMContentsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMContentsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMObjectsType
#define SOAP_TYPE_fims__BMObjectsType (117)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMObjectsType(struct soap*, const char*, int, const fims__BMObjectsType *, const char*);
SOAP_FMAC3 fims__BMObjectsType * SOAP_FMAC4 soap_in_fims__BMObjectsType(struct soap*, const char*, fims__BMObjectsType *, const char*);

#ifndef soap_write_fims__BMObjectsType
#define soap_write_fims__BMObjectsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMObjectsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMObjectsType * SOAP_FMAC4 soap_get_fims__BMObjectsType(struct soap*, fims__BMObjectsType *, const char*, const char*);

#ifndef soap_read_fims__BMObjectsType
#define soap_read_fims__BMObjectsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMObjectsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMObjectsType * SOAP_FMAC2 soap_instantiate_fims__BMObjectsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMObjectsType * soap_new_fims__BMObjectsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMObjectsType(soap, n, NULL, NULL, NULL); }

inline fims__BMObjectsType * soap_new_req_fims__BMObjectsType(struct soap *soap, std::vector<fims__BMObjectType * >& bmObject) { fims__BMObjectsType *_p = soap_instantiate_fims__BMObjectsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMObjectsType::bmObject = bmObject; } return _p; }

inline fims__BMObjectsType * soap_new_set_fims__BMObjectsType(struct soap *soap, std::vector<fims__BMObjectType * >& bmObject, std::vector<char * >& __any, char *__anyAttribute) { fims__BMObjectsType *_p = soap_instantiate_fims__BMObjectsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMObjectsType::bmObject = bmObject; _p->fims__BMObjectsType::__any = __any; _p->fims__BMObjectsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__BMObjectsType(struct soap *soap, fims__BMObjectsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMObjectsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__DataFormatsType
#define SOAP_TYPE_fims__DataFormatsType (116)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__DataFormatsType(struct soap*, const char*, int, const fims__DataFormatsType *, const char*);
SOAP_FMAC3 fims__DataFormatsType * SOAP_FMAC4 soap_in_fims__DataFormatsType(struct soap*, const char*, fims__DataFormatsType *, const char*);

#ifndef soap_write_fims__DataFormatsType
#define soap_write_fims__DataFormatsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:DataFormatsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__DataFormatsType * SOAP_FMAC4 soap_get_fims__DataFormatsType(struct soap*, fims__DataFormatsType *, const char*, const char*);

#ifndef soap_read_fims__DataFormatsType
#define soap_read_fims__DataFormatsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__DataFormatsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__DataFormatsType * SOAP_FMAC2 soap_instantiate_fims__DataFormatsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__DataFormatsType * soap_new_fims__DataFormatsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__DataFormatsType(soap, n, NULL, NULL, NULL); }

inline fims__DataFormatsType * soap_new_req_fims__DataFormatsType(struct soap *soap, std::vector<fims__DataFormatType * >& dataFormat) { fims__DataFormatsType *_p = soap_instantiate_fims__DataFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__DataFormatsType::dataFormat = dataFormat; } return _p; }

inline fims__DataFormatsType * soap_new_set_fims__DataFormatsType(struct soap *soap, std::vector<fims__DataFormatType * >& dataFormat, std::vector<char * >& __any, char *__anyAttribute) { fims__DataFormatsType *_p = soap_instantiate_fims__DataFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__DataFormatsType::dataFormat = dataFormat; _p->fims__DataFormatsType::__any = __any; _p->fims__DataFormatsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__DataFormatsType(struct soap *soap, fims__DataFormatsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__DataFormatsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContainerFormatsType
#define SOAP_TYPE_fims__ContainerFormatsType (115)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContainerFormatsType(struct soap*, const char*, int, const fims__ContainerFormatsType *, const char*);
SOAP_FMAC3 fims__ContainerFormatsType * SOAP_FMAC4 soap_in_fims__ContainerFormatsType(struct soap*, const char*, fims__ContainerFormatsType *, const char*);

#ifndef soap_write_fims__ContainerFormatsType
#define soap_write_fims__ContainerFormatsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContainerFormatsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContainerFormatsType * SOAP_FMAC4 soap_get_fims__ContainerFormatsType(struct soap*, fims__ContainerFormatsType *, const char*, const char*);

#ifndef soap_read_fims__ContainerFormatsType
#define soap_read_fims__ContainerFormatsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContainerFormatsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContainerFormatsType * SOAP_FMAC2 soap_instantiate_fims__ContainerFormatsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContainerFormatsType * soap_new_fims__ContainerFormatsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContainerFormatsType(soap, n, NULL, NULL, NULL); }

inline fims__ContainerFormatsType * soap_new_req_fims__ContainerFormatsType(struct soap *soap, std::vector<fims__ContainerFormatType * >& containerFormat) { fims__ContainerFormatsType *_p = soap_instantiate_fims__ContainerFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContainerFormatsType::containerFormat = containerFormat; } return _p; }

inline fims__ContainerFormatsType * soap_new_set_fims__ContainerFormatsType(struct soap *soap, std::vector<fims__ContainerFormatType * >& containerFormat, std::vector<char * >& __any, char *__anyAttribute) { fims__ContainerFormatsType *_p = soap_instantiate_fims__ContainerFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContainerFormatsType::containerFormat = containerFormat; _p->fims__ContainerFormatsType::__any = __any; _p->fims__ContainerFormatsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ContainerFormatsType(struct soap *soap, fims__ContainerFormatsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContainerFormatsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__AudioFormatsType
#define SOAP_TYPE_fims__AudioFormatsType (114)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__AudioFormatsType(struct soap*, const char*, int, const fims__AudioFormatsType *, const char*);
SOAP_FMAC3 fims__AudioFormatsType * SOAP_FMAC4 soap_in_fims__AudioFormatsType(struct soap*, const char*, fims__AudioFormatsType *, const char*);

#ifndef soap_write_fims__AudioFormatsType
#define soap_write_fims__AudioFormatsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:AudioFormatsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__AudioFormatsType * SOAP_FMAC4 soap_get_fims__AudioFormatsType(struct soap*, fims__AudioFormatsType *, const char*, const char*);

#ifndef soap_read_fims__AudioFormatsType
#define soap_read_fims__AudioFormatsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__AudioFormatsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__AudioFormatsType * SOAP_FMAC2 soap_instantiate_fims__AudioFormatsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__AudioFormatsType * soap_new_fims__AudioFormatsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__AudioFormatsType(soap, n, NULL, NULL, NULL); }

inline fims__AudioFormatsType * soap_new_req_fims__AudioFormatsType(struct soap *soap, std::vector<fims__AudioFormatType * >& audioFormat) { fims__AudioFormatsType *_p = soap_instantiate_fims__AudioFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__AudioFormatsType::audioFormat = audioFormat; } return _p; }

inline fims__AudioFormatsType * soap_new_set_fims__AudioFormatsType(struct soap *soap, std::vector<fims__AudioFormatType * >& audioFormat, std::vector<char * >& __any, char *__anyAttribute) { fims__AudioFormatsType *_p = soap_instantiate_fims__AudioFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__AudioFormatsType::audioFormat = audioFormat; _p->fims__AudioFormatsType::__any = __any; _p->fims__AudioFormatsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__AudioFormatsType(struct soap *soap, fims__AudioFormatsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__AudioFormatsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__VideoFormatsType
#define SOAP_TYPE_fims__VideoFormatsType (113)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__VideoFormatsType(struct soap*, const char*, int, const fims__VideoFormatsType *, const char*);
SOAP_FMAC3 fims__VideoFormatsType * SOAP_FMAC4 soap_in_fims__VideoFormatsType(struct soap*, const char*, fims__VideoFormatsType *, const char*);

#ifndef soap_write_fims__VideoFormatsType
#define soap_write_fims__VideoFormatsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:VideoFormatsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__VideoFormatsType * SOAP_FMAC4 soap_get_fims__VideoFormatsType(struct soap*, fims__VideoFormatsType *, const char*, const char*);

#ifndef soap_read_fims__VideoFormatsType
#define soap_read_fims__VideoFormatsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__VideoFormatsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__VideoFormatsType * SOAP_FMAC2 soap_instantiate_fims__VideoFormatsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__VideoFormatsType * soap_new_fims__VideoFormatsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__VideoFormatsType(soap, n, NULL, NULL, NULL); }

inline fims__VideoFormatsType * soap_new_req_fims__VideoFormatsType(struct soap *soap, std::vector<fims__VideoFormatType * >& videoFormat) { fims__VideoFormatsType *_p = soap_instantiate_fims__VideoFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__VideoFormatsType::videoFormat = videoFormat; } return _p; }

inline fims__VideoFormatsType * soap_new_set_fims__VideoFormatsType(struct soap *soap, std::vector<fims__VideoFormatType * >& videoFormat, std::vector<char * >& __any, char *__anyAttribute) { fims__VideoFormatsType *_p = soap_instantiate_fims__VideoFormatsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__VideoFormatsType::videoFormat = videoFormat; _p->fims__VideoFormatsType::__any = __any; _p->fims__VideoFormatsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__VideoFormatsType(struct soap *soap, fims__VideoFormatsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__VideoFormatsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__JobsType
#define SOAP_TYPE_fims__JobsType (112)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__JobsType(struct soap*, const char*, int, const fims__JobsType *, const char*);
SOAP_FMAC3 fims__JobsType * SOAP_FMAC4 soap_in_fims__JobsType(struct soap*, const char*, fims__JobsType *, const char*);

#ifndef soap_write_fims__JobsType
#define soap_write_fims__JobsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:JobsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__JobsType * SOAP_FMAC4 soap_get_fims__JobsType(struct soap*, fims__JobsType *, const char*, const char*);

#ifndef soap_read_fims__JobsType
#define soap_read_fims__JobsType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__JobsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__JobsType * SOAP_FMAC2 soap_instantiate_fims__JobsType(struct soap*, int, const char*, const char*, size_t*);

inline fims__JobsType * soap_new_fims__JobsType(struct soap *soap, int n = -1) { return soap_instantiate_fims__JobsType(soap, n, NULL, NULL, NULL); }

inline fims__JobsType * soap_new_req_fims__JobsType(struct soap *soap, std::vector<fims__JobType * >& job) { fims__JobsType *_p = soap_instantiate_fims__JobsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__JobsType::job = job; } return _p; }

inline fims__JobsType * soap_new_set_fims__JobsType(struct soap *soap, std::vector<fims__JobType * >& job, std::vector<char * >& __any, char *__anyAttribute) { fims__JobsType *_p = soap_instantiate_fims__JobsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__JobsType::job = job; _p->fims__JobsType::__any = __any; _p->fims__JobsType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__JobsType(struct soap *soap, fims__JobsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__JobsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueuesType
#define SOAP_TYPE_fims__QueuesType (111)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueuesType(struct soap*, const char*, int, const fims__QueuesType *, const char*);
SOAP_FMAC3 fims__QueuesType * SOAP_FMAC4 soap_in_fims__QueuesType(struct soap*, const char*, fims__QueuesType *, const char*);

#ifndef soap_write_fims__QueuesType
#define soap_write_fims__QueuesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueuesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueuesType * SOAP_FMAC4 soap_get_fims__QueuesType(struct soap*, fims__QueuesType *, const char*, const char*);

#ifndef soap_read_fims__QueuesType
#define soap_read_fims__QueuesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueuesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueuesType * SOAP_FMAC2 soap_instantiate_fims__QueuesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueuesType * soap_new_fims__QueuesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueuesType(soap, n, NULL, NULL, NULL); }

inline fims__QueuesType * soap_new_req_fims__QueuesType(struct soap *soap, std::vector<fims__QueueType * >& queue) { fims__QueuesType *_p = soap_instantiate_fims__QueuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueuesType::queue = queue; } return _p; }

inline fims__QueuesType * soap_new_set_fims__QueuesType(struct soap *soap, std::vector<fims__QueueType * >& queue, std::vector<char * >& __any, char *__anyAttribute) { fims__QueuesType *_p = soap_instantiate_fims__QueuesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueuesType::queue = queue; _p->fims__QueuesType::__any = __any; _p->fims__QueuesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__QueuesType(struct soap *soap, fims__QueuesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueuesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ServicesType
#define SOAP_TYPE_fims__ServicesType (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ServicesType(struct soap*, const char*, int, const fims__ServicesType *, const char*);
SOAP_FMAC3 fims__ServicesType * SOAP_FMAC4 soap_in_fims__ServicesType(struct soap*, const char*, fims__ServicesType *, const char*);

#ifndef soap_write_fims__ServicesType
#define soap_write_fims__ServicesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ServicesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ServicesType * SOAP_FMAC4 soap_get_fims__ServicesType(struct soap*, fims__ServicesType *, const char*, const char*);

#ifndef soap_read_fims__ServicesType
#define soap_read_fims__ServicesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ServicesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ServicesType * SOAP_FMAC2 soap_instantiate_fims__ServicesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ServicesType * soap_new_fims__ServicesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ServicesType(soap, n, NULL, NULL, NULL); }

inline fims__ServicesType * soap_new_req_fims__ServicesType(struct soap *soap, std::vector<fims__ServiceType * >& service) { fims__ServicesType *_p = soap_instantiate_fims__ServicesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ServicesType::service = service; } return _p; }

inline fims__ServicesType * soap_new_set_fims__ServicesType(struct soap *soap, std::vector<fims__ServiceType * >& service, std::vector<char * >& __any, char *__anyAttribute) { fims__ServicesType *_p = soap_instantiate_fims__ServicesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ServicesType::service = service; _p->fims__ServicesType::__any = __any; _p->fims__ServicesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ServicesType(struct soap *soap, fims__ServicesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ServicesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ProfilesType
#define SOAP_TYPE_fims__ProfilesType (109)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ProfilesType(struct soap*, const char*, int, const fims__ProfilesType *, const char*);
SOAP_FMAC3 fims__ProfilesType * SOAP_FMAC4 soap_in_fims__ProfilesType(struct soap*, const char*, fims__ProfilesType *, const char*);

#ifndef soap_write_fims__ProfilesType
#define soap_write_fims__ProfilesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ProfilesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ProfilesType * SOAP_FMAC4 soap_get_fims__ProfilesType(struct soap*, fims__ProfilesType *, const char*, const char*);

#ifndef soap_read_fims__ProfilesType
#define soap_read_fims__ProfilesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ProfilesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ProfilesType * SOAP_FMAC2 soap_instantiate_fims__ProfilesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ProfilesType * soap_new_fims__ProfilesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ProfilesType(soap, n, NULL, NULL, NULL); }

inline fims__ProfilesType * soap_new_req_fims__ProfilesType(struct soap *soap, std::vector<fims__ProfileType * >& profile) { fims__ProfilesType *_p = soap_instantiate_fims__ProfilesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProfilesType::profile = profile; } return _p; }

inline fims__ProfilesType * soap_new_set_fims__ProfilesType(struct soap *soap, std::vector<fims__ProfileType * >& profile, std::vector<char * >& __any, char *__anyAttribute) { fims__ProfilesType *_p = soap_instantiate_fims__ProfilesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProfilesType::profile = profile; _p->fims__ProfilesType::__any = __any; _p->fims__ProfilesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ProfilesType(struct soap *soap, fims__ProfilesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ProfilesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ResourcesType
#define SOAP_TYPE_fims__ResourcesType (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ResourcesType(struct soap*, const char*, int, const fims__ResourcesType *, const char*);
SOAP_FMAC3 fims__ResourcesType * SOAP_FMAC4 soap_in_fims__ResourcesType(struct soap*, const char*, fims__ResourcesType *, const char*);

#ifndef soap_write_fims__ResourcesType
#define soap_write_fims__ResourcesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ResourcesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ResourcesType * SOAP_FMAC4 soap_get_fims__ResourcesType(struct soap*, fims__ResourcesType *, const char*, const char*);

#ifndef soap_read_fims__ResourcesType
#define soap_read_fims__ResourcesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ResourcesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ResourcesType * SOAP_FMAC2 soap_instantiate_fims__ResourcesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ResourcesType * soap_new_fims__ResourcesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ResourcesType(soap, n, NULL, NULL, NULL); }

inline fims__ResourcesType * soap_new_req_fims__ResourcesType(struct soap *soap, std::vector<fims__ResourceType * >& resource) { fims__ResourcesType *_p = soap_instantiate_fims__ResourcesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourcesType::resource = resource; } return _p; }

inline fims__ResourcesType * soap_new_set_fims__ResourcesType(struct soap *soap, std::vector<fims__ResourceType * >& resource, std::vector<char * >& __any, char *__anyAttribute) { fims__ResourcesType *_p = soap_instantiate_fims__ResourcesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourcesType::resource = resource; _p->fims__ResourcesType::__any = __any; _p->fims__ResourcesType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ResourcesType(struct soap *soap, fims__ResourcesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ResourcesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__InnerFaultType
#define SOAP_TYPE_fims__InnerFaultType (107)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__InnerFaultType(struct soap*, const char*, int, const fims__InnerFaultType *, const char*);
SOAP_FMAC3 fims__InnerFaultType * SOAP_FMAC4 soap_in_fims__InnerFaultType(struct soap*, const char*, fims__InnerFaultType *, const char*);

#ifndef soap_write_fims__InnerFaultType
#define soap_write_fims__InnerFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:InnerFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__InnerFaultType * SOAP_FMAC4 soap_get_fims__InnerFaultType(struct soap*, fims__InnerFaultType *, const char*, const char*);

#ifndef soap_read_fims__InnerFaultType
#define soap_read_fims__InnerFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__InnerFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__InnerFaultType * SOAP_FMAC2 soap_instantiate_fims__InnerFaultType(struct soap*, int, const char*, const char*, size_t*);

inline fims__InnerFaultType * soap_new_fims__InnerFaultType(struct soap *soap, int n = -1) { return soap_instantiate_fims__InnerFaultType(soap, n, NULL, NULL, NULL); }

inline fims__InnerFaultType * soap_new_req_fims__InnerFaultType(struct soap *soap, std::wstring& code) { fims__InnerFaultType *_p = soap_instantiate_fims__InnerFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__InnerFaultType::code = code; } return _p; }

inline fims__InnerFaultType * soap_new_set_fims__InnerFaultType(struct soap *soap, std::wstring& code, std::wstring *description, std::wstring *detail) { fims__InnerFaultType *_p = soap_instantiate_fims__InnerFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__InnerFaultType::code = code; _p->fims__InnerFaultType::description = description; _p->fims__InnerFaultType::detail = detail; } return _p; }

inline void soap_delete_fims__InnerFaultType(struct soap *soap, fims__InnerFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__InnerFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__FaultType
#define SOAP_TYPE_fims__FaultType (106)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__FaultType(struct soap*, const char*, int, const fims__FaultType *, const char*);
SOAP_FMAC3 fims__FaultType * SOAP_FMAC4 soap_in_fims__FaultType(struct soap*, const char*, fims__FaultType *, const char*);

#ifndef soap_write_fims__FaultType
#define soap_write_fims__FaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:FaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__FaultType * SOAP_FMAC4 soap_get_fims__FaultType(struct soap*, fims__FaultType *, const char*, const char*);

#ifndef soap_read_fims__FaultType
#define soap_read_fims__FaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__FaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__FaultType * SOAP_FMAC2 soap_instantiate_fims__FaultType(struct soap*, int, const char*, const char*, size_t*);

inline fims__FaultType * soap_new_fims__FaultType(struct soap *soap, int n = -1) { return soap_instantiate_fims__FaultType(soap, n, NULL, NULL, NULL); }

inline fims__FaultType * soap_new_req_fims__FaultType(struct soap *soap, enum fims__ErrorCodeType code) { fims__FaultType *_p = soap_instantiate_fims__FaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__FaultType::code = code; } return _p; }

inline fims__FaultType * soap_new_set_fims__FaultType(struct soap *soap, enum fims__ErrorCodeType code, std::wstring *description, std::wstring *detail, std::vector<fims__InnerFaultType * >& innerFault) { fims__FaultType *_p = soap_instantiate_fims__FaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__FaultType::code = code; _p->fims__FaultType::description = description; _p->fims__FaultType::detail = detail; _p->fims__FaultType::innerFault = innerFault; } return _p; }

inline void soap_delete_fims__FaultType(struct soap *soap, fims__FaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__FaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ListFilterType
#define SOAP_TYPE_fims__ListFilterType (105)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ListFilterType(struct soap*, const char*, int, const fims__ListFilterType *, const char*);
SOAP_FMAC3 fims__ListFilterType * SOAP_FMAC4 soap_in_fims__ListFilterType(struct soap*, const char*, fims__ListFilterType *, const char*);

#ifndef soap_write_fims__ListFilterType
#define soap_write_fims__ListFilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ListFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ListFilterType * SOAP_FMAC4 soap_get_fims__ListFilterType(struct soap*, fims__ListFilterType *, const char*, const char*);

#ifndef soap_read_fims__ListFilterType
#define soap_read_fims__ListFilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ListFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ListFilterType * SOAP_FMAC2 soap_instantiate_fims__ListFilterType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ListFilterType * soap_new_fims__ListFilterType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ListFilterType(soap, n, NULL, NULL, NULL); }

inline fims__ListFilterType * soap_new_req_fims__ListFilterType(struct soap *soap, bool includeQueued, bool includeActive, bool includeFinished, bool includeFailed) { fims__ListFilterType *_p = soap_instantiate_fims__ListFilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ListFilterType::includeQueued = includeQueued; _p->fims__ListFilterType::includeActive = includeActive; _p->fims__ListFilterType::includeFinished = includeFinished; _p->fims__ListFilterType::includeFailed = includeFailed; } return _p; }

inline fims__ListFilterType * soap_new_set_fims__ListFilterType(struct soap *soap, time_t *fromDate, time_t *toDate, bool includeQueued, bool includeActive, bool includeFinished, bool includeFailed, std::wstring *maxNumberResults) { fims__ListFilterType *_p = soap_instantiate_fims__ListFilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ListFilterType::fromDate = fromDate; _p->fims__ListFilterType::toDate = toDate; _p->fims__ListFilterType::includeQueued = includeQueued; _p->fims__ListFilterType::includeActive = includeActive; _p->fims__ListFilterType::includeFinished = includeFinished; _p->fims__ListFilterType::includeFailed = includeFailed; _p->fims__ListFilterType::maxNumberResults = maxNumberResults; } return _p; }

inline void soap_delete_fims__ListFilterType(struct soap *soap, fims__ListFilterType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ListFilterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryServiceDescriptionResponseType
#define SOAP_TYPE_fims__QueryServiceDescriptionResponseType (104)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryServiceDescriptionResponseType(struct soap*, const char*, int, const fims__QueryServiceDescriptionResponseType *, const char*);
SOAP_FMAC3 fims__QueryServiceDescriptionResponseType * SOAP_FMAC4 soap_in_fims__QueryServiceDescriptionResponseType(struct soap*, const char*, fims__QueryServiceDescriptionResponseType *, const char*);

#ifndef soap_write_fims__QueryServiceDescriptionResponseType
#define soap_write_fims__QueryServiceDescriptionResponseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryServiceDescriptionResponseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryServiceDescriptionResponseType * SOAP_FMAC4 soap_get_fims__QueryServiceDescriptionResponseType(struct soap*, fims__QueryServiceDescriptionResponseType *, const char*, const char*);

#ifndef soap_read_fims__QueryServiceDescriptionResponseType
#define soap_read_fims__QueryServiceDescriptionResponseType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryServiceDescriptionResponseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryServiceDescriptionResponseType * SOAP_FMAC2 soap_instantiate_fims__QueryServiceDescriptionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryServiceDescriptionResponseType * soap_new_fims__QueryServiceDescriptionResponseType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryServiceDescriptionResponseType(soap, n, NULL, NULL, NULL); }

inline fims__QueryServiceDescriptionResponseType * soap_new_req_fims__QueryServiceDescriptionResponseType(struct soap *soap, fims__ServiceType *service, enum fims__CurrentVersion version) { fims__QueryServiceDescriptionResponseType *_p = soap_instantiate_fims__QueryServiceDescriptionResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryServiceDescriptionResponseType::service = service; _p->fims__QueryServiceDescriptionResponseType::version = version; } return _p; }

inline fims__QueryServiceDescriptionResponseType * soap_new_set_fims__QueryServiceDescriptionResponseType(struct soap *soap, fims__ServiceType *service, enum fims__CurrentVersion version) { fims__QueryServiceDescriptionResponseType *_p = soap_instantiate_fims__QueryServiceDescriptionResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryServiceDescriptionResponseType::service = service; _p->fims__QueryServiceDescriptionResponseType::version = version; } return _p; }

inline void soap_delete_fims__QueryServiceDescriptionResponseType(struct soap *soap, fims__QueryServiceDescriptionResponseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryServiceDescriptionResponseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryServiceDescriptionRequestType
#define SOAP_TYPE_fims__QueryServiceDescriptionRequestType (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryServiceDescriptionRequestType(struct soap*, const char*, int, const fims__QueryServiceDescriptionRequestType *, const char*);
SOAP_FMAC3 fims__QueryServiceDescriptionRequestType * SOAP_FMAC4 soap_in_fims__QueryServiceDescriptionRequestType(struct soap*, const char*, fims__QueryServiceDescriptionRequestType *, const char*);

#ifndef soap_write_fims__QueryServiceDescriptionRequestType
#define soap_write_fims__QueryServiceDescriptionRequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryServiceDescriptionRequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryServiceDescriptionRequestType * SOAP_FMAC4 soap_get_fims__QueryServiceDescriptionRequestType(struct soap*, fims__QueryServiceDescriptionRequestType *, const char*, const char*);

#ifndef soap_read_fims__QueryServiceDescriptionRequestType
#define soap_read_fims__QueryServiceDescriptionRequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryServiceDescriptionRequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryServiceDescriptionRequestType * SOAP_FMAC2 soap_instantiate_fims__QueryServiceDescriptionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryServiceDescriptionRequestType * soap_new_fims__QueryServiceDescriptionRequestType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryServiceDescriptionRequestType(soap, n, NULL, NULL, NULL); }

inline fims__QueryServiceDescriptionRequestType * soap_new_req_fims__QueryServiceDescriptionRequestType(struct soap *soap, enum fims__CurrentVersion version) { fims__QueryServiceDescriptionRequestType *_p = soap_instantiate_fims__QueryServiceDescriptionRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryServiceDescriptionRequestType::version = version; } return _p; }

inline fims__QueryServiceDescriptionRequestType * soap_new_set_fims__QueryServiceDescriptionRequestType(struct soap *soap, enum _fims__QueryServiceDescriptionRequestType_responseType responseType, enum fims__CurrentVersion version) { fims__QueryServiceDescriptionRequestType *_p = soap_instantiate_fims__QueryServiceDescriptionRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryServiceDescriptionRequestType::responseType = responseType; _p->fims__QueryServiceDescriptionRequestType::version = version; } return _p; }

inline void soap_delete_fims__QueryServiceDescriptionRequestType(struct soap *soap, fims__QueryServiceDescriptionRequestType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryServiceDescriptionRequestType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryJobResponseType
#define SOAP_TYPE_fims__QueryJobResponseType (102)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryJobResponseType(struct soap*, const char*, int, const fims__QueryJobResponseType *, const char*);
SOAP_FMAC3 fims__QueryJobResponseType * SOAP_FMAC4 soap_in_fims__QueryJobResponseType(struct soap*, const char*, fims__QueryJobResponseType *, const char*);

#ifndef soap_write_fims__QueryJobResponseType
#define soap_write_fims__QueryJobResponseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryJobResponseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryJobResponseType * SOAP_FMAC4 soap_get_fims__QueryJobResponseType(struct soap*, fims__QueryJobResponseType *, const char*, const char*);

#ifndef soap_read_fims__QueryJobResponseType
#define soap_read_fims__QueryJobResponseType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryJobResponseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryJobResponseType * SOAP_FMAC2 soap_instantiate_fims__QueryJobResponseType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryJobResponseType * soap_new_fims__QueryJobResponseType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryJobResponseType(soap, n, NULL, NULL, NULL); }

inline fims__QueryJobResponseType * soap_new_req_fims__QueryJobResponseType(struct soap *soap, enum fims__CurrentVersion version) { fims__QueryJobResponseType *_p = soap_instantiate_fims__QueryJobResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobResponseType::version = version; } return _p; }

inline fims__QueryJobResponseType * soap_new_set_fims__QueryJobResponseType(struct soap *soap, fims__JobsType *jobs, std::wstring *notReportedResultsNumber, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, enum fims__CurrentVersion version) { fims__QueryJobResponseType *_p = soap_instantiate_fims__QueryJobResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobResponseType::jobs = jobs; _p->fims__QueryJobResponseType::notReportedResultsNumber = notReportedResultsNumber; _p->fims__QueryJobResponseType::ExtensionGroup = ExtensionGroup; _p->fims__QueryJobResponseType::ExtensionAttributes = ExtensionAttributes; _p->fims__QueryJobResponseType::version = version; } return _p; }

inline void soap_delete_fims__QueryJobResponseType(struct soap *soap, fims__QueryJobResponseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryJobResponseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryJobRequestByFilterType
#define SOAP_TYPE_fims__QueryJobRequestByFilterType (101)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryJobRequestByFilterType(struct soap*, const char*, int, const fims__QueryJobRequestByFilterType *, const char*);
SOAP_FMAC3 fims__QueryJobRequestByFilterType * SOAP_FMAC4 soap_in_fims__QueryJobRequestByFilterType(struct soap*, const char*, fims__QueryJobRequestByFilterType *, const char*);

#ifndef soap_write_fims__QueryJobRequestByFilterType
#define soap_write_fims__QueryJobRequestByFilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryJobRequestByFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryJobRequestByFilterType * SOAP_FMAC4 soap_get_fims__QueryJobRequestByFilterType(struct soap*, fims__QueryJobRequestByFilterType *, const char*, const char*);

#ifndef soap_read_fims__QueryJobRequestByFilterType
#define soap_read_fims__QueryJobRequestByFilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryJobRequestByFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryJobRequestByFilterType * SOAP_FMAC2 soap_instantiate_fims__QueryJobRequestByFilterType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryJobRequestByFilterType * soap_new_fims__QueryJobRequestByFilterType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryJobRequestByFilterType(soap, n, NULL, NULL, NULL); }

inline fims__QueryJobRequestByFilterType * soap_new_req_fims__QueryJobRequestByFilterType(struct soap *soap, fims__ListFilterType *listFilter, enum fims__JobInfoSelectionType jobInfoSelection1, enum fims__CurrentVersion version1) { fims__QueryJobRequestByFilterType *_p = soap_instantiate_fims__QueryJobRequestByFilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobRequestByFilterType::listFilter = listFilter; _p->fims__QueryJobRequestType::jobInfoSelection = jobInfoSelection1; _p->fims__QueryJobRequestType::version = version1; } return _p; }

inline fims__QueryJobRequestByFilterType * soap_new_set_fims__QueryJobRequestByFilterType(struct soap *soap, fims__ListFilterType *listFilter, enum fims__JobInfoSelectionType jobInfoSelection1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, enum fims__CurrentVersion version1) { fims__QueryJobRequestByFilterType *_p = soap_instantiate_fims__QueryJobRequestByFilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobRequestByFilterType::listFilter = listFilter; _p->fims__QueryJobRequestType::jobInfoSelection = jobInfoSelection1; _p->fims__QueryJobRequestType::ExtensionGroup = ExtensionGroup1; _p->fims__QueryJobRequestType::ExtensionAttributes = ExtensionAttributes1; _p->fims__QueryJobRequestType::version = version1; } return _p; }

inline void soap_delete_fims__QueryJobRequestByFilterType(struct soap *soap, fims__QueryJobRequestByFilterType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryJobRequestByFilterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryJobRequestByIDType
#define SOAP_TYPE_fims__QueryJobRequestByIDType (100)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryJobRequestByIDType(struct soap*, const char*, int, const fims__QueryJobRequestByIDType *, const char*);
SOAP_FMAC3 fims__QueryJobRequestByIDType * SOAP_FMAC4 soap_in_fims__QueryJobRequestByIDType(struct soap*, const char*, fims__QueryJobRequestByIDType *, const char*);

#ifndef soap_write_fims__QueryJobRequestByIDType
#define soap_write_fims__QueryJobRequestByIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryJobRequestByIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryJobRequestByIDType * SOAP_FMAC4 soap_get_fims__QueryJobRequestByIDType(struct soap*, fims__QueryJobRequestByIDType *, const char*, const char*);

#ifndef soap_read_fims__QueryJobRequestByIDType
#define soap_read_fims__QueryJobRequestByIDType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryJobRequestByIDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryJobRequestByIDType * SOAP_FMAC2 soap_instantiate_fims__QueryJobRequestByIDType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryJobRequestByIDType * soap_new_fims__QueryJobRequestByIDType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryJobRequestByIDType(soap, n, NULL, NULL, NULL); }

inline fims__QueryJobRequestByIDType * soap_new_req_fims__QueryJobRequestByIDType(struct soap *soap, std::vector<std::wstring >& jobID, enum fims__JobInfoSelectionType jobInfoSelection1, enum fims__CurrentVersion version1) { fims__QueryJobRequestByIDType *_p = soap_instantiate_fims__QueryJobRequestByIDType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobRequestByIDType::jobID = jobID; _p->fims__QueryJobRequestType::jobInfoSelection = jobInfoSelection1; _p->fims__QueryJobRequestType::version = version1; } return _p; }

inline fims__QueryJobRequestByIDType * soap_new_set_fims__QueryJobRequestByIDType(struct soap *soap, std::vector<std::wstring >& jobID, enum fims__JobInfoSelectionType jobInfoSelection1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, enum fims__CurrentVersion version1) { fims__QueryJobRequestByIDType *_p = soap_instantiate_fims__QueryJobRequestByIDType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobRequestByIDType::jobID = jobID; _p->fims__QueryJobRequestType::jobInfoSelection = jobInfoSelection1; _p->fims__QueryJobRequestType::ExtensionGroup = ExtensionGroup1; _p->fims__QueryJobRequestType::ExtensionAttributes = ExtensionAttributes1; _p->fims__QueryJobRequestType::version = version1; } return _p; }

inline void soap_delete_fims__QueryJobRequestByIDType(struct soap *soap, fims__QueryJobRequestByIDType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryJobRequestByIDType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueryJobRequestType
#define SOAP_TYPE_fims__QueryJobRequestType (99)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueryJobRequestType(struct soap*, const char*, int, const fims__QueryJobRequestType *, const char*);
SOAP_FMAC3 fims__QueryJobRequestType * SOAP_FMAC4 soap_in_fims__QueryJobRequestType(struct soap*, const char*, fims__QueryJobRequestType *, const char*);

#ifndef soap_write_fims__QueryJobRequestType
#define soap_write_fims__QueryJobRequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueryJobRequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryJobRequestType * SOAP_FMAC4 soap_get_fims__QueryJobRequestType(struct soap*, fims__QueryJobRequestType *, const char*, const char*);

#ifndef soap_read_fims__QueryJobRequestType
#define soap_read_fims__QueryJobRequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueryJobRequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueryJobRequestType * SOAP_FMAC2 soap_instantiate_fims__QueryJobRequestType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueryJobRequestType * soap_new_fims__QueryJobRequestType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueryJobRequestType(soap, n, NULL, NULL, NULL); }

inline fims__QueryJobRequestType * soap_new_req_fims__QueryJobRequestType(struct soap *soap, enum fims__JobInfoSelectionType jobInfoSelection, enum fims__CurrentVersion version) { fims__QueryJobRequestType *_p = soap_instantiate_fims__QueryJobRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobRequestType::jobInfoSelection = jobInfoSelection; _p->fims__QueryJobRequestType::version = version; } return _p; }

inline fims__QueryJobRequestType * soap_new_set_fims__QueryJobRequestType(struct soap *soap, enum fims__JobInfoSelectionType jobInfoSelection, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, enum fims__CurrentVersion version) { fims__QueryJobRequestType *_p = soap_instantiate_fims__QueryJobRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueryJobRequestType::jobInfoSelection = jobInfoSelection; _p->fims__QueryJobRequestType::ExtensionGroup = ExtensionGroup; _p->fims__QueryJobRequestType::ExtensionAttributes = ExtensionAttributes; _p->fims__QueryJobRequestType::version = version; } return _p; }

inline void soap_delete_fims__QueryJobRequestType(struct soap *soap, fims__QueryJobRequestType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueryJobRequestType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ManageQueueResponseType
#define SOAP_TYPE_fims__ManageQueueResponseType (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ManageQueueResponseType(struct soap*, const char*, int, const fims__ManageQueueResponseType *, const char*);
SOAP_FMAC3 fims__ManageQueueResponseType * SOAP_FMAC4 soap_in_fims__ManageQueueResponseType(struct soap*, const char*, fims__ManageQueueResponseType *, const char*);

#ifndef soap_write_fims__ManageQueueResponseType
#define soap_write_fims__ManageQueueResponseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ManageQueueResponseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ManageQueueResponseType * SOAP_FMAC4 soap_get_fims__ManageQueueResponseType(struct soap*, fims__ManageQueueResponseType *, const char*, const char*);

#ifndef soap_read_fims__ManageQueueResponseType
#define soap_read_fims__ManageQueueResponseType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ManageQueueResponseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ManageQueueResponseType * SOAP_FMAC2 soap_instantiate_fims__ManageQueueResponseType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ManageQueueResponseType * soap_new_fims__ManageQueueResponseType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ManageQueueResponseType(soap, n, NULL, NULL, NULL); }

inline fims__ManageQueueResponseType * soap_new_req_fims__ManageQueueResponseType(struct soap *soap, fims__QueueType *queue, enum fims__CurrentVersion version) { fims__ManageQueueResponseType *_p = soap_instantiate_fims__ManageQueueResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageQueueResponseType::queue = queue; _p->fims__ManageQueueResponseType::version = version; } return _p; }

inline fims__ManageQueueResponseType * soap_new_set_fims__ManageQueueResponseType(struct soap *soap, fims__QueueType *queue, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, enum fims__CurrentVersion version) { fims__ManageQueueResponseType *_p = soap_instantiate_fims__ManageQueueResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageQueueResponseType::queue = queue; _p->fims__ManageQueueResponseType::ExtensionGroup = ExtensionGroup; _p->fims__ManageQueueResponseType::ExtensionAttributes = ExtensionAttributes; _p->fims__ManageQueueResponseType::version = version; } return _p; }

inline void soap_delete_fims__ManageQueueResponseType(struct soap *soap, fims__ManageQueueResponseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ManageQueueResponseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ManageQueueRequestType
#define SOAP_TYPE_fims__ManageQueueRequestType (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ManageQueueRequestType(struct soap*, const char*, int, const fims__ManageQueueRequestType *, const char*);
SOAP_FMAC3 fims__ManageQueueRequestType * SOAP_FMAC4 soap_in_fims__ManageQueueRequestType(struct soap*, const char*, fims__ManageQueueRequestType *, const char*);

#ifndef soap_write_fims__ManageQueueRequestType
#define soap_write_fims__ManageQueueRequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ManageQueueRequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ManageQueueRequestType * SOAP_FMAC4 soap_get_fims__ManageQueueRequestType(struct soap*, fims__ManageQueueRequestType *, const char*, const char*);

#ifndef soap_read_fims__ManageQueueRequestType
#define soap_read_fims__ManageQueueRequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ManageQueueRequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ManageQueueRequestType * SOAP_FMAC2 soap_instantiate_fims__ManageQueueRequestType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ManageQueueRequestType * soap_new_fims__ManageQueueRequestType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ManageQueueRequestType(soap, n, NULL, NULL, NULL); }

inline fims__ManageQueueRequestType * soap_new_req_fims__ManageQueueRequestType(struct soap *soap, enum fims__QueueCommandType queueCommand, enum fims__CurrentVersion version) { fims__ManageQueueRequestType *_p = soap_instantiate_fims__ManageQueueRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageQueueRequestType::queueCommand = queueCommand; _p->fims__ManageQueueRequestType::version = version; } return _p; }

inline fims__ManageQueueRequestType * soap_new_set_fims__ManageQueueRequestType(struct soap *soap, std::wstring *queueID, enum fims__QueueCommandType queueCommand, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, enum fims__CurrentVersion version) { fims__ManageQueueRequestType *_p = soap_instantiate_fims__ManageQueueRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageQueueRequestType::queueID = queueID; _p->fims__ManageQueueRequestType::queueCommand = queueCommand; _p->fims__ManageQueueRequestType::ExtensionGroup = ExtensionGroup; _p->fims__ManageQueueRequestType::ExtensionAttributes = ExtensionAttributes; _p->fims__ManageQueueRequestType::version = version; } return _p; }

inline void soap_delete_fims__ManageQueueRequestType(struct soap *soap, fims__ManageQueueRequestType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ManageQueueRequestType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ManageJobResponseType
#define SOAP_TYPE_fims__ManageJobResponseType (96)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ManageJobResponseType(struct soap*, const char*, int, const fims__ManageJobResponseType *, const char*);
SOAP_FMAC3 fims__ManageJobResponseType * SOAP_FMAC4 soap_in_fims__ManageJobResponseType(struct soap*, const char*, fims__ManageJobResponseType *, const char*);

#ifndef soap_write_fims__ManageJobResponseType
#define soap_write_fims__ManageJobResponseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ManageJobResponseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ManageJobResponseType * SOAP_FMAC4 soap_get_fims__ManageJobResponseType(struct soap*, fims__ManageJobResponseType *, const char*, const char*);

#ifndef soap_read_fims__ManageJobResponseType
#define soap_read_fims__ManageJobResponseType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ManageJobResponseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ManageJobResponseType * SOAP_FMAC2 soap_instantiate_fims__ManageJobResponseType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ManageJobResponseType * soap_new_fims__ManageJobResponseType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ManageJobResponseType(soap, n, NULL, NULL, NULL); }

inline fims__ManageJobResponseType * soap_new_req_fims__ManageJobResponseType(struct soap *soap, fims__JobType *job, enum fims__CurrentVersion version) { fims__ManageJobResponseType *_p = soap_instantiate_fims__ManageJobResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageJobResponseType::job = job; _p->fims__ManageJobResponseType::version = version; } return _p; }

inline fims__ManageJobResponseType * soap_new_set_fims__ManageJobResponseType(struct soap *soap, fims__JobType *job, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, enum fims__CurrentVersion version) { fims__ManageJobResponseType *_p = soap_instantiate_fims__ManageJobResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageJobResponseType::job = job; _p->fims__ManageJobResponseType::ExtensionGroup = ExtensionGroup; _p->fims__ManageJobResponseType::ExtensionAttributes = ExtensionAttributes; _p->fims__ManageJobResponseType::version = version; } return _p; }

inline void soap_delete_fims__ManageJobResponseType(struct soap *soap, fims__ManageJobResponseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ManageJobResponseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ManageJobRequestType
#define SOAP_TYPE_fims__ManageJobRequestType (95)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ManageJobRequestType(struct soap*, const char*, int, const fims__ManageJobRequestType *, const char*);
SOAP_FMAC3 fims__ManageJobRequestType * SOAP_FMAC4 soap_in_fims__ManageJobRequestType(struct soap*, const char*, fims__ManageJobRequestType *, const char*);

#ifndef soap_write_fims__ManageJobRequestType
#define soap_write_fims__ManageJobRequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ManageJobRequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ManageJobRequestType * SOAP_FMAC4 soap_get_fims__ManageJobRequestType(struct soap*, fims__ManageJobRequestType *, const char*, const char*);

#ifndef soap_read_fims__ManageJobRequestType
#define soap_read_fims__ManageJobRequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ManageJobRequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ManageJobRequestType * SOAP_FMAC2 soap_instantiate_fims__ManageJobRequestType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ManageJobRequestType * soap_new_fims__ManageJobRequestType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ManageJobRequestType(soap, n, NULL, NULL, NULL); }

inline fims__ManageJobRequestType * soap_new_req_fims__ManageJobRequestType(struct soap *soap, std::wstring& jobID, enum fims__JobCommandType jobCommand, enum fims__CurrentVersion version) { fims__ManageJobRequestType *_p = soap_instantiate_fims__ManageJobRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageJobRequestType::jobID = jobID; _p->fims__ManageJobRequestType::jobCommand = jobCommand; _p->fims__ManageJobRequestType::version = version; } return _p; }

inline fims__ManageJobRequestType * soap_new_set_fims__ManageJobRequestType(struct soap *soap, std::wstring& jobID, enum fims__JobCommandType jobCommand, enum fims__PriorityType *priority, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, enum fims__CurrentVersion version) { fims__ManageJobRequestType *_p = soap_instantiate_fims__ManageJobRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ManageJobRequestType::jobID = jobID; _p->fims__ManageJobRequestType::jobCommand = jobCommand; _p->fims__ManageJobRequestType::priority = priority; _p->fims__ManageJobRequestType::ExtensionGroup = ExtensionGroup; _p->fims__ManageJobRequestType::ExtensionAttributes = ExtensionAttributes; _p->fims__ManageJobRequestType::version = version; } return _p; }

inline void soap_delete_fims__ManageJobRequestType(struct soap *soap, fims__ManageJobRequestType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ManageJobRequestType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartJobByLatestType
#define SOAP_TYPE_fims__StartJobByLatestType (94)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartJobByLatestType(struct soap*, const char*, int, const fims__StartJobByLatestType *, const char*);
SOAP_FMAC3 fims__StartJobByLatestType * SOAP_FMAC4 soap_in_fims__StartJobByLatestType(struct soap*, const char*, fims__StartJobByLatestType *, const char*);

#ifndef soap_write_fims__StartJobByLatestType
#define soap_write_fims__StartJobByLatestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartJobByLatestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartJobByLatestType * SOAP_FMAC4 soap_get_fims__StartJobByLatestType(struct soap*, fims__StartJobByLatestType *, const char*, const char*);

#ifndef soap_read_fims__StartJobByLatestType
#define soap_read_fims__StartJobByLatestType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartJobByLatestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartJobByLatestType * SOAP_FMAC2 soap_instantiate_fims__StartJobByLatestType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartJobByLatestType * soap_new_fims__StartJobByLatestType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartJobByLatestType(soap, n, NULL, NULL, NULL); }

inline fims__StartJobByLatestType * soap_new_req_fims__StartJobByLatestType(struct soap *soap) { fims__StartJobByLatestType *_p = soap_instantiate_fims__StartJobByLatestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StartJobByLatestType * soap_new_set_fims__StartJobByLatestType(struct soap *soap) { fims__StartJobByLatestType *_p = soap_instantiate_fims__StartJobByLatestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__StartJobByLatestType(struct soap *soap, fims__StartJobByLatestType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartJobByLatestType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartJobByTimeType
#define SOAP_TYPE_fims__StartJobByTimeType (93)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartJobByTimeType(struct soap*, const char*, int, const fims__StartJobByTimeType *, const char*);
SOAP_FMAC3 fims__StartJobByTimeType * SOAP_FMAC4 soap_in_fims__StartJobByTimeType(struct soap*, const char*, fims__StartJobByTimeType *, const char*);

#ifndef soap_write_fims__StartJobByTimeType
#define soap_write_fims__StartJobByTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartJobByTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartJobByTimeType * SOAP_FMAC4 soap_get_fims__StartJobByTimeType(struct soap*, fims__StartJobByTimeType *, const char*, const char*);

#ifndef soap_read_fims__StartJobByTimeType
#define soap_read_fims__StartJobByTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartJobByTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartJobByTimeType * SOAP_FMAC2 soap_instantiate_fims__StartJobByTimeType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartJobByTimeType * soap_new_fims__StartJobByTimeType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartJobByTimeType(soap, n, NULL, NULL, NULL); }

inline fims__StartJobByTimeType * soap_new_req_fims__StartJobByTimeType(struct soap *soap, time_t time) { fims__StartJobByTimeType *_p = soap_instantiate_fims__StartJobByTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartJobByTimeType::time = time; } return _p; }

inline fims__StartJobByTimeType * soap_new_set_fims__StartJobByTimeType(struct soap *soap, time_t time) { fims__StartJobByTimeType *_p = soap_instantiate_fims__StartJobByTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartJobByTimeType::time = time; } return _p; }

inline void soap_delete_fims__StartJobByTimeType(struct soap *soap, fims__StartJobByTimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartJobByTimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartJobByNoWaitType
#define SOAP_TYPE_fims__StartJobByNoWaitType (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartJobByNoWaitType(struct soap*, const char*, int, const fims__StartJobByNoWaitType *, const char*);
SOAP_FMAC3 fims__StartJobByNoWaitType * SOAP_FMAC4 soap_in_fims__StartJobByNoWaitType(struct soap*, const char*, fims__StartJobByNoWaitType *, const char*);

#ifndef soap_write_fims__StartJobByNoWaitType
#define soap_write_fims__StartJobByNoWaitType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartJobByNoWaitType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartJobByNoWaitType * SOAP_FMAC4 soap_get_fims__StartJobByNoWaitType(struct soap*, fims__StartJobByNoWaitType *, const char*, const char*);

#ifndef soap_read_fims__StartJobByNoWaitType
#define soap_read_fims__StartJobByNoWaitType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartJobByNoWaitType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartJobByNoWaitType * SOAP_FMAC2 soap_instantiate_fims__StartJobByNoWaitType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartJobByNoWaitType * soap_new_fims__StartJobByNoWaitType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartJobByNoWaitType(soap, n, NULL, NULL, NULL); }

inline fims__StartJobByNoWaitType * soap_new_req_fims__StartJobByNoWaitType(struct soap *soap) { fims__StartJobByNoWaitType *_p = soap_instantiate_fims__StartJobByNoWaitType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StartJobByNoWaitType * soap_new_set_fims__StartJobByNoWaitType(struct soap *soap) { fims__StartJobByNoWaitType *_p = soap_instantiate_fims__StartJobByNoWaitType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__StartJobByNoWaitType(struct soap *soap, fims__StartJobByNoWaitType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartJobByNoWaitType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartJobType
#define SOAP_TYPE_fims__StartJobType (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartJobType(struct soap*, const char*, int, const fims__StartJobType *, const char*);
SOAP_FMAC3 fims__StartJobType * SOAP_FMAC4 soap_in_fims__StartJobType(struct soap*, const char*, fims__StartJobType *, const char*);

#ifndef soap_write_fims__StartJobType
#define soap_write_fims__StartJobType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartJobType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartJobType * SOAP_FMAC4 soap_get_fims__StartJobType(struct soap*, fims__StartJobType *, const char*, const char*);

#ifndef soap_read_fims__StartJobType
#define soap_read_fims__StartJobType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartJobType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartJobType * SOAP_FMAC2 soap_instantiate_fims__StartJobType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartJobType * soap_new_fims__StartJobType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartJobType(soap, n, NULL, NULL, NULL); }

inline fims__StartJobType * soap_new_req_fims__StartJobType(struct soap *soap) { fims__StartJobType *_p = soap_instantiate_fims__StartJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StartJobType * soap_new_set_fims__StartJobType(struct soap *soap) { fims__StartJobType *_p = soap_instantiate_fims__StartJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__StartJobType(struct soap *soap, fims__StartJobType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartJobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StopProcessByOpenEndType
#define SOAP_TYPE_fims__StopProcessByOpenEndType (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StopProcessByOpenEndType(struct soap*, const char*, int, const fims__StopProcessByOpenEndType *, const char*);
SOAP_FMAC3 fims__StopProcessByOpenEndType * SOAP_FMAC4 soap_in_fims__StopProcessByOpenEndType(struct soap*, const char*, fims__StopProcessByOpenEndType *, const char*);

#ifndef soap_write_fims__StopProcessByOpenEndType
#define soap_write_fims__StopProcessByOpenEndType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StopProcessByOpenEndType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StopProcessByOpenEndType * SOAP_FMAC4 soap_get_fims__StopProcessByOpenEndType(struct soap*, fims__StopProcessByOpenEndType *, const char*, const char*);

#ifndef soap_read_fims__StopProcessByOpenEndType
#define soap_read_fims__StopProcessByOpenEndType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StopProcessByOpenEndType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StopProcessByOpenEndType * SOAP_FMAC2 soap_instantiate_fims__StopProcessByOpenEndType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StopProcessByOpenEndType * soap_new_fims__StopProcessByOpenEndType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StopProcessByOpenEndType(soap, n, NULL, NULL, NULL); }

inline fims__StopProcessByOpenEndType * soap_new_req_fims__StopProcessByOpenEndType(struct soap *soap) { fims__StopProcessByOpenEndType *_p = soap_instantiate_fims__StopProcessByOpenEndType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StopProcessByOpenEndType * soap_new_set_fims__StopProcessByOpenEndType(struct soap *soap, time_t *actualStopTime, fimstime__TimeType *actualStopMark) { fims__StopProcessByOpenEndType *_p = soap_instantiate_fims__StopProcessByOpenEndType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByOpenEndType::actualStopTime = actualStopTime; _p->fims__StopProcessByOpenEndType::actualStopMark = actualStopMark; } return _p; }

inline void soap_delete_fims__StopProcessByOpenEndType(struct soap *soap, fims__StopProcessByOpenEndType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StopProcessByOpenEndType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StopProcessByServiceDefinedTimeType
#define SOAP_TYPE_fims__StopProcessByServiceDefinedTimeType (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StopProcessByServiceDefinedTimeType(struct soap*, const char*, int, const fims__StopProcessByServiceDefinedTimeType *, const char*);
SOAP_FMAC3 fims__StopProcessByServiceDefinedTimeType * SOAP_FMAC4 soap_in_fims__StopProcessByServiceDefinedTimeType(struct soap*, const char*, fims__StopProcessByServiceDefinedTimeType *, const char*);

#ifndef soap_write_fims__StopProcessByServiceDefinedTimeType
#define soap_write_fims__StopProcessByServiceDefinedTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StopProcessByServiceDefinedTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StopProcessByServiceDefinedTimeType * SOAP_FMAC4 soap_get_fims__StopProcessByServiceDefinedTimeType(struct soap*, fims__StopProcessByServiceDefinedTimeType *, const char*, const char*);

#ifndef soap_read_fims__StopProcessByServiceDefinedTimeType
#define soap_read_fims__StopProcessByServiceDefinedTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StopProcessByServiceDefinedTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StopProcessByServiceDefinedTimeType * SOAP_FMAC2 soap_instantiate_fims__StopProcessByServiceDefinedTimeType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StopProcessByServiceDefinedTimeType * soap_new_fims__StopProcessByServiceDefinedTimeType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StopProcessByServiceDefinedTimeType(soap, n, NULL, NULL, NULL); }

inline fims__StopProcessByServiceDefinedTimeType * soap_new_req_fims__StopProcessByServiceDefinedTimeType(struct soap *soap) { fims__StopProcessByServiceDefinedTimeType *_p = soap_instantiate_fims__StopProcessByServiceDefinedTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StopProcessByServiceDefinedTimeType * soap_new_set_fims__StopProcessByServiceDefinedTimeType(struct soap *soap, time_t *actualStopTime, fimstime__TimeType *actualStopMark) { fims__StopProcessByServiceDefinedTimeType *_p = soap_instantiate_fims__StopProcessByServiceDefinedTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByServiceDefinedTimeType::actualStopTime = actualStopTime; _p->fims__StopProcessByServiceDefinedTimeType::actualStopMark = actualStopMark; } return _p; }

inline void soap_delete_fims__StopProcessByServiceDefinedTimeType(struct soap *soap, fims__StopProcessByServiceDefinedTimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StopProcessByServiceDefinedTimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StopProcessByTimeMarkType
#define SOAP_TYPE_fims__StopProcessByTimeMarkType (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StopProcessByTimeMarkType(struct soap*, const char*, int, const fims__StopProcessByTimeMarkType *, const char*);
SOAP_FMAC3 fims__StopProcessByTimeMarkType * SOAP_FMAC4 soap_in_fims__StopProcessByTimeMarkType(struct soap*, const char*, fims__StopProcessByTimeMarkType *, const char*);

#ifndef soap_write_fims__StopProcessByTimeMarkType
#define soap_write_fims__StopProcessByTimeMarkType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StopProcessByTimeMarkType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StopProcessByTimeMarkType * SOAP_FMAC4 soap_get_fims__StopProcessByTimeMarkType(struct soap*, fims__StopProcessByTimeMarkType *, const char*, const char*);

#ifndef soap_read_fims__StopProcessByTimeMarkType
#define soap_read_fims__StopProcessByTimeMarkType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StopProcessByTimeMarkType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StopProcessByTimeMarkType * SOAP_FMAC2 soap_instantiate_fims__StopProcessByTimeMarkType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StopProcessByTimeMarkType * soap_new_fims__StopProcessByTimeMarkType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StopProcessByTimeMarkType(soap, n, NULL, NULL, NULL); }

inline fims__StopProcessByTimeMarkType * soap_new_req_fims__StopProcessByTimeMarkType(struct soap *soap, fimstime__TimeType *timeMark) { fims__StopProcessByTimeMarkType *_p = soap_instantiate_fims__StopProcessByTimeMarkType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByTimeMarkType::timeMark = timeMark; } return _p; }

inline fims__StopProcessByTimeMarkType * soap_new_set_fims__StopProcessByTimeMarkType(struct soap *soap, fimstime__TimeType *timeMark) { fims__StopProcessByTimeMarkType *_p = soap_instantiate_fims__StopProcessByTimeMarkType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByTimeMarkType::timeMark = timeMark; } return _p; }

inline void soap_delete_fims__StopProcessByTimeMarkType(struct soap *soap, fims__StopProcessByTimeMarkType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StopProcessByTimeMarkType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StopProcessByDurationType
#define SOAP_TYPE_fims__StopProcessByDurationType (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StopProcessByDurationType(struct soap*, const char*, int, const fims__StopProcessByDurationType *, const char*);
SOAP_FMAC3 fims__StopProcessByDurationType * SOAP_FMAC4 soap_in_fims__StopProcessByDurationType(struct soap*, const char*, fims__StopProcessByDurationType *, const char*);

#ifndef soap_write_fims__StopProcessByDurationType
#define soap_write_fims__StopProcessByDurationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StopProcessByDurationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StopProcessByDurationType * SOAP_FMAC4 soap_get_fims__StopProcessByDurationType(struct soap*, fims__StopProcessByDurationType *, const char*, const char*);

#ifndef soap_read_fims__StopProcessByDurationType
#define soap_read_fims__StopProcessByDurationType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StopProcessByDurationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StopProcessByDurationType * SOAP_FMAC2 soap_instantiate_fims__StopProcessByDurationType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StopProcessByDurationType * soap_new_fims__StopProcessByDurationType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StopProcessByDurationType(soap, n, NULL, NULL, NULL); }

inline fims__StopProcessByDurationType * soap_new_req_fims__StopProcessByDurationType(struct soap *soap, fimstime__DurationType *duration) { fims__StopProcessByDurationType *_p = soap_instantiate_fims__StopProcessByDurationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByDurationType::duration = duration; } return _p; }

inline fims__StopProcessByDurationType * soap_new_set_fims__StopProcessByDurationType(struct soap *soap, fimstime__DurationType *duration) { fims__StopProcessByDurationType *_p = soap_instantiate_fims__StopProcessByDurationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByDurationType::duration = duration; } return _p; }

inline void soap_delete_fims__StopProcessByDurationType(struct soap *soap, fims__StopProcessByDurationType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StopProcessByDurationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StopProcessByTimeType
#define SOAP_TYPE_fims__StopProcessByTimeType (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StopProcessByTimeType(struct soap*, const char*, int, const fims__StopProcessByTimeType *, const char*);
SOAP_FMAC3 fims__StopProcessByTimeType * SOAP_FMAC4 soap_in_fims__StopProcessByTimeType(struct soap*, const char*, fims__StopProcessByTimeType *, const char*);

#ifndef soap_write_fims__StopProcessByTimeType
#define soap_write_fims__StopProcessByTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StopProcessByTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StopProcessByTimeType * SOAP_FMAC4 soap_get_fims__StopProcessByTimeType(struct soap*, fims__StopProcessByTimeType *, const char*, const char*);

#ifndef soap_read_fims__StopProcessByTimeType
#define soap_read_fims__StopProcessByTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StopProcessByTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StopProcessByTimeType * SOAP_FMAC2 soap_instantiate_fims__StopProcessByTimeType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StopProcessByTimeType * soap_new_fims__StopProcessByTimeType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StopProcessByTimeType(soap, n, NULL, NULL, NULL); }

inline fims__StopProcessByTimeType * soap_new_req_fims__StopProcessByTimeType(struct soap *soap, time_t time) { fims__StopProcessByTimeType *_p = soap_instantiate_fims__StopProcessByTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByTimeType::time = time; } return _p; }

inline fims__StopProcessByTimeType * soap_new_set_fims__StopProcessByTimeType(struct soap *soap, time_t time) { fims__StopProcessByTimeType *_p = soap_instantiate_fims__StopProcessByTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StopProcessByTimeType::time = time; } return _p; }

inline void soap_delete_fims__StopProcessByTimeType(struct soap *soap, fims__StopProcessByTimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StopProcessByTimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StopProcessType
#define SOAP_TYPE_fims__StopProcessType (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StopProcessType(struct soap*, const char*, int, const fims__StopProcessType *, const char*);
SOAP_FMAC3 fims__StopProcessType * SOAP_FMAC4 soap_in_fims__StopProcessType(struct soap*, const char*, fims__StopProcessType *, const char*);

#ifndef soap_write_fims__StopProcessType
#define soap_write_fims__StopProcessType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StopProcessType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StopProcessType * SOAP_FMAC4 soap_get_fims__StopProcessType(struct soap*, fims__StopProcessType *, const char*, const char*);

#ifndef soap_read_fims__StopProcessType
#define soap_read_fims__StopProcessType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StopProcessType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StopProcessType * SOAP_FMAC2 soap_instantiate_fims__StopProcessType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StopProcessType * soap_new_fims__StopProcessType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StopProcessType(soap, n, NULL, NULL, NULL); }

inline fims__StopProcessType * soap_new_req_fims__StopProcessType(struct soap *soap) { fims__StopProcessType *_p = soap_instantiate_fims__StopProcessType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StopProcessType * soap_new_set_fims__StopProcessType(struct soap *soap) { fims__StopProcessType *_p = soap_instantiate_fims__StopProcessType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__StopProcessType(struct soap *soap, fims__StopProcessType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StopProcessType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartProcessByServiceDefinedTimeType
#define SOAP_TYPE_fims__StartProcessByServiceDefinedTimeType (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartProcessByServiceDefinedTimeType(struct soap*, const char*, int, const fims__StartProcessByServiceDefinedTimeType *, const char*);
SOAP_FMAC3 fims__StartProcessByServiceDefinedTimeType * SOAP_FMAC4 soap_in_fims__StartProcessByServiceDefinedTimeType(struct soap*, const char*, fims__StartProcessByServiceDefinedTimeType *, const char*);

#ifndef soap_write_fims__StartProcessByServiceDefinedTimeType
#define soap_write_fims__StartProcessByServiceDefinedTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartProcessByServiceDefinedTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartProcessByServiceDefinedTimeType * SOAP_FMAC4 soap_get_fims__StartProcessByServiceDefinedTimeType(struct soap*, fims__StartProcessByServiceDefinedTimeType *, const char*, const char*);

#ifndef soap_read_fims__StartProcessByServiceDefinedTimeType
#define soap_read_fims__StartProcessByServiceDefinedTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartProcessByServiceDefinedTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartProcessByServiceDefinedTimeType * SOAP_FMAC2 soap_instantiate_fims__StartProcessByServiceDefinedTimeType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartProcessByServiceDefinedTimeType * soap_new_fims__StartProcessByServiceDefinedTimeType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartProcessByServiceDefinedTimeType(soap, n, NULL, NULL, NULL); }

inline fims__StartProcessByServiceDefinedTimeType * soap_new_req_fims__StartProcessByServiceDefinedTimeType(struct soap *soap) { fims__StartProcessByServiceDefinedTimeType *_p = soap_instantiate_fims__StartProcessByServiceDefinedTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StartProcessByServiceDefinedTimeType * soap_new_set_fims__StartProcessByServiceDefinedTimeType(struct soap *soap, time_t *actualStartTime, fimstime__TimeType *actualStartMark) { fims__StartProcessByServiceDefinedTimeType *_p = soap_instantiate_fims__StartProcessByServiceDefinedTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartProcessByServiceDefinedTimeType::actualStartTime = actualStartTime; _p->fims__StartProcessByServiceDefinedTimeType::actualStartMark = actualStartMark; } return _p; }

inline void soap_delete_fims__StartProcessByServiceDefinedTimeType(struct soap *soap, fims__StartProcessByServiceDefinedTimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartProcessByServiceDefinedTimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartProcessByTimeMarkType
#define SOAP_TYPE_fims__StartProcessByTimeMarkType (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartProcessByTimeMarkType(struct soap*, const char*, int, const fims__StartProcessByTimeMarkType *, const char*);
SOAP_FMAC3 fims__StartProcessByTimeMarkType * SOAP_FMAC4 soap_in_fims__StartProcessByTimeMarkType(struct soap*, const char*, fims__StartProcessByTimeMarkType *, const char*);

#ifndef soap_write_fims__StartProcessByTimeMarkType
#define soap_write_fims__StartProcessByTimeMarkType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartProcessByTimeMarkType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartProcessByTimeMarkType * SOAP_FMAC4 soap_get_fims__StartProcessByTimeMarkType(struct soap*, fims__StartProcessByTimeMarkType *, const char*, const char*);

#ifndef soap_read_fims__StartProcessByTimeMarkType
#define soap_read_fims__StartProcessByTimeMarkType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartProcessByTimeMarkType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartProcessByTimeMarkType * SOAP_FMAC2 soap_instantiate_fims__StartProcessByTimeMarkType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartProcessByTimeMarkType * soap_new_fims__StartProcessByTimeMarkType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartProcessByTimeMarkType(soap, n, NULL, NULL, NULL); }

inline fims__StartProcessByTimeMarkType * soap_new_req_fims__StartProcessByTimeMarkType(struct soap *soap, fimstime__TimeType *timeMark) { fims__StartProcessByTimeMarkType *_p = soap_instantiate_fims__StartProcessByTimeMarkType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartProcessByTimeMarkType::timeMark = timeMark; } return _p; }

inline fims__StartProcessByTimeMarkType * soap_new_set_fims__StartProcessByTimeMarkType(struct soap *soap, fimstime__TimeType *timeMark) { fims__StartProcessByTimeMarkType *_p = soap_instantiate_fims__StartProcessByTimeMarkType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartProcessByTimeMarkType::timeMark = timeMark; } return _p; }

inline void soap_delete_fims__StartProcessByTimeMarkType(struct soap *soap, fims__StartProcessByTimeMarkType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartProcessByTimeMarkType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartProcessByTimeType
#define SOAP_TYPE_fims__StartProcessByTimeType (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartProcessByTimeType(struct soap*, const char*, int, const fims__StartProcessByTimeType *, const char*);
SOAP_FMAC3 fims__StartProcessByTimeType * SOAP_FMAC4 soap_in_fims__StartProcessByTimeType(struct soap*, const char*, fims__StartProcessByTimeType *, const char*);

#ifndef soap_write_fims__StartProcessByTimeType
#define soap_write_fims__StartProcessByTimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartProcessByTimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartProcessByTimeType * SOAP_FMAC4 soap_get_fims__StartProcessByTimeType(struct soap*, fims__StartProcessByTimeType *, const char*, const char*);

#ifndef soap_read_fims__StartProcessByTimeType
#define soap_read_fims__StartProcessByTimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartProcessByTimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartProcessByTimeType * SOAP_FMAC2 soap_instantiate_fims__StartProcessByTimeType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartProcessByTimeType * soap_new_fims__StartProcessByTimeType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartProcessByTimeType(soap, n, NULL, NULL, NULL); }

inline fims__StartProcessByTimeType * soap_new_req_fims__StartProcessByTimeType(struct soap *soap, time_t time) { fims__StartProcessByTimeType *_p = soap_instantiate_fims__StartProcessByTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartProcessByTimeType::time = time; } return _p; }

inline fims__StartProcessByTimeType * soap_new_set_fims__StartProcessByTimeType(struct soap *soap, time_t time) { fims__StartProcessByTimeType *_p = soap_instantiate_fims__StartProcessByTimeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartProcessByTimeType::time = time; } return _p; }

inline void soap_delete_fims__StartProcessByTimeType(struct soap *soap, fims__StartProcessByTimeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartProcessByTimeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartProcessByNoWaitType
#define SOAP_TYPE_fims__StartProcessByNoWaitType (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartProcessByNoWaitType(struct soap*, const char*, int, const fims__StartProcessByNoWaitType *, const char*);
SOAP_FMAC3 fims__StartProcessByNoWaitType * SOAP_FMAC4 soap_in_fims__StartProcessByNoWaitType(struct soap*, const char*, fims__StartProcessByNoWaitType *, const char*);

#ifndef soap_write_fims__StartProcessByNoWaitType
#define soap_write_fims__StartProcessByNoWaitType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartProcessByNoWaitType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartProcessByNoWaitType * SOAP_FMAC4 soap_get_fims__StartProcessByNoWaitType(struct soap*, fims__StartProcessByNoWaitType *, const char*, const char*);

#ifndef soap_read_fims__StartProcessByNoWaitType
#define soap_read_fims__StartProcessByNoWaitType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartProcessByNoWaitType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartProcessByNoWaitType * SOAP_FMAC2 soap_instantiate_fims__StartProcessByNoWaitType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartProcessByNoWaitType * soap_new_fims__StartProcessByNoWaitType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartProcessByNoWaitType(soap, n, NULL, NULL, NULL); }

inline fims__StartProcessByNoWaitType * soap_new_req_fims__StartProcessByNoWaitType(struct soap *soap) { fims__StartProcessByNoWaitType *_p = soap_instantiate_fims__StartProcessByNoWaitType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StartProcessByNoWaitType * soap_new_set_fims__StartProcessByNoWaitType(struct soap *soap, time_t *actualStartTime, fimstime__TimeType *actualStartMark) { fims__StartProcessByNoWaitType *_p = soap_instantiate_fims__StartProcessByNoWaitType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StartProcessByNoWaitType::actualStartTime = actualStartTime; _p->fims__StartProcessByNoWaitType::actualStartMark = actualStartMark; } return _p; }

inline void soap_delete_fims__StartProcessByNoWaitType(struct soap *soap, fims__StartProcessByNoWaitType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartProcessByNoWaitType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StartProcessType
#define SOAP_TYPE_fims__StartProcessType (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StartProcessType(struct soap*, const char*, int, const fims__StartProcessType *, const char*);
SOAP_FMAC3 fims__StartProcessType * SOAP_FMAC4 soap_in_fims__StartProcessType(struct soap*, const char*, fims__StartProcessType *, const char*);

#ifndef soap_write_fims__StartProcessType
#define soap_write_fims__StartProcessType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StartProcessType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartProcessType * SOAP_FMAC4 soap_get_fims__StartProcessType(struct soap*, fims__StartProcessType *, const char*, const char*);

#ifndef soap_read_fims__StartProcessType
#define soap_read_fims__StartProcessType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StartProcessType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StartProcessType * SOAP_FMAC2 soap_instantiate_fims__StartProcessType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StartProcessType * soap_new_fims__StartProcessType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StartProcessType(soap, n, NULL, NULL, NULL); }

inline fims__StartProcessType * soap_new_req_fims__StartProcessType(struct soap *soap) { fims__StartProcessType *_p = soap_instantiate_fims__StartProcessType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__StartProcessType * soap_new_set_fims__StartProcessType(struct soap *soap) { fims__StartProcessType *_p = soap_instantiate_fims__StartProcessType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_fims__StartProcessType(struct soap *soap, fims__StartProcessType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StartProcessType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__HashFunctionType
#define SOAP_TYPE_fims__HashFunctionType (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__HashFunctionType(struct soap*, const char*, int, const fims__HashFunctionType *, const char*);
SOAP_FMAC3 fims__HashFunctionType * SOAP_FMAC4 soap_in_fims__HashFunctionType(struct soap*, const char*, fims__HashFunctionType *, const char*);

#ifndef soap_write_fims__HashFunctionType
#define soap_write_fims__HashFunctionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:HashFunctionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__HashFunctionType * SOAP_FMAC4 soap_get_fims__HashFunctionType(struct soap*, fims__HashFunctionType *, const char*, const char*);

#ifndef soap_read_fims__HashFunctionType
#define soap_read_fims__HashFunctionType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__HashFunctionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__HashFunctionType * SOAP_FMAC2 soap_instantiate_fims__HashFunctionType(struct soap*, int, const char*, const char*, size_t*);

inline fims__HashFunctionType * soap_new_fims__HashFunctionType(struct soap *soap, int n = -1) { return soap_instantiate_fims__HashFunctionType(soap, n, NULL, NULL, NULL); }

inline fims__HashFunctionType * soap_new_req_fims__HashFunctionType(struct soap *soap, enum fims__HashFunctionTypes __item) { fims__HashFunctionType *_p = soap_instantiate_fims__HashFunctionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__HashFunctionType::__item = __item; } return _p; }

inline fims__HashFunctionType * soap_new_set_fims__HashFunctionType(struct soap *soap, enum fims__HashFunctionTypes __item, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, char *__anyAttribute) { fims__HashFunctionType *_p = soap_instantiate_fims__HashFunctionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__HashFunctionType::__item = __item; _p->fims__HashFunctionType::typeLabel = typeLabel; _p->fims__HashFunctionType::typeDefinition = typeDefinition; _p->fims__HashFunctionType::typeLink = typeLink; _p->fims__HashFunctionType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__HashFunctionType(struct soap *soap, fims__HashFunctionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__HashFunctionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__StorageType
#define SOAP_TYPE_fims__StorageType (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__StorageType(struct soap*, const char*, int, const fims__StorageType *, const char*);
SOAP_FMAC3 fims__StorageType * SOAP_FMAC4 soap_in_fims__StorageType(struct soap*, const char*, fims__StorageType *, const char*);

#ifndef soap_write_fims__StorageType
#define soap_write_fims__StorageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:StorageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StorageType * SOAP_FMAC4 soap_get_fims__StorageType(struct soap*, fims__StorageType *, const char*, const char*);

#ifndef soap_read_fims__StorageType
#define soap_read_fims__StorageType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__StorageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__StorageType * SOAP_FMAC2 soap_instantiate_fims__StorageType(struct soap*, int, const char*, const char*, size_t*);

inline fims__StorageType * soap_new_fims__StorageType(struct soap *soap, int n = -1) { return soap_instantiate_fims__StorageType(soap, n, NULL, NULL, NULL); }

inline fims__StorageType * soap_new_req_fims__StorageType(struct soap *soap, enum fims__StorageTypes __item) { fims__StorageType *_p = soap_instantiate_fims__StorageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StorageType::__item = __item; } return _p; }

inline fims__StorageType * soap_new_set_fims__StorageType(struct soap *soap, enum fims__StorageTypes __item, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, char *__anyAttribute) { fims__StorageType *_p = soap_instantiate_fims__StorageType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__StorageType::__item = __item; _p->fims__StorageType::typeLabel = typeLabel; _p->fims__StorageType::typeDefinition = typeDefinition; _p->fims__StorageType::typeLink = typeLink; _p->fims__StorageType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__StorageType(struct soap *soap, fims__StorageType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__StorageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ProcessedInfoByFramesType
#define SOAP_TYPE_fims__ProcessedInfoByFramesType (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ProcessedInfoByFramesType(struct soap*, const char*, int, const fims__ProcessedInfoByFramesType *, const char*);
SOAP_FMAC3 fims__ProcessedInfoByFramesType * SOAP_FMAC4 soap_in_fims__ProcessedInfoByFramesType(struct soap*, const char*, fims__ProcessedInfoByFramesType *, const char*);

#ifndef soap_write_fims__ProcessedInfoByFramesType
#define soap_write_fims__ProcessedInfoByFramesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ProcessedInfoByFramesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ProcessedInfoByFramesType * SOAP_FMAC4 soap_get_fims__ProcessedInfoByFramesType(struct soap*, fims__ProcessedInfoByFramesType *, const char*, const char*);

#ifndef soap_read_fims__ProcessedInfoByFramesType
#define soap_read_fims__ProcessedInfoByFramesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ProcessedInfoByFramesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ProcessedInfoByFramesType * SOAP_FMAC2 soap_instantiate_fims__ProcessedInfoByFramesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ProcessedInfoByFramesType * soap_new_fims__ProcessedInfoByFramesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ProcessedInfoByFramesType(soap, n, NULL, NULL, NULL); }

inline fims__ProcessedInfoByFramesType * soap_new_req_fims__ProcessedInfoByFramesType(struct soap *soap, std::wstring& processedFramesCount, std::wstring& percentageProcessedCompleted1) { fims__ProcessedInfoByFramesType *_p = soap_instantiate_fims__ProcessedInfoByFramesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProcessedInfoByFramesType::processedFramesCount = processedFramesCount; _p->fims__ProcessedInfoType::percentageProcessedCompleted = percentageProcessedCompleted1; } return _p; }

inline fims__ProcessedInfoByFramesType * soap_new_set_fims__ProcessedInfoByFramesType(struct soap *soap, std::wstring& processedFramesCount, std::wstring& percentageProcessedCompleted1) { fims__ProcessedInfoByFramesType *_p = soap_instantiate_fims__ProcessedInfoByFramesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProcessedInfoByFramesType::processedFramesCount = processedFramesCount; _p->fims__ProcessedInfoType::percentageProcessedCompleted = percentageProcessedCompleted1; } return _p; }

inline void soap_delete_fims__ProcessedInfoByFramesType(struct soap *soap, fims__ProcessedInfoByFramesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ProcessedInfoByFramesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ProcessedInfoByBytesType
#define SOAP_TYPE_fims__ProcessedInfoByBytesType (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ProcessedInfoByBytesType(struct soap*, const char*, int, const fims__ProcessedInfoByBytesType *, const char*);
SOAP_FMAC3 fims__ProcessedInfoByBytesType * SOAP_FMAC4 soap_in_fims__ProcessedInfoByBytesType(struct soap*, const char*, fims__ProcessedInfoByBytesType *, const char*);

#ifndef soap_write_fims__ProcessedInfoByBytesType
#define soap_write_fims__ProcessedInfoByBytesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ProcessedInfoByBytesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ProcessedInfoByBytesType * SOAP_FMAC4 soap_get_fims__ProcessedInfoByBytesType(struct soap*, fims__ProcessedInfoByBytesType *, const char*, const char*);

#ifndef soap_read_fims__ProcessedInfoByBytesType
#define soap_read_fims__ProcessedInfoByBytesType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ProcessedInfoByBytesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ProcessedInfoByBytesType * SOAP_FMAC2 soap_instantiate_fims__ProcessedInfoByBytesType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ProcessedInfoByBytesType * soap_new_fims__ProcessedInfoByBytesType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ProcessedInfoByBytesType(soap, n, NULL, NULL, NULL); }

inline fims__ProcessedInfoByBytesType * soap_new_req_fims__ProcessedInfoByBytesType(struct soap *soap, ULONG64 processedBytesCount, std::wstring& percentageProcessedCompleted1) { fims__ProcessedInfoByBytesType *_p = soap_instantiate_fims__ProcessedInfoByBytesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProcessedInfoByBytesType::processedBytesCount = processedBytesCount; _p->fims__ProcessedInfoType::percentageProcessedCompleted = percentageProcessedCompleted1; } return _p; }

inline fims__ProcessedInfoByBytesType * soap_new_set_fims__ProcessedInfoByBytesType(struct soap *soap, ULONG64 processedBytesCount, std::wstring& percentageProcessedCompleted1) { fims__ProcessedInfoByBytesType *_p = soap_instantiate_fims__ProcessedInfoByBytesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProcessedInfoByBytesType::processedBytesCount = processedBytesCount; _p->fims__ProcessedInfoType::percentageProcessedCompleted = percentageProcessedCompleted1; } return _p; }

inline void soap_delete_fims__ProcessedInfoByBytesType(struct soap *soap, fims__ProcessedInfoByBytesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ProcessedInfoByBytesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ProcessedInfoType
#define SOAP_TYPE_fims__ProcessedInfoType (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ProcessedInfoType(struct soap*, const char*, int, const fims__ProcessedInfoType *, const char*);
SOAP_FMAC3 fims__ProcessedInfoType * SOAP_FMAC4 soap_in_fims__ProcessedInfoType(struct soap*, const char*, fims__ProcessedInfoType *, const char*);

#ifndef soap_write_fims__ProcessedInfoType
#define soap_write_fims__ProcessedInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ProcessedInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ProcessedInfoType * SOAP_FMAC4 soap_get_fims__ProcessedInfoType(struct soap*, fims__ProcessedInfoType *, const char*, const char*);

#ifndef soap_read_fims__ProcessedInfoType
#define soap_read_fims__ProcessedInfoType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ProcessedInfoType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ProcessedInfoType * SOAP_FMAC2 soap_instantiate_fims__ProcessedInfoType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ProcessedInfoType * soap_new_fims__ProcessedInfoType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ProcessedInfoType(soap, n, NULL, NULL, NULL); }

inline fims__ProcessedInfoType * soap_new_req_fims__ProcessedInfoType(struct soap *soap, std::wstring& percentageProcessedCompleted) { fims__ProcessedInfoType *_p = soap_instantiate_fims__ProcessedInfoType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProcessedInfoType::percentageProcessedCompleted = percentageProcessedCompleted; } return _p; }

inline fims__ProcessedInfoType * soap_new_set_fims__ProcessedInfoType(struct soap *soap, std::wstring& percentageProcessedCompleted) { fims__ProcessedInfoType *_p = soap_instantiate_fims__ProcessedInfoType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProcessedInfoType::percentageProcessedCompleted = percentageProcessedCompleted; } return _p; }

inline void soap_delete_fims__ProcessedInfoType(struct soap *soap, fims__ProcessedInfoType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ProcessedInfoType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__HashType
#define SOAP_TYPE_fims__HashType (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__HashType(struct soap*, const char*, int, const fims__HashType *, const char*);
SOAP_FMAC3 fims__HashType * SOAP_FMAC4 soap_in_fims__HashType(struct soap*, const char*, fims__HashType *, const char*);

#ifndef soap_write_fims__HashType
#define soap_write_fims__HashType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:HashType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__HashType * SOAP_FMAC4 soap_get_fims__HashType(struct soap*, fims__HashType *, const char*, const char*);

#ifndef soap_read_fims__HashType
#define soap_read_fims__HashType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__HashType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__HashType * SOAP_FMAC2 soap_instantiate_fims__HashType(struct soap*, int, const char*, const char*, size_t*);

inline fims__HashType * soap_new_fims__HashType(struct soap *soap, int n = -1) { return soap_instantiate_fims__HashType(soap, n, NULL, NULL, NULL); }

inline fims__HashType * soap_new_req_fims__HashType(struct soap *soap, fims__HashFunctionType *hashFunction, xsd__hexBinary& value) { fims__HashType *_p = soap_instantiate_fims__HashType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__HashType::hashFunction = hashFunction; _p->fims__HashType::value = value; } return _p; }

inline fims__HashType * soap_new_set_fims__HashType(struct soap *soap, fims__HashFunctionType *hashFunction, xsd__hexBinary& value) { fims__HashType *_p = soap_instantiate_fims__HashType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__HashType::hashFunction = hashFunction; _p->fims__HashType::value = value; } return _p; }

inline void soap_delete_fims__HashType(struct soap *soap, fims__HashType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__HashType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__RationalType
#define SOAP_TYPE_fims__RationalType (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__RationalType(struct soap*, const char*, int, const fims__RationalType *, const char*);
SOAP_FMAC3 fims__RationalType * SOAP_FMAC4 soap_in_fims__RationalType(struct soap*, const char*, fims__RationalType *, const char*);

#ifndef soap_write_fims__RationalType
#define soap_write_fims__RationalType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:RationalType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__RationalType * SOAP_FMAC4 soap_get_fims__RationalType(struct soap*, fims__RationalType *, const char*, const char*);

#ifndef soap_read_fims__RationalType
#define soap_read_fims__RationalType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__RationalType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__RationalType * SOAP_FMAC2 soap_instantiate_fims__RationalType(struct soap*, int, const char*, const char*, size_t*);

inline fims__RationalType * soap_new_fims__RationalType(struct soap *soap, int n = -1) { return soap_instantiate_fims__RationalType(soap, n, NULL, NULL, NULL); }

inline fims__RationalType * soap_new_req_fims__RationalType(struct soap *soap, LONG64 __item, std::wstring& numerator, std::wstring& denominator) { fims__RationalType *_p = soap_instantiate_fims__RationalType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__RationalType::__item = __item; _p->fims__RationalType::numerator = numerator; _p->fims__RationalType::denominator = denominator; } return _p; }

inline fims__RationalType * soap_new_set_fims__RationalType(struct soap *soap, LONG64 __item, std::wstring& numerator, std::wstring& denominator) { fims__RationalType *_p = soap_instantiate_fims__RationalType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__RationalType::__item = __item; _p->fims__RationalType::numerator = numerator; _p->fims__RationalType::denominator = denominator; } return _p; }

inline void soap_delete_fims__RationalType(struct soap *soap, fims__RationalType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__RationalType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__LengthType
#define SOAP_TYPE_fims__LengthType (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__LengthType(struct soap*, const char*, int, const fims__LengthType *, const char*);
SOAP_FMAC3 fims__LengthType * SOAP_FMAC4 soap_in_fims__LengthType(struct soap*, const char*, fims__LengthType *, const char*);

#ifndef soap_write_fims__LengthType
#define soap_write_fims__LengthType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:LengthType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__LengthType * SOAP_FMAC4 soap_get_fims__LengthType(struct soap*, fims__LengthType *, const char*, const char*);

#ifndef soap_read_fims__LengthType
#define soap_read_fims__LengthType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__LengthType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__LengthType * SOAP_FMAC2 soap_instantiate_fims__LengthType(struct soap*, int, const char*, const char*, size_t*);

inline fims__LengthType * soap_new_fims__LengthType(struct soap *soap, int n = -1) { return soap_instantiate_fims__LengthType(soap, n, NULL, NULL, NULL); }

inline fims__LengthType * soap_new_req_fims__LengthType(struct soap *soap, std::wstring& __item) { fims__LengthType *_p = soap_instantiate_fims__LengthType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__LengthType::__item = __item; } return _p; }

inline fims__LengthType * soap_new_set_fims__LengthType(struct soap *soap, std::wstring& __item, std::wstring *unit) { fims__LengthType *_p = soap_instantiate_fims__LengthType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__LengthType::__item = __item; _p->fims__LengthType::unit = unit; } return _p; }

inline void soap_delete_fims__LengthType(struct soap *soap, fims__LengthType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__LengthType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__TechnicalAttributeType
#define SOAP_TYPE_fims__TechnicalAttributeType (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__TechnicalAttributeType(struct soap*, const char*, int, const fims__TechnicalAttributeType *, const char*);
SOAP_FMAC3 fims__TechnicalAttributeType * SOAP_FMAC4 soap_in_fims__TechnicalAttributeType(struct soap*, const char*, fims__TechnicalAttributeType *, const char*);

#ifndef soap_write_fims__TechnicalAttributeType
#define soap_write_fims__TechnicalAttributeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:TechnicalAttributeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__TechnicalAttributeType * SOAP_FMAC4 soap_get_fims__TechnicalAttributeType(struct soap*, fims__TechnicalAttributeType *, const char*, const char*);

#ifndef soap_read_fims__TechnicalAttributeType
#define soap_read_fims__TechnicalAttributeType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__TechnicalAttributeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__TechnicalAttributeType * SOAP_FMAC2 soap_instantiate_fims__TechnicalAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline fims__TechnicalAttributeType * soap_new_fims__TechnicalAttributeType(struct soap *soap, int n = -1) { return soap_instantiate_fims__TechnicalAttributeType(soap, n, NULL, NULL, NULL); }

inline fims__TechnicalAttributeType * soap_new_req_fims__TechnicalAttributeType(struct soap *soap, std::wstring& __item) { fims__TechnicalAttributeType *_p = soap_instantiate_fims__TechnicalAttributeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__TechnicalAttributeType::__item = __item; } return _p; }

inline fims__TechnicalAttributeType * soap_new_set_fims__TechnicalAttributeType(struct soap *soap, std::wstring& __item, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink, std::wstring *formatLabel, std::wstring *formatDefinition, std::wstring *formatLink) { fims__TechnicalAttributeType *_p = soap_instantiate_fims__TechnicalAttributeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__TechnicalAttributeType::__item = __item; _p->fims__TechnicalAttributeType::typeLabel = typeLabel; _p->fims__TechnicalAttributeType::typeDefinition = typeDefinition; _p->fims__TechnicalAttributeType::typeLink = typeLink; _p->fims__TechnicalAttributeType::formatLabel = formatLabel; _p->fims__TechnicalAttributeType::formatDefinition = formatDefinition; _p->fims__TechnicalAttributeType::formatLink = formatLink; } return _p; }

inline void soap_delete_fims__TechnicalAttributeType(struct soap *soap, fims__TechnicalAttributeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__TechnicalAttributeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__TransformAtomType
#define SOAP_TYPE_fims__TransformAtomType (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__TransformAtomType(struct soap*, const char*, int, const fims__TransformAtomType *, const char*);
SOAP_FMAC3 fims__TransformAtomType * SOAP_FMAC4 soap_in_fims__TransformAtomType(struct soap*, const char*, fims__TransformAtomType *, const char*);

#ifndef soap_write_fims__TransformAtomType
#define soap_write_fims__TransformAtomType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:TransformAtomType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__TransformAtomType * SOAP_FMAC4 soap_get_fims__TransformAtomType(struct soap*, fims__TransformAtomType *, const char*, const char*);

#ifndef soap_read_fims__TransformAtomType
#define soap_read_fims__TransformAtomType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__TransformAtomType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__TransformAtomType * SOAP_FMAC2 soap_instantiate_fims__TransformAtomType(struct soap*, int, const char*, const char*, size_t*);

inline fims__TransformAtomType * soap_new_fims__TransformAtomType(struct soap *soap, int n = -1) { return soap_instantiate_fims__TransformAtomType(soap, n, NULL, NULL, NULL); }

inline fims__TransformAtomType * soap_new_req_fims__TransformAtomType(struct soap *soap) { fims__TransformAtomType *_p = soap_instantiate_fims__TransformAtomType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__TransformAtomType * soap_new_set_fims__TransformAtomType(struct soap *soap, fims__VideoFormatType *videoFormat, fims__AudioFormatType *audioFormat, fims__ContainerFormatType *containerFormat, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes) { fims__TransformAtomType *_p = soap_instantiate_fims__TransformAtomType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__TransformAtomType::videoFormat = videoFormat; _p->fims__TransformAtomType::audioFormat = audioFormat; _p->fims__TransformAtomType::containerFormat = containerFormat; _p->fims__TransformAtomType::ExtensionGroup = ExtensionGroup; _p->fims__TransformAtomType::ExtensionAttributes = ExtensionAttributes; } return _p; }

inline void soap_delete_fims__TransformAtomType(struct soap *soap, fims__TransformAtomType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__TransformAtomType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__TransferAtomType
#define SOAP_TYPE_fims__TransferAtomType (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__TransferAtomType(struct soap*, const char*, int, const fims__TransferAtomType *, const char*);
SOAP_FMAC3 fims__TransferAtomType * SOAP_FMAC4 soap_in_fims__TransferAtomType(struct soap*, const char*, fims__TransferAtomType *, const char*);

#ifndef soap_write_fims__TransferAtomType
#define soap_write_fims__TransferAtomType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:TransferAtomType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__TransferAtomType * SOAP_FMAC4 soap_get_fims__TransferAtomType(struct soap*, fims__TransferAtomType *, const char*, const char*);

#ifndef soap_read_fims__TransferAtomType
#define soap_read_fims__TransferAtomType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__TransferAtomType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__TransferAtomType * SOAP_FMAC2 soap_instantiate_fims__TransferAtomType(struct soap*, int, const char*, const char*, size_t*);

inline fims__TransferAtomType * soap_new_fims__TransferAtomType(struct soap *soap, int n = -1) { return soap_instantiate_fims__TransferAtomType(soap, n, NULL, NULL, NULL); }

inline fims__TransferAtomType * soap_new_req_fims__TransferAtomType(struct soap *soap, std::wstring& destination) { fims__TransferAtomType *_p = soap_instantiate_fims__TransferAtomType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__TransferAtomType::destination = destination; } return _p; }

inline fims__TransferAtomType * soap_new_set_fims__TransferAtomType(struct soap *soap, std::wstring& destination, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes) { fims__TransferAtomType *_p = soap_instantiate_fims__TransferAtomType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__TransferAtomType::destination = destination; _p->fims__TransferAtomType::ExtensionGroup = ExtensionGroup; _p->fims__TransferAtomType::ExtensionAttributes = ExtensionAttributes; } return _p; }

inline void soap_delete_fims__TransferAtomType(struct soap *soap, fims__TransferAtomType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__TransferAtomType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__EssencePlaceholderLocatorType
#define SOAP_TYPE_fims__EssencePlaceholderLocatorType (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__EssencePlaceholderLocatorType(struct soap*, const char*, int, const fims__EssencePlaceholderLocatorType *, const char*);
SOAP_FMAC3 fims__EssencePlaceholderLocatorType * SOAP_FMAC4 soap_in_fims__EssencePlaceholderLocatorType(struct soap*, const char*, fims__EssencePlaceholderLocatorType *, const char*);

#ifndef soap_write_fims__EssencePlaceholderLocatorType
#define soap_write_fims__EssencePlaceholderLocatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:EssencePlaceholderLocatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__EssencePlaceholderLocatorType * SOAP_FMAC4 soap_get_fims__EssencePlaceholderLocatorType(struct soap*, fims__EssencePlaceholderLocatorType *, const char*, const char*);

#ifndef soap_read_fims__EssencePlaceholderLocatorType
#define soap_read_fims__EssencePlaceholderLocatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__EssencePlaceholderLocatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__EssencePlaceholderLocatorType * SOAP_FMAC2 soap_instantiate_fims__EssencePlaceholderLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline fims__EssencePlaceholderLocatorType * soap_new_fims__EssencePlaceholderLocatorType(struct soap *soap, int n = -1) { return soap_instantiate_fims__EssencePlaceholderLocatorType(soap, n, NULL, NULL, NULL); }

inline fims__EssencePlaceholderLocatorType * soap_new_req_fims__EssencePlaceholderLocatorType(struct soap *soap, std::wstring& resourceID3) { fims__EssencePlaceholderLocatorType *_p = soap_instantiate_fims__EssencePlaceholderLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__EssencePlaceholderLocatorType * soap_new_set_fims__EssencePlaceholderLocatorType(struct soap *soap, fims__StorageType *storageType1, std::wstring *locatorInfo1, _fims__BMEssenceLocatorType_containerMimeType *containerMimeType1, fims__BMEssenceLocatorStatusType *status1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__EssencePlaceholderLocatorType *_p = soap_instantiate_fims__EssencePlaceholderLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorType::storageType = storageType1; _p->fims__BMEssenceLocatorType::locatorInfo = locatorInfo1; _p->fims__BMEssenceLocatorType::containerMimeType = containerMimeType1; _p->fims__BMEssenceLocatorType::status = status1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__EssencePlaceholderLocatorType(struct soap *soap, fims__EssencePlaceholderLocatorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__EssencePlaceholderLocatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__FolderLocatorType
#define SOAP_TYPE_fims__FolderLocatorType (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__FolderLocatorType(struct soap*, const char*, int, const fims__FolderLocatorType *, const char*);
SOAP_FMAC3 fims__FolderLocatorType * SOAP_FMAC4 soap_in_fims__FolderLocatorType(struct soap*, const char*, fims__FolderLocatorType *, const char*);

#ifndef soap_write_fims__FolderLocatorType
#define soap_write_fims__FolderLocatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:FolderLocatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__FolderLocatorType * SOAP_FMAC4 soap_get_fims__FolderLocatorType(struct soap*, fims__FolderLocatorType *, const char*, const char*);

#ifndef soap_read_fims__FolderLocatorType
#define soap_read_fims__FolderLocatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__FolderLocatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__FolderLocatorType * SOAP_FMAC2 soap_instantiate_fims__FolderLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline fims__FolderLocatorType * soap_new_fims__FolderLocatorType(struct soap *soap, int n = -1) { return soap_instantiate_fims__FolderLocatorType(soap, n, NULL, NULL, NULL); }

inline fims__FolderLocatorType * soap_new_req_fims__FolderLocatorType(struct soap *soap, std::wstring& resourceID3) { fims__FolderLocatorType *_p = soap_instantiate_fims__FolderLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__FolderLocatorType * soap_new_set_fims__FolderLocatorType(struct soap *soap, std::wstring *folder, fims__StorageType *storageType1, std::wstring *locatorInfo1, _fims__BMEssenceLocatorType_containerMimeType *containerMimeType1, fims__BMEssenceLocatorStatusType *status1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__FolderLocatorType *_p = soap_instantiate_fims__FolderLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__FolderLocatorType::folder = folder; _p->fims__BMEssenceLocatorType::storageType = storageType1; _p->fims__BMEssenceLocatorType::locatorInfo = locatorInfo1; _p->fims__BMEssenceLocatorType::containerMimeType = containerMimeType1; _p->fims__BMEssenceLocatorType::status = status1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__FolderLocatorType(struct soap *soap, fims__FolderLocatorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__FolderLocatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ListFileLocatorType
#define SOAP_TYPE_fims__ListFileLocatorType (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ListFileLocatorType(struct soap*, const char*, int, const fims__ListFileLocatorType *, const char*);
SOAP_FMAC3 fims__ListFileLocatorType * SOAP_FMAC4 soap_in_fims__ListFileLocatorType(struct soap*, const char*, fims__ListFileLocatorType *, const char*);

#ifndef soap_write_fims__ListFileLocatorType
#define soap_write_fims__ListFileLocatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ListFileLocatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ListFileLocatorType * SOAP_FMAC4 soap_get_fims__ListFileLocatorType(struct soap*, fims__ListFileLocatorType *, const char*, const char*);

#ifndef soap_read_fims__ListFileLocatorType
#define soap_read_fims__ListFileLocatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ListFileLocatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ListFileLocatorType * SOAP_FMAC2 soap_instantiate_fims__ListFileLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ListFileLocatorType * soap_new_fims__ListFileLocatorType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ListFileLocatorType(soap, n, NULL, NULL, NULL); }

inline fims__ListFileLocatorType * soap_new_req_fims__ListFileLocatorType(struct soap *soap, std::wstring& resourceID3) { fims__ListFileLocatorType *_p = soap_instantiate_fims__ListFileLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__ListFileLocatorType * soap_new_set_fims__ListFileLocatorType(struct soap *soap, std::vector<std::wstring >& file, fims__StorageType *storageType1, std::wstring *locatorInfo1, _fims__BMEssenceLocatorType_containerMimeType *containerMimeType1, fims__BMEssenceLocatorStatusType *status1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__ListFileLocatorType *_p = soap_instantiate_fims__ListFileLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ListFileLocatorType::file = file; _p->fims__BMEssenceLocatorType::storageType = storageType1; _p->fims__BMEssenceLocatorType::locatorInfo = locatorInfo1; _p->fims__BMEssenceLocatorType::containerMimeType = containerMimeType1; _p->fims__BMEssenceLocatorType::status = status1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__ListFileLocatorType(struct soap *soap, fims__ListFileLocatorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ListFileLocatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__SimpleFileLocatorType
#define SOAP_TYPE_fims__SimpleFileLocatorType (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__SimpleFileLocatorType(struct soap*, const char*, int, const fims__SimpleFileLocatorType *, const char*);
SOAP_FMAC3 fims__SimpleFileLocatorType * SOAP_FMAC4 soap_in_fims__SimpleFileLocatorType(struct soap*, const char*, fims__SimpleFileLocatorType *, const char*);

#ifndef soap_write_fims__SimpleFileLocatorType
#define soap_write_fims__SimpleFileLocatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:SimpleFileLocatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SimpleFileLocatorType * SOAP_FMAC4 soap_get_fims__SimpleFileLocatorType(struct soap*, fims__SimpleFileLocatorType *, const char*, const char*);

#ifndef soap_read_fims__SimpleFileLocatorType
#define soap_read_fims__SimpleFileLocatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__SimpleFileLocatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__SimpleFileLocatorType * SOAP_FMAC2 soap_instantiate_fims__SimpleFileLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline fims__SimpleFileLocatorType * soap_new_fims__SimpleFileLocatorType(struct soap *soap, int n = -1) { return soap_instantiate_fims__SimpleFileLocatorType(soap, n, NULL, NULL, NULL); }

inline fims__SimpleFileLocatorType * soap_new_req_fims__SimpleFileLocatorType(struct soap *soap, std::wstring& resourceID3) { fims__SimpleFileLocatorType *_p = soap_instantiate_fims__SimpleFileLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__SimpleFileLocatorType * soap_new_set_fims__SimpleFileLocatorType(struct soap *soap, std::wstring *file, fims__StorageType *storageType1, std::wstring *locatorInfo1, _fims__BMEssenceLocatorType_containerMimeType *containerMimeType1, fims__BMEssenceLocatorStatusType *status1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__SimpleFileLocatorType *_p = soap_instantiate_fims__SimpleFileLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__SimpleFileLocatorType::file = file; _p->fims__BMEssenceLocatorType::storageType = storageType1; _p->fims__BMEssenceLocatorType::locatorInfo = locatorInfo1; _p->fims__BMEssenceLocatorType::containerMimeType = containerMimeType1; _p->fims__BMEssenceLocatorType::status = status1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__SimpleFileLocatorType(struct soap *soap, fims__SimpleFileLocatorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__SimpleFileLocatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMEssenceLocatorType
#define SOAP_TYPE_fims__BMEssenceLocatorType (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMEssenceLocatorType(struct soap*, const char*, int, const fims__BMEssenceLocatorType *, const char*);
SOAP_FMAC3 fims__BMEssenceLocatorType * SOAP_FMAC4 soap_in_fims__BMEssenceLocatorType(struct soap*, const char*, fims__BMEssenceLocatorType *, const char*);

#ifndef soap_write_fims__BMEssenceLocatorType
#define soap_write_fims__BMEssenceLocatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMEssenceLocatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMEssenceLocatorType * SOAP_FMAC4 soap_get_fims__BMEssenceLocatorType(struct soap*, fims__BMEssenceLocatorType *, const char*, const char*);

#ifndef soap_read_fims__BMEssenceLocatorType
#define soap_read_fims__BMEssenceLocatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMEssenceLocatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMEssenceLocatorType * SOAP_FMAC2 soap_instantiate_fims__BMEssenceLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMEssenceLocatorType * soap_new_fims__BMEssenceLocatorType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMEssenceLocatorType(soap, n, NULL, NULL, NULL); }

inline fims__BMEssenceLocatorType * soap_new_req_fims__BMEssenceLocatorType(struct soap *soap, std::wstring& resourceID2) { fims__BMEssenceLocatorType *_p = soap_instantiate_fims__BMEssenceLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__BMEssenceLocatorType * soap_new_set_fims__BMEssenceLocatorType(struct soap *soap, fims__StorageType *storageType, std::wstring *locatorInfo, _fims__BMEssenceLocatorType_containerMimeType *containerMimeType, fims__BMEssenceLocatorStatusType *status, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__BMEssenceLocatorType *_p = soap_instantiate_fims__BMEssenceLocatorType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMEssenceLocatorType::storageType = storageType; _p->fims__BMEssenceLocatorType::locatorInfo = locatorInfo; _p->fims__BMEssenceLocatorType::containerMimeType = containerMimeType; _p->fims__BMEssenceLocatorType::status = status; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__BMEssenceLocatorType(struct soap *soap, fims__BMEssenceLocatorType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMEssenceLocatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMContentFormatType
#define SOAP_TYPE_fims__BMContentFormatType (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMContentFormatType(struct soap*, const char*, int, const fims__BMContentFormatType *, const char*);
SOAP_FMAC3 fims__BMContentFormatType * SOAP_FMAC4 soap_in_fims__BMContentFormatType(struct soap*, const char*, fims__BMContentFormatType *, const char*);

#ifndef soap_write_fims__BMContentFormatType
#define soap_write_fims__BMContentFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMContentFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentFormatType * SOAP_FMAC4 soap_get_fims__BMContentFormatType(struct soap*, fims__BMContentFormatType *, const char*, const char*);

#ifndef soap_read_fims__BMContentFormatType
#define soap_read_fims__BMContentFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMContentFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMContentFormatType * SOAP_FMAC2 soap_instantiate_fims__BMContentFormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMContentFormatType * soap_new_fims__BMContentFormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMContentFormatType(soap, n, NULL, NULL, NULL); }

inline fims__BMContentFormatType * soap_new_req_fims__BMContentFormatType(struct soap *soap, std::wstring& resourceID2) { fims__BMContentFormatType *_p = soap_instantiate_fims__BMContentFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__BMContentFormatType * soap_new_set_fims__BMContentFormatType(struct soap *soap, fims__BMEssenceLocatorsType *bmEssenceLocators, _fims__formatCollection *formatCollection, fimstime__DurationType *duration, fims__HashType *hash, ULONG64 *packageSize, _fims__BMContentFormatType_mimeType *mimeType, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__BMContentFormatType *_p = soap_instantiate_fims__BMContentFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentFormatType::bmEssenceLocators = bmEssenceLocators; _p->fims__BMContentFormatType::formatCollection = formatCollection; _p->fims__BMContentFormatType::duration = duration; _p->fims__BMContentFormatType::hash = hash; _p->fims__BMContentFormatType::packageSize = packageSize; _p->fims__BMContentFormatType::mimeType = mimeType; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__BMContentFormatType(struct soap *soap, fims__BMContentFormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMContentFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__DescriptionType
#define SOAP_TYPE_fims__DescriptionType (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__DescriptionType(struct soap*, const char*, int, const fims__DescriptionType *, const char*);
SOAP_FMAC3 fims__DescriptionType * SOAP_FMAC4 soap_in_fims__DescriptionType(struct soap*, const char*, fims__DescriptionType *, const char*);

#ifndef soap_write_fims__DescriptionType
#define soap_write_fims__DescriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:DescriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__DescriptionType * SOAP_FMAC4 soap_get_fims__DescriptionType(struct soap*, fims__DescriptionType *, const char*, const char*);

#ifndef soap_read_fims__DescriptionType
#define soap_read_fims__DescriptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__DescriptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__DescriptionType * SOAP_FMAC2 soap_instantiate_fims__DescriptionType(struct soap*, int, const char*, const char*, size_t*);

inline fims__DescriptionType * soap_new_fims__DescriptionType(struct soap *soap, int n = -1) { return soap_instantiate_fims__DescriptionType(soap, n, NULL, NULL, NULL); }

inline fims__DescriptionType * soap_new_req_fims__DescriptionType(struct soap *soap, std::wstring& resourceID2) { fims__DescriptionType *_p = soap_instantiate_fims__DescriptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__DescriptionType * soap_new_set_fims__DescriptionType(struct soap *soap, fimsdescription__bmContentDescriptionType *fimsdescription__bmContentDescription, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__DescriptionType *_p = soap_instantiate_fims__DescriptionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__DescriptionType::fimsdescription__bmContentDescription = fimsdescription__bmContentDescription; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__DescriptionType(struct soap *soap, fims__DescriptionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__DescriptionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMContentType
#define SOAP_TYPE_fims__BMContentType (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMContentType(struct soap*, const char*, int, const fims__BMContentType *, const char*);
SOAP_FMAC3 fims__BMContentType * SOAP_FMAC4 soap_in_fims__BMContentType(struct soap*, const char*, fims__BMContentType *, const char*);

#ifndef soap_write_fims__BMContentType
#define soap_write_fims__BMContentType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMContentType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentType * SOAP_FMAC4 soap_get_fims__BMContentType(struct soap*, fims__BMContentType *, const char*, const char*);

#ifndef soap_read_fims__BMContentType
#define soap_read_fims__BMContentType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMContentType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMContentType * SOAP_FMAC2 soap_instantiate_fims__BMContentType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMContentType * soap_new_fims__BMContentType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMContentType(soap, n, NULL, NULL, NULL); }

inline fims__BMContentType * soap_new_req_fims__BMContentType(struct soap *soap, std::wstring& resourceID2) { fims__BMContentType *_p = soap_instantiate_fims__BMContentType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__BMContentType * soap_new_set_fims__BMContentType(struct soap *soap, fims__BMContentFormatsType *bmContentFormats, fims__DescriptionsType *descriptions, fims__BMContentStatusType *status, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__BMContentType *_p = soap_instantiate_fims__BMContentType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMContentType::bmContentFormats = bmContentFormats; _p->fims__BMContentType::descriptions = descriptions; _p->fims__BMContentType::status = status; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__BMContentType(struct soap *soap, fims__BMContentType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMContentType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMObjectType
#define SOAP_TYPE_fims__BMObjectType (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMObjectType(struct soap*, const char*, int, const fims__BMObjectType *, const char*);
SOAP_FMAC3 fims__BMObjectType * SOAP_FMAC4 soap_in_fims__BMObjectType(struct soap*, const char*, fims__BMObjectType *, const char*);

#ifndef soap_write_fims__BMObjectType
#define soap_write_fims__BMObjectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMObjectType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMObjectType * SOAP_FMAC4 soap_get_fims__BMObjectType(struct soap*, fims__BMObjectType *, const char*, const char*);

#ifndef soap_read_fims__BMObjectType
#define soap_read_fims__BMObjectType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMObjectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMObjectType * SOAP_FMAC2 soap_instantiate_fims__BMObjectType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMObjectType * soap_new_fims__BMObjectType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMObjectType(soap, n, NULL, NULL, NULL); }

inline fims__BMObjectType * soap_new_req_fims__BMObjectType(struct soap *soap, std::wstring& resourceID2) { fims__BMObjectType *_p = soap_instantiate_fims__BMObjectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__BMObjectType * soap_new_set_fims__BMObjectType(struct soap *soap, fims__BMContentsType *bmContents, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__BMObjectType *_p = soap_instantiate_fims__BMObjectType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMObjectType::bmContents = bmContents; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__BMObjectType(struct soap *soap, fims__BMObjectType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMObjectType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CodecType
#define SOAP_TYPE_fims__CodecType (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CodecType(struct soap*, const char*, int, const fims__CodecType *, const char*);
SOAP_FMAC3 fims__CodecType * SOAP_FMAC4 soap_in_fims__CodecType(struct soap*, const char*, fims__CodecType *, const char*);

#ifndef soap_write_fims__CodecType
#define soap_write_fims__CodecType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CodecType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CodecType * SOAP_FMAC4 soap_get_fims__CodecType(struct soap*, fims__CodecType *, const char*, const char*);

#ifndef soap_read_fims__CodecType
#define soap_read_fims__CodecType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CodecType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CodecType * SOAP_FMAC2 soap_instantiate_fims__CodecType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CodecType * soap_new_fims__CodecType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CodecType(soap, n, NULL, NULL, NULL); }

inline fims__CodecType * soap_new_req_fims__CodecType(struct soap *soap) { fims__CodecType *_p = soap_instantiate_fims__CodecType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__CodecType * soap_new_set_fims__CodecType(struct soap *soap, std::wstring *name, std::wstring *vendor, std::wstring *version, std::wstring *family, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink) { fims__CodecType *_p = soap_instantiate_fims__CodecType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CodecType::name = name; _p->fims__CodecType::vendor = vendor; _p->fims__CodecType::version = version; _p->fims__CodecType::family = family; _p->fims__CodecType::typeLabel = typeLabel; _p->fims__CodecType::typeDefinition = typeDefinition; _p->fims__CodecType::typeLink = typeLink; } return _p; }

inline void soap_delete_fims__CodecType(struct soap *soap, fims__CodecType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CodecType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__BMTrackType
#define SOAP_TYPE_fims__BMTrackType (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__BMTrackType(struct soap*, const char*, int, const fims__BMTrackType *, const char*);
SOAP_FMAC3 fims__BMTrackType * SOAP_FMAC4 soap_in_fims__BMTrackType(struct soap*, const char*, fims__BMTrackType *, const char*);

#ifndef soap_write_fims__BMTrackType
#define soap_write_fims__BMTrackType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:BMTrackType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMTrackType * SOAP_FMAC4 soap_get_fims__BMTrackType(struct soap*, fims__BMTrackType *, const char*, const char*);

#ifndef soap_read_fims__BMTrackType
#define soap_read_fims__BMTrackType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__BMTrackType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__BMTrackType * SOAP_FMAC2 soap_instantiate_fims__BMTrackType(struct soap*, int, const char*, const char*, size_t*);

inline fims__BMTrackType * soap_new_fims__BMTrackType(struct soap *soap, int n = -1) { return soap_instantiate_fims__BMTrackType(soap, n, NULL, NULL, NULL); }

inline fims__BMTrackType * soap_new_req_fims__BMTrackType(struct soap *soap) { fims__BMTrackType *_p = soap_instantiate_fims__BMTrackType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__BMTrackType * soap_new_set_fims__BMTrackType(struct soap *soap, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, std::wstring *trackID, std::wstring *trackName, std::wstring *language, std::wstring *typeLabel, std::wstring *typeDefinition, std::wstring *typeLink) { fims__BMTrackType *_p = soap_instantiate_fims__BMTrackType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__BMTrackType::ExtensionGroup = ExtensionGroup; _p->fims__BMTrackType::ExtensionAttributes = ExtensionAttributes; _p->fims__BMTrackType::trackID = trackID; _p->fims__BMTrackType::trackName = trackName; _p->fims__BMTrackType::language = language; _p->fims__BMTrackType::typeLabel = typeLabel; _p->fims__BMTrackType::typeDefinition = typeDefinition; _p->fims__BMTrackType::typeLink = typeLink; } return _p; }

inline void soap_delete_fims__BMTrackType(struct soap *soap, fims__BMTrackType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__BMTrackType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ContainerFormatType
#define SOAP_TYPE_fims__ContainerFormatType (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ContainerFormatType(struct soap*, const char*, int, const fims__ContainerFormatType *, const char*);
SOAP_FMAC3 fims__ContainerFormatType * SOAP_FMAC4 soap_in_fims__ContainerFormatType(struct soap*, const char*, fims__ContainerFormatType *, const char*);

#ifndef soap_write_fims__ContainerFormatType
#define soap_write_fims__ContainerFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ContainerFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContainerFormatType * SOAP_FMAC4 soap_get_fims__ContainerFormatType(struct soap*, fims__ContainerFormatType *, const char*, const char*);

#ifndef soap_read_fims__ContainerFormatType
#define soap_read_fims__ContainerFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ContainerFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ContainerFormatType * SOAP_FMAC2 soap_instantiate_fims__ContainerFormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ContainerFormatType * soap_new_fims__ContainerFormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ContainerFormatType(soap, n, NULL, NULL, NULL); }

inline fims__ContainerFormatType * soap_new_req_fims__ContainerFormatType(struct soap *soap, std::wstring& resourceID3) { fims__ContainerFormatType *_p = soap_instantiate_fims__ContainerFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__ContainerFormatType * soap_new_set_fims__ContainerFormatType(struct soap *soap, _fims__ContainerFormatType_containerFormat *containerFormat, std::vector<fims__TechnicalAttributeType * >& technicalAttribute1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__ContainerFormatType *_p = soap_instantiate_fims__ContainerFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ContainerFormatType::containerFormat = containerFormat; _p->fims__FormatType::technicalAttribute = technicalAttribute1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__ContainerFormatType(struct soap *soap, fims__ContainerFormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ContainerFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__AncillaryDataFormatType
#define SOAP_TYPE_fims__AncillaryDataFormatType (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__AncillaryDataFormatType(struct soap*, const char*, int, const fims__AncillaryDataFormatType *, const char*);
SOAP_FMAC3 fims__AncillaryDataFormatType * SOAP_FMAC4 soap_in_fims__AncillaryDataFormatType(struct soap*, const char*, fims__AncillaryDataFormatType *, const char*);

#ifndef soap_write_fims__AncillaryDataFormatType
#define soap_write_fims__AncillaryDataFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:AncillaryDataFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__AncillaryDataFormatType * SOAP_FMAC4 soap_get_fims__AncillaryDataFormatType(struct soap*, fims__AncillaryDataFormatType *, const char*, const char*);

#ifndef soap_read_fims__AncillaryDataFormatType
#define soap_read_fims__AncillaryDataFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__AncillaryDataFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__AncillaryDataFormatType * SOAP_FMAC2 soap_instantiate_fims__AncillaryDataFormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__AncillaryDataFormatType * soap_new_fims__AncillaryDataFormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__AncillaryDataFormatType(soap, n, NULL, NULL, NULL); }

inline fims__AncillaryDataFormatType * soap_new_req_fims__AncillaryDataFormatType(struct soap *soap) { fims__AncillaryDataFormatType *_p = soap_instantiate_fims__AncillaryDataFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__AncillaryDataFormatType * soap_new_set_fims__AncillaryDataFormatType(struct soap *soap, std::wstring *DID, std::wstring *SDID, std::wstring *lineNumber, std::wstring *wrappingType, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes) { fims__AncillaryDataFormatType *_p = soap_instantiate_fims__AncillaryDataFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__AncillaryDataFormatType::DID = DID; _p->fims__AncillaryDataFormatType::SDID = SDID; _p->fims__AncillaryDataFormatType::lineNumber = lineNumber; _p->fims__AncillaryDataFormatType::wrappingType = wrappingType; _p->fims__AncillaryDataFormatType::ExtensionGroup = ExtensionGroup; _p->fims__AncillaryDataFormatType::ExtensionAttributes = ExtensionAttributes; } return _p; }

inline void soap_delete_fims__AncillaryDataFormatType(struct soap *soap, fims__AncillaryDataFormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__AncillaryDataFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__CaptioningFormatType
#define SOAP_TYPE_fims__CaptioningFormatType (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__CaptioningFormatType(struct soap*, const char*, int, const fims__CaptioningFormatType *, const char*);
SOAP_FMAC3 fims__CaptioningFormatType * SOAP_FMAC4 soap_in_fims__CaptioningFormatType(struct soap*, const char*, fims__CaptioningFormatType *, const char*);

#ifndef soap_write_fims__CaptioningFormatType
#define soap_write_fims__CaptioningFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:CaptioningFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CaptioningFormatType * SOAP_FMAC4 soap_get_fims__CaptioningFormatType(struct soap*, fims__CaptioningFormatType *, const char*, const char*);

#ifndef soap_read_fims__CaptioningFormatType
#define soap_read_fims__CaptioningFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__CaptioningFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__CaptioningFormatType * SOAP_FMAC2 soap_instantiate_fims__CaptioningFormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__CaptioningFormatType * soap_new_fims__CaptioningFormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__CaptioningFormatType(soap, n, NULL, NULL, NULL); }

inline fims__CaptioningFormatType * soap_new_req_fims__CaptioningFormatType(struct soap *soap, std::wstring& __item) { fims__CaptioningFormatType *_p = soap_instantiate_fims__CaptioningFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CaptioningFormatType::__item = __item; } return _p; }

inline fims__CaptioningFormatType * soap_new_set_fims__CaptioningFormatType(struct soap *soap, std::wstring& __item, std::wstring *captioningSourceUri, std::wstring *language, std::wstring *formatLabel, std::wstring *formatDefinition, std::wstring *formatLink, char *__anyAttribute) { fims__CaptioningFormatType *_p = soap_instantiate_fims__CaptioningFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__CaptioningFormatType::__item = __item; _p->fims__CaptioningFormatType::captioningSourceUri = captioningSourceUri; _p->fims__CaptioningFormatType::language = language; _p->fims__CaptioningFormatType::formatLabel = formatLabel; _p->fims__CaptioningFormatType::formatDefinition = formatDefinition; _p->fims__CaptioningFormatType::formatLink = formatLink; _p->fims__CaptioningFormatType::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__CaptioningFormatType(struct soap *soap, fims__CaptioningFormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__CaptioningFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__DataFormatType
#define SOAP_TYPE_fims__DataFormatType (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__DataFormatType(struct soap*, const char*, int, const fims__DataFormatType *, const char*);
SOAP_FMAC3 fims__DataFormatType * SOAP_FMAC4 soap_in_fims__DataFormatType(struct soap*, const char*, fims__DataFormatType *, const char*);

#ifndef soap_write_fims__DataFormatType
#define soap_write_fims__DataFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:DataFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__DataFormatType * SOAP_FMAC4 soap_get_fims__DataFormatType(struct soap*, fims__DataFormatType *, const char*, const char*);

#ifndef soap_read_fims__DataFormatType
#define soap_read_fims__DataFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__DataFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__DataFormatType * SOAP_FMAC2 soap_instantiate_fims__DataFormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__DataFormatType * soap_new_fims__DataFormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__DataFormatType(soap, n, NULL, NULL, NULL); }

inline fims__DataFormatType * soap_new_req_fims__DataFormatType(struct soap *soap, std::wstring& resourceID3) { fims__DataFormatType *_p = soap_instantiate_fims__DataFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__DataFormatType * soap_new_set_fims__DataFormatType(struct soap *soap, std::vector<fims__CaptioningFormatType * >& captioningFormat, std::vector<fims__AncillaryDataFormatType * >& ancillaryDataFormat, std::vector<fims__TechnicalAttributeType * >& technicalAttribute1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__DataFormatType *_p = soap_instantiate_fims__DataFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__DataFormatType::captioningFormat = captioningFormat; _p->fims__DataFormatType::ancillaryDataFormat = ancillaryDataFormat; _p->fims__FormatType::technicalAttribute = technicalAttribute1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__DataFormatType(struct soap *soap, fims__DataFormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__DataFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__AudioFormatType
#define SOAP_TYPE_fims__AudioFormatType (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__AudioFormatType(struct soap*, const char*, int, const fims__AudioFormatType *, const char*);
SOAP_FMAC3 fims__AudioFormatType * SOAP_FMAC4 soap_in_fims__AudioFormatType(struct soap*, const char*, fims__AudioFormatType *, const char*);

#ifndef soap_write_fims__AudioFormatType
#define soap_write_fims__AudioFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:AudioFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__AudioFormatType * SOAP_FMAC4 soap_get_fims__AudioFormatType(struct soap*, fims__AudioFormatType *, const char*, const char*);

#ifndef soap_read_fims__AudioFormatType
#define soap_read_fims__AudioFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__AudioFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__AudioFormatType * SOAP_FMAC2 soap_instantiate_fims__AudioFormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__AudioFormatType * soap_new_fims__AudioFormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__AudioFormatType(soap, n, NULL, NULL, NULL); }

inline fims__AudioFormatType * soap_new_req_fims__AudioFormatType(struct soap *soap, std::wstring& resourceID3) { fims__AudioFormatType *_p = soap_instantiate_fims__AudioFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__AudioFormatType * soap_new_set_fims__AudioFormatType(struct soap *soap, std::wstring *samplingRate, fims__CodecType *audioEncoding, _fims__AudioFormatType_trackConfiguration *trackConfiguration, std::vector<fims__BMTrackType * >& audioTrack, std::wstring *channels, std::wstring *bitRate, enum fims__BitRateModeType *bitRateMode, std::wstring *sampleSize, enum fims__AudioSampleType *sampleType, std::vector<fims__TechnicalAttributeType * >& technicalAttribute1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__AudioFormatType *_p = soap_instantiate_fims__AudioFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__AudioFormatType::samplingRate = samplingRate; _p->fims__AudioFormatType::audioEncoding = audioEncoding; _p->fims__AudioFormatType::trackConfiguration = trackConfiguration; _p->fims__AudioFormatType::audioTrack = audioTrack; _p->fims__AudioFormatType::channels = channels; _p->fims__AudioFormatType::bitRate = bitRate; _p->fims__AudioFormatType::bitRateMode = bitRateMode; _p->fims__AudioFormatType::sampleSize = sampleSize; _p->fims__AudioFormatType::sampleType = sampleType; _p->fims__FormatType::technicalAttribute = technicalAttribute1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__AudioFormatType(struct soap *soap, fims__AudioFormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__AudioFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__VideoFormatType
#define SOAP_TYPE_fims__VideoFormatType (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__VideoFormatType(struct soap*, const char*, int, const fims__VideoFormatType *, const char*);
SOAP_FMAC3 fims__VideoFormatType * SOAP_FMAC4 soap_in_fims__VideoFormatType(struct soap*, const char*, fims__VideoFormatType *, const char*);

#ifndef soap_write_fims__VideoFormatType
#define soap_write_fims__VideoFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:VideoFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__VideoFormatType * SOAP_FMAC4 soap_get_fims__VideoFormatType(struct soap*, fims__VideoFormatType *, const char*, const char*);

#ifndef soap_read_fims__VideoFormatType
#define soap_read_fims__VideoFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__VideoFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__VideoFormatType * SOAP_FMAC2 soap_instantiate_fims__VideoFormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__VideoFormatType * soap_new_fims__VideoFormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__VideoFormatType(soap, n, NULL, NULL, NULL); }

inline fims__VideoFormatType * soap_new_req_fims__VideoFormatType(struct soap *soap, std::wstring& resourceID3) { fims__VideoFormatType *_p = soap_instantiate_fims__VideoFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID3; } return _p; }

inline fims__VideoFormatType * soap_new_set_fims__VideoFormatType(struct soap *soap, fims__LengthType *displayWidth, fims__LengthType *displayHeight, fims__RationalType *frameRate, fims__RationalType *aspectRatio, fims__CodecType *videoEncoding, std::vector<fims__BMTrackType * >& videoTrack, std::wstring *bitRate, enum fims__BitRateModeType *bitRateMode, std::wstring *lines, enum fims__ScanningFormatType *scanningFormat, enum fims__ScanningOrderType *scanningOrder, bool *noiseFilter, std::vector<fims__TechnicalAttributeType * >& technicalAttribute1, time_t *resourceCreationDate2, time_t *resourceModifiedDate2, bool *serviceGeneratedElement2, bool *isFullyPopulated2, fims__AsyncEndpointType *notifyAt2, fims__ExtensionGroup *ExtensionGroup2, fims__ExtensionAttributes *ExtensionAttributes2, std::wstring& resourceID3, std::wstring *revisionID3, std::wstring *location3) { fims__VideoFormatType *_p = soap_instantiate_fims__VideoFormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__VideoFormatType::displayWidth = displayWidth; _p->fims__VideoFormatType::displayHeight = displayHeight; _p->fims__VideoFormatType::frameRate = frameRate; _p->fims__VideoFormatType::aspectRatio = aspectRatio; _p->fims__VideoFormatType::videoEncoding = videoEncoding; _p->fims__VideoFormatType::videoTrack = videoTrack; _p->fims__VideoFormatType::bitRate = bitRate; _p->fims__VideoFormatType::bitRateMode = bitRateMode; _p->fims__VideoFormatType::lines = lines; _p->fims__VideoFormatType::scanningFormat = scanningFormat; _p->fims__VideoFormatType::scanningOrder = scanningOrder; _p->fims__VideoFormatType::noiseFilter = noiseFilter; _p->fims__FormatType::technicalAttribute = technicalAttribute1; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate2; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate2; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement2; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated2; _p->fims__ResourceType::notifyAt = notifyAt2; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup2; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes2; _p->fims__ResourceReferenceType::resourceID = resourceID3; _p->fims__ResourceReferenceType::revisionID = revisionID3; _p->fims__ResourceReferenceType::location = location3; } return _p; }

inline void soap_delete_fims__VideoFormatType(struct soap *soap, fims__VideoFormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__VideoFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__FormatType
#define SOAP_TYPE_fims__FormatType (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__FormatType(struct soap*, const char*, int, const fims__FormatType *, const char*);
SOAP_FMAC3 fims__FormatType * SOAP_FMAC4 soap_in_fims__FormatType(struct soap*, const char*, fims__FormatType *, const char*);

#ifndef soap_write_fims__FormatType
#define soap_write_fims__FormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:FormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__FormatType * SOAP_FMAC4 soap_get_fims__FormatType(struct soap*, fims__FormatType *, const char*, const char*);

#ifndef soap_read_fims__FormatType
#define soap_read_fims__FormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__FormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__FormatType * SOAP_FMAC2 soap_instantiate_fims__FormatType(struct soap*, int, const char*, const char*, size_t*);

inline fims__FormatType * soap_new_fims__FormatType(struct soap *soap, int n = -1) { return soap_instantiate_fims__FormatType(soap, n, NULL, NULL, NULL); }

inline fims__FormatType * soap_new_req_fims__FormatType(struct soap *soap, std::wstring& resourceID2) { fims__FormatType *_p = soap_instantiate_fims__FormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__FormatType * soap_new_set_fims__FormatType(struct soap *soap, std::vector<fims__TechnicalAttributeType * >& technicalAttribute, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__FormatType *_p = soap_instantiate_fims__FormatType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__FormatType::technicalAttribute = technicalAttribute; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__FormatType(struct soap *soap, fims__FormatType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__FormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__JobType
#define SOAP_TYPE_fims__JobType (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__JobType(struct soap*, const char*, int, const fims__JobType *, const char*);
SOAP_FMAC3 fims__JobType * SOAP_FMAC4 soap_in_fims__JobType(struct soap*, const char*, fims__JobType *, const char*);

#ifndef soap_write_fims__JobType
#define soap_write_fims__JobType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:JobType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__JobType * SOAP_FMAC4 soap_get_fims__JobType(struct soap*, fims__JobType *, const char*, const char*);

#ifndef soap_read_fims__JobType
#define soap_read_fims__JobType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__JobType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__JobType * SOAP_FMAC2 soap_instantiate_fims__JobType(struct soap*, int, const char*, const char*, size_t*);

inline fims__JobType * soap_new_fims__JobType(struct soap *soap, int n = -1) { return soap_instantiate_fims__JobType(soap, n, NULL, NULL, NULL); }

inline fims__JobType * soap_new_req_fims__JobType(struct soap *soap, std::wstring& resourceID2) { fims__JobType *_p = soap_instantiate_fims__JobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__JobType * soap_new_set_fims__JobType(struct soap *soap, enum fims__JobStatusType *status, std::wstring *statusDescription, std::wstring *serviceProviderJobID, fims__QueueType *queueReference, fims__JobsType *tasks, std::wstring *operationName, fims__BMObjectsType *bmObjects, enum fims__PriorityType *priority, fims__StartJobType *startJob, time_t *finishBefore, LONG64 *estimatedCompletionDuration, std::wstring *currentQueuePosition, time_t *jobStartedTime, LONG64 *jobElapsedTime, time_t *jobCompletedTime, fims__ProcessedInfoType *processed, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__JobType *_p = soap_instantiate_fims__JobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__JobType::status = status; _p->fims__JobType::statusDescription = statusDescription; _p->fims__JobType::serviceProviderJobID = serviceProviderJobID; _p->fims__JobType::queueReference = queueReference; _p->fims__JobType::tasks = tasks; _p->fims__JobType::operationName = operationName; _p->fims__JobType::bmObjects = bmObjects; _p->fims__JobType::priority = priority; _p->fims__JobType::startJob = startJob; _p->fims__JobType::finishBefore = finishBefore; _p->fims__JobType::estimatedCompletionDuration = estimatedCompletionDuration; _p->fims__JobType::currentQueuePosition = currentQueuePosition; _p->fims__JobType::jobStartedTime = jobStartedTime; _p->fims__JobType::jobElapsedTime = jobElapsedTime; _p->fims__JobType::jobCompletedTime = jobCompletedTime; _p->fims__JobType::processed = processed; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__JobType(struct soap *soap, fims__JobType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__JobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__QueueType
#define SOAP_TYPE_fims__QueueType (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__QueueType(struct soap*, const char*, int, const fims__QueueType *, const char*);
SOAP_FMAC3 fims__QueueType * SOAP_FMAC4 soap_in_fims__QueueType(struct soap*, const char*, fims__QueueType *, const char*);

#ifndef soap_write_fims__QueueType
#define soap_write_fims__QueueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:QueueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueueType * SOAP_FMAC4 soap_get_fims__QueueType(struct soap*, fims__QueueType *, const char*, const char*);

#ifndef soap_read_fims__QueueType
#define soap_read_fims__QueueType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__QueueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__QueueType * SOAP_FMAC2 soap_instantiate_fims__QueueType(struct soap*, int, const char*, const char*, size_t*);

inline fims__QueueType * soap_new_fims__QueueType(struct soap *soap, int n = -1) { return soap_instantiate_fims__QueueType(soap, n, NULL, NULL, NULL); }

inline fims__QueueType * soap_new_req_fims__QueueType(struct soap *soap, std::wstring& resourceID2) { fims__QueueType *_p = soap_instantiate_fims__QueueType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__QueueType * soap_new_set_fims__QueueType(struct soap *soap, enum fims__QueueStatusType *status, std::wstring *statusDescription, std::wstring *length, bool *availability, LONG64 *estimatedTotalCompletionDuration, fims__JobsType *jobs, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__QueueType *_p = soap_instantiate_fims__QueueType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__QueueType::status = status; _p->fims__QueueType::statusDescription = statusDescription; _p->fims__QueueType::length = length; _p->fims__QueueType::availability = availability; _p->fims__QueueType::estimatedTotalCompletionDuration = estimatedTotalCompletionDuration; _p->fims__QueueType::jobs = jobs; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__QueueType(struct soap *soap, fims__QueueType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__QueueType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ProfileType
#define SOAP_TYPE_fims__ProfileType (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ProfileType(struct soap*, const char*, int, const fims__ProfileType *, const char*);
SOAP_FMAC3 fims__ProfileType * SOAP_FMAC4 soap_in_fims__ProfileType(struct soap*, const char*, fims__ProfileType *, const char*);

#ifndef soap_write_fims__ProfileType
#define soap_write_fims__ProfileType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ProfileType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ProfileType * SOAP_FMAC4 soap_get_fims__ProfileType(struct soap*, fims__ProfileType *, const char*, const char*);

#ifndef soap_read_fims__ProfileType
#define soap_read_fims__ProfileType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ProfileType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ProfileType * SOAP_FMAC2 soap_instantiate_fims__ProfileType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ProfileType * soap_new_fims__ProfileType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ProfileType(soap, n, NULL, NULL, NULL); }

inline fims__ProfileType * soap_new_req_fims__ProfileType(struct soap *soap, std::wstring& resourceID2) { fims__ProfileType *_p = soap_instantiate_fims__ProfileType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__ProfileType * soap_new_set_fims__ProfileType(struct soap *soap, fims__ServiceType *service, std::wstring *name, std::wstring *description, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__ProfileType *_p = soap_instantiate_fims__ProfileType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ProfileType::service = service; _p->fims__ProfileType::name = name; _p->fims__ProfileType::description = description; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__ProfileType(struct soap *soap, fims__ProfileType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ProfileType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ServiceType
#define SOAP_TYPE_fims__ServiceType (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ServiceType(struct soap*, const char*, int, const fims__ServiceType *, const char*);
SOAP_FMAC3 fims__ServiceType * SOAP_FMAC4 soap_in_fims__ServiceType(struct soap*, const char*, fims__ServiceType *, const char*);

#ifndef soap_write_fims__ServiceType
#define soap_write_fims__ServiceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ServiceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ServiceType * SOAP_FMAC4 soap_get_fims__ServiceType(struct soap*, fims__ServiceType *, const char*, const char*);

#ifndef soap_read_fims__ServiceType
#define soap_read_fims__ServiceType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ServiceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ServiceType * SOAP_FMAC2 soap_instantiate_fims__ServiceType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ServiceType * soap_new_fims__ServiceType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ServiceType(soap, n, NULL, NULL, NULL); }

inline fims__ServiceType * soap_new_req_fims__ServiceType(struct soap *soap, std::wstring& resourceID2) { fims__ServiceType *_p = soap_instantiate_fims__ServiceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID2; } return _p; }

inline fims__ServiceType * soap_new_set_fims__ServiceType(struct soap *soap, std::wstring *providerName, std::wstring *providerEndPoint, _fims__ServiceType_serviceDescription *serviceDescription, time_t *resourceCreationDate1, time_t *resourceModifiedDate1, bool *serviceGeneratedElement1, bool *isFullyPopulated1, fims__AsyncEndpointType *notifyAt1, fims__ExtensionGroup *ExtensionGroup1, fims__ExtensionAttributes *ExtensionAttributes1, std::wstring& resourceID2, std::wstring *revisionID2, std::wstring *location2) { fims__ServiceType *_p = soap_instantiate_fims__ServiceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ServiceType::providerName = providerName; _p->fims__ServiceType::providerEndPoint = providerEndPoint; _p->fims__ServiceType::serviceDescription = serviceDescription; _p->fims__ResourceType::resourceCreationDate = resourceCreationDate1; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate1; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement1; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated1; _p->fims__ResourceType::notifyAt = notifyAt1; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup1; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes1; _p->fims__ResourceReferenceType::resourceID = resourceID2; _p->fims__ResourceReferenceType::revisionID = revisionID2; _p->fims__ResourceReferenceType::location = location2; } return _p; }

inline void soap_delete_fims__ServiceType(struct soap *soap, fims__ServiceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ServiceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__AsyncEndpointType
#define SOAP_TYPE_fims__AsyncEndpointType (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__AsyncEndpointType(struct soap*, const char*, int, const fims__AsyncEndpointType *, const char*);
SOAP_FMAC3 fims__AsyncEndpointType * SOAP_FMAC4 soap_in_fims__AsyncEndpointType(struct soap*, const char*, fims__AsyncEndpointType *, const char*);

#ifndef soap_write_fims__AsyncEndpointType
#define soap_write_fims__AsyncEndpointType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:AsyncEndpointType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__AsyncEndpointType * SOAP_FMAC4 soap_get_fims__AsyncEndpointType(struct soap*, fims__AsyncEndpointType *, const char*, const char*);

#ifndef soap_read_fims__AsyncEndpointType
#define soap_read_fims__AsyncEndpointType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__AsyncEndpointType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__AsyncEndpointType * SOAP_FMAC2 soap_instantiate_fims__AsyncEndpointType(struct soap*, int, const char*, const char*, size_t*);

inline fims__AsyncEndpointType * soap_new_fims__AsyncEndpointType(struct soap *soap, int n = -1) { return soap_instantiate_fims__AsyncEndpointType(soap, n, NULL, NULL, NULL); }

inline fims__AsyncEndpointType * soap_new_req_fims__AsyncEndpointType(struct soap *soap, std::wstring& replyTo, std::wstring& faultTo) { fims__AsyncEndpointType *_p = soap_instantiate_fims__AsyncEndpointType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__AsyncEndpointType::replyTo = replyTo; _p->fims__AsyncEndpointType::faultTo = faultTo; } return _p; }

inline fims__AsyncEndpointType * soap_new_set_fims__AsyncEndpointType(struct soap *soap, std::wstring& replyTo, std::wstring& faultTo) { fims__AsyncEndpointType *_p = soap_instantiate_fims__AsyncEndpointType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__AsyncEndpointType::replyTo = replyTo; _p->fims__AsyncEndpointType::faultTo = faultTo; } return _p; }

inline void soap_delete_fims__AsyncEndpointType(struct soap *soap, fims__AsyncEndpointType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__AsyncEndpointType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ExtensionBaseType
#define SOAP_TYPE_fims__ExtensionBaseType (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ExtensionBaseType(struct soap*, const char*, int, const fims__ExtensionBaseType *, const char*);
SOAP_FMAC3 fims__ExtensionBaseType * SOAP_FMAC4 soap_in_fims__ExtensionBaseType(struct soap*, const char*, fims__ExtensionBaseType *, const char*);

#ifndef soap_write_fims__ExtensionBaseType
#define soap_write_fims__ExtensionBaseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ExtensionBaseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ExtensionBaseType * SOAP_FMAC4 soap_get_fims__ExtensionBaseType(struct soap*, fims__ExtensionBaseType *, const char*, const char*);

#ifndef soap_read_fims__ExtensionBaseType
#define soap_read_fims__ExtensionBaseType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ExtensionBaseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ExtensionBaseType * SOAP_FMAC2 soap_instantiate_fims__ExtensionBaseType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ExtensionBaseType * soap_new_fims__ExtensionBaseType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ExtensionBaseType(soap, n, NULL, NULL, NULL); }

inline fims__ExtensionBaseType * soap_new_req_fims__ExtensionBaseType(struct soap *soap) { fims__ExtensionBaseType *_p = soap_instantiate_fims__ExtensionBaseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__ExtensionBaseType * soap_new_set_fims__ExtensionBaseType(struct soap *soap, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes) { fims__ExtensionBaseType *_p = soap_instantiate_fims__ExtensionBaseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ExtensionBaseType::ExtensionGroup = ExtensionGroup; _p->fims__ExtensionBaseType::ExtensionAttributes = ExtensionAttributes; } return _p; }

inline void soap_delete_fims__ExtensionBaseType(struct soap *soap, fims__ExtensionBaseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ExtensionBaseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ResourceType
#define SOAP_TYPE_fims__ResourceType (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ResourceType(struct soap*, const char*, int, const fims__ResourceType *, const char*);
SOAP_FMAC3 fims__ResourceType * SOAP_FMAC4 soap_in_fims__ResourceType(struct soap*, const char*, fims__ResourceType *, const char*);

#ifndef soap_write_fims__ResourceType
#define soap_write_fims__ResourceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ResourceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ResourceType * SOAP_FMAC4 soap_get_fims__ResourceType(struct soap*, fims__ResourceType *, const char*, const char*);

#ifndef soap_read_fims__ResourceType
#define soap_read_fims__ResourceType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ResourceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ResourceType * SOAP_FMAC2 soap_instantiate_fims__ResourceType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ResourceType * soap_new_fims__ResourceType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ResourceType(soap, n, NULL, NULL, NULL); }

inline fims__ResourceType * soap_new_req_fims__ResourceType(struct soap *soap, std::wstring& resourceID1) { fims__ResourceType *_p = soap_instantiate_fims__ResourceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID1; } return _p; }

inline fims__ResourceType * soap_new_set_fims__ResourceType(struct soap *soap, time_t *resourceCreationDate, time_t *resourceModifiedDate, bool *serviceGeneratedElement, bool *isFullyPopulated, fims__AsyncEndpointType *notifyAt, fims__ExtensionGroup *ExtensionGroup, fims__ExtensionAttributes *ExtensionAttributes, std::wstring& resourceID1, std::wstring *revisionID1, std::wstring *location1) { fims__ResourceType *_p = soap_instantiate_fims__ResourceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceType::resourceCreationDate = resourceCreationDate; _p->fims__ResourceType::resourceModifiedDate = resourceModifiedDate; _p->fims__ResourceType::serviceGeneratedElement = serviceGeneratedElement; _p->fims__ResourceType::isFullyPopulated = isFullyPopulated; _p->fims__ResourceType::notifyAt = notifyAt; _p->fims__ResourceType::ExtensionGroup = ExtensionGroup; _p->fims__ResourceType::ExtensionAttributes = ExtensionAttributes; _p->fims__ResourceReferenceType::resourceID = resourceID1; _p->fims__ResourceReferenceType::revisionID = revisionID1; _p->fims__ResourceReferenceType::location = location1; } return _p; }

inline void soap_delete_fims__ResourceType(struct soap *soap, fims__ResourceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ResourceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ResourceReferenceType
#define SOAP_TYPE_fims__ResourceReferenceType (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ResourceReferenceType(struct soap*, const char*, int, const fims__ResourceReferenceType *, const char*);
SOAP_FMAC3 fims__ResourceReferenceType * SOAP_FMAC4 soap_in_fims__ResourceReferenceType(struct soap*, const char*, fims__ResourceReferenceType *, const char*);

#ifndef soap_write_fims__ResourceReferenceType
#define soap_write_fims__ResourceReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ResourceReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ResourceReferenceType * SOAP_FMAC4 soap_get_fims__ResourceReferenceType(struct soap*, fims__ResourceReferenceType *, const char*, const char*);

#ifndef soap_read_fims__ResourceReferenceType
#define soap_read_fims__ResourceReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ResourceReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ResourceReferenceType * SOAP_FMAC2 soap_instantiate_fims__ResourceReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline fims__ResourceReferenceType * soap_new_fims__ResourceReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_fims__ResourceReferenceType(soap, n, NULL, NULL, NULL); }

inline fims__ResourceReferenceType * soap_new_req_fims__ResourceReferenceType(struct soap *soap, std::wstring& resourceID) { fims__ResourceReferenceType *_p = soap_instantiate_fims__ResourceReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID; } return _p; }

inline fims__ResourceReferenceType * soap_new_set_fims__ResourceReferenceType(struct soap *soap, std::wstring& resourceID, std::wstring *revisionID, std::wstring *location) { fims__ResourceReferenceType *_p = soap_instantiate_fims__ResourceReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ResourceReferenceType::resourceID = resourceID; _p->fims__ResourceReferenceType::revisionID = revisionID; _p->fims__ResourceReferenceType::location = location; } return _p; }

inline void soap_delete_fims__ResourceReferenceType(struct soap *soap, fims__ResourceReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ResourceReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ExtensionAttributes
#define SOAP_TYPE_fims__ExtensionAttributes (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ExtensionAttributes(struct soap*, const char*, int, const fims__ExtensionAttributes *, const char*);
SOAP_FMAC3 fims__ExtensionAttributes * SOAP_FMAC4 soap_in_fims__ExtensionAttributes(struct soap*, const char*, fims__ExtensionAttributes *, const char*);

#ifndef soap_write_fims__ExtensionAttributes
#define soap_write_fims__ExtensionAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ExtensionAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ExtensionAttributes * SOAP_FMAC4 soap_get_fims__ExtensionAttributes(struct soap*, fims__ExtensionAttributes *, const char*, const char*);

#ifndef soap_read_fims__ExtensionAttributes
#define soap_read_fims__ExtensionAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ExtensionAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ExtensionAttributes * SOAP_FMAC2 soap_instantiate_fims__ExtensionAttributes(struct soap*, int, const char*, const char*, size_t*);

inline fims__ExtensionAttributes * soap_new_fims__ExtensionAttributes(struct soap *soap, int n = -1) { return soap_instantiate_fims__ExtensionAttributes(soap, n, NULL, NULL, NULL); }

inline fims__ExtensionAttributes * soap_new_req_fims__ExtensionAttributes(struct soap *soap) { fims__ExtensionAttributes *_p = soap_instantiate_fims__ExtensionAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__ExtensionAttributes * soap_new_set_fims__ExtensionAttributes(struct soap *soap, char *__anyAttribute) { fims__ExtensionAttributes *_p = soap_instantiate_fims__ExtensionAttributes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ExtensionAttributes::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_fims__ExtensionAttributes(struct soap *soap, fims__ExtensionAttributes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ExtensionAttributes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_fims__ExtensionGroup
#define SOAP_TYPE_fims__ExtensionGroup (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_fims__ExtensionGroup(struct soap*, const char*, int, const fims__ExtensionGroup *, const char*);
SOAP_FMAC3 fims__ExtensionGroup * SOAP_FMAC4 soap_in_fims__ExtensionGroup(struct soap*, const char*, fims__ExtensionGroup *, const char*);

#ifndef soap_write_fims__ExtensionGroup
#define soap_write_fims__ExtensionGroup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "fims:ExtensionGroup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ExtensionGroup * SOAP_FMAC4 soap_get_fims__ExtensionGroup(struct soap*, fims__ExtensionGroup *, const char*, const char*);

#ifndef soap_read_fims__ExtensionGroup
#define soap_read_fims__ExtensionGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_fims__ExtensionGroup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 fims__ExtensionGroup * SOAP_FMAC2 soap_instantiate_fims__ExtensionGroup(struct soap*, int, const char*, const char*, size_t*);

inline fims__ExtensionGroup * soap_new_fims__ExtensionGroup(struct soap *soap, int n = -1) { return soap_instantiate_fims__ExtensionGroup(soap, n, NULL, NULL, NULL); }

inline fims__ExtensionGroup * soap_new_req_fims__ExtensionGroup(struct soap *soap) { fims__ExtensionGroup *_p = soap_instantiate_fims__ExtensionGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline fims__ExtensionGroup * soap_new_set_fims__ExtensionGroup(struct soap *soap, std::vector<char * >& __any) { fims__ExtensionGroup *_p = soap_instantiate_fims__ExtensionGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__ExtensionGroup::__any = __any; } return _p; }

inline void soap_delete_fims__ExtensionGroup(struct soap *soap, fims__ExtensionGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_fims__ExtensionGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__edlprovider__Map
#define SOAP_TYPE__edlprovider__Map (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__edlprovider__Map(struct soap*, const char*, int, const _edlprovider__Map *, const char*);
SOAP_FMAC3 _edlprovider__Map * SOAP_FMAC4 soap_in__edlprovider__Map(struct soap*, const char*, _edlprovider__Map *, const char*);

#ifndef soap_write__edlprovider__Map
#define soap_write__edlprovider__Map(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:Map", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _edlprovider__Map * SOAP_FMAC4 soap_get__edlprovider__Map(struct soap*, _edlprovider__Map *, const char*, const char*);

#ifndef soap_read__edlprovider__Map
#define soap_read__edlprovider__Map(soap, data) ( soap_begin_recv(soap) || !soap_get__edlprovider__Map(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _edlprovider__Map * SOAP_FMAC2 soap_instantiate__edlprovider__Map(struct soap*, int, const char*, const char*, size_t*);

inline _edlprovider__Map * soap_new__edlprovider__Map(struct soap *soap, int n = -1) { return soap_instantiate__edlprovider__Map(soap, n, NULL, NULL, NULL); }

inline _edlprovider__Map * soap_new_req__edlprovider__Map(struct soap *soap) { _edlprovider__Map *_p = soap_instantiate__edlprovider__Map(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _edlprovider__Map * soap_new_set__edlprovider__Map(struct soap *soap, std::vector<edlprovider__MapItemType * >& item) { _edlprovider__Map *_p = soap_instantiate__edlprovider__Map(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_edlprovider__Map::item = item; } return _p; }

inline void soap_delete__edlprovider__Map(struct soap *soap, _edlprovider__Map *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__edlprovider__Map(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__EdlProviderFaultType
#define SOAP_TYPE_edlprovider__EdlProviderFaultType (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__EdlProviderFaultType(struct soap*, const char*, int, const edlprovider__EdlProviderFaultType *, const char*);
SOAP_FMAC3 edlprovider__EdlProviderFaultType * SOAP_FMAC4 soap_in_edlprovider__EdlProviderFaultType(struct soap*, const char*, edlprovider__EdlProviderFaultType *, const char*);

#ifndef soap_write_edlprovider__EdlProviderFaultType
#define soap_write_edlprovider__EdlProviderFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:EdlProviderFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlProviderFaultType * SOAP_FMAC4 soap_get_edlprovider__EdlProviderFaultType(struct soap*, edlprovider__EdlProviderFaultType *, const char*, const char*);

#ifndef soap_read_edlprovider__EdlProviderFaultType
#define soap_read_edlprovider__EdlProviderFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__EdlProviderFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__EdlProviderFaultType * SOAP_FMAC2 soap_instantiate_edlprovider__EdlProviderFaultType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__EdlProviderFaultType * soap_new_edlprovider__EdlProviderFaultType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__EdlProviderFaultType(soap, n, NULL, NULL, NULL); }

inline edlprovider__EdlProviderFaultType * soap_new_req_edlprovider__EdlProviderFaultType(struct soap *soap, enum fims__ErrorCodeType code1) { edlprovider__EdlProviderFaultType *_p = soap_instantiate_edlprovider__EdlProviderFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->fims__FaultType::code = code1; } return _p; }

inline edlprovider__EdlProviderFaultType * soap_new_set_edlprovider__EdlProviderFaultType(struct soap *soap, enum edlprovider__EdlProviderErrorCodeType *extendedCode, enum fims__ErrorCodeType code1, std::wstring *description1, std::wstring *detail1, std::vector<fims__InnerFaultType * >& innerFault1) { edlprovider__EdlProviderFaultType *_p = soap_instantiate_edlprovider__EdlProviderFaultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlProviderFaultType::extendedCode = extendedCode; _p->fims__FaultType::code = code1; _p->fims__FaultType::description = description1; _p->fims__FaultType::detail = detail1; _p->fims__FaultType::innerFault = innerFault1; } return _p; }

inline void soap_delete_edlprovider__EdlProviderFaultType(struct soap *soap, edlprovider__EdlProviderFaultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__EdlProviderFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__InstalledEdlsResponseType
#define SOAP_TYPE_edlprovider__InstalledEdlsResponseType (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__InstalledEdlsResponseType(struct soap*, const char*, int, const edlprovider__InstalledEdlsResponseType *, const char*);
SOAP_FMAC3 edlprovider__InstalledEdlsResponseType * SOAP_FMAC4 soap_in_edlprovider__InstalledEdlsResponseType(struct soap*, const char*, edlprovider__InstalledEdlsResponseType *, const char*);

#ifndef soap_write_edlprovider__InstalledEdlsResponseType
#define soap_write_edlprovider__InstalledEdlsResponseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:InstalledEdlsResponseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__InstalledEdlsResponseType * SOAP_FMAC4 soap_get_edlprovider__InstalledEdlsResponseType(struct soap*, edlprovider__InstalledEdlsResponseType *, const char*, const char*);

#ifndef soap_read_edlprovider__InstalledEdlsResponseType
#define soap_read_edlprovider__InstalledEdlsResponseType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__InstalledEdlsResponseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__InstalledEdlsResponseType * SOAP_FMAC2 soap_instantiate_edlprovider__InstalledEdlsResponseType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__InstalledEdlsResponseType * soap_new_edlprovider__InstalledEdlsResponseType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__InstalledEdlsResponseType(soap, n, NULL, NULL, NULL); }

inline edlprovider__InstalledEdlsResponseType * soap_new_req_edlprovider__InstalledEdlsResponseType(struct soap *soap, _edlprovider__Map *edlprovider__Map) { edlprovider__InstalledEdlsResponseType *_p = soap_instantiate_edlprovider__InstalledEdlsResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__InstalledEdlsResponseType::edlprovider__Map = edlprovider__Map; } return _p; }

inline edlprovider__InstalledEdlsResponseType * soap_new_set_edlprovider__InstalledEdlsResponseType(struct soap *soap, _edlprovider__Map *edlprovider__Map) { edlprovider__InstalledEdlsResponseType *_p = soap_instantiate_edlprovider__InstalledEdlsResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__InstalledEdlsResponseType::edlprovider__Map = edlprovider__Map; } return _p; }

inline void soap_delete_edlprovider__InstalledEdlsResponseType(struct soap *soap, edlprovider__InstalledEdlsResponseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__InstalledEdlsResponseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__EdlCreateResponseType
#define SOAP_TYPE_edlprovider__EdlCreateResponseType (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__EdlCreateResponseType(struct soap*, const char*, int, const edlprovider__EdlCreateResponseType *, const char*);
SOAP_FMAC3 edlprovider__EdlCreateResponseType * SOAP_FMAC4 soap_in_edlprovider__EdlCreateResponseType(struct soap*, const char*, edlprovider__EdlCreateResponseType *, const char*);

#ifndef soap_write_edlprovider__EdlCreateResponseType
#define soap_write_edlprovider__EdlCreateResponseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:EdlCreateResponseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlCreateResponseType * SOAP_FMAC4 soap_get_edlprovider__EdlCreateResponseType(struct soap*, edlprovider__EdlCreateResponseType *, const char*, const char*);

#ifndef soap_read_edlprovider__EdlCreateResponseType
#define soap_read_edlprovider__EdlCreateResponseType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__EdlCreateResponseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__EdlCreateResponseType * SOAP_FMAC2 soap_instantiate_edlprovider__EdlCreateResponseType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__EdlCreateResponseType * soap_new_edlprovider__EdlCreateResponseType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__EdlCreateResponseType(soap, n, NULL, NULL, NULL); }

inline edlprovider__EdlCreateResponseType * soap_new_req_edlprovider__EdlCreateResponseType(struct soap *soap) { edlprovider__EdlCreateResponseType *_p = soap_instantiate_edlprovider__EdlCreateResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline edlprovider__EdlCreateResponseType * soap_new_set_edlprovider__EdlCreateResponseType(struct soap *soap, xsd__base64Binary *getEdlResult) { edlprovider__EdlCreateResponseType *_p = soap_instantiate_edlprovider__EdlCreateResponseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlCreateResponseType::getEdlResult = getEdlResult; } return _p; }

inline void soap_delete_edlprovider__EdlCreateResponseType(struct soap *soap, edlprovider__EdlCreateResponseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__EdlCreateResponseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__EdlCreateRequestDoubleType
#define SOAP_TYPE_edlprovider__EdlCreateRequestDoubleType (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__EdlCreateRequestDoubleType(struct soap*, const char*, int, const edlprovider__EdlCreateRequestDoubleType *, const char*);
SOAP_FMAC3 edlprovider__EdlCreateRequestDoubleType * SOAP_FMAC4 soap_in_edlprovider__EdlCreateRequestDoubleType(struct soap*, const char*, edlprovider__EdlCreateRequestDoubleType *, const char*);

#ifndef soap_write_edlprovider__EdlCreateRequestDoubleType
#define soap_write_edlprovider__EdlCreateRequestDoubleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:EdlCreateRequestDoubleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlCreateRequestDoubleType * SOAP_FMAC4 soap_get_edlprovider__EdlCreateRequestDoubleType(struct soap*, edlprovider__EdlCreateRequestDoubleType *, const char*, const char*);

#ifndef soap_read_edlprovider__EdlCreateRequestDoubleType
#define soap_read_edlprovider__EdlCreateRequestDoubleType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__EdlCreateRequestDoubleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__EdlCreateRequestDoubleType * SOAP_FMAC2 soap_instantiate_edlprovider__EdlCreateRequestDoubleType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__EdlCreateRequestDoubleType * soap_new_edlprovider__EdlCreateRequestDoubleType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__EdlCreateRequestDoubleType(soap, n, NULL, NULL, NULL); }

inline edlprovider__EdlCreateRequestDoubleType * soap_new_req_edlprovider__EdlCreateRequestDoubleType(struct soap *soap, double edlFramesPerSecond, std::wstring& edlType1) { edlprovider__EdlCreateRequestDoubleType *_p = soap_instantiate_edlprovider__EdlCreateRequestDoubleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlCreateRequestDoubleType::edlFramesPerSecond = edlFramesPerSecond; _p->edlprovider__EdlCreateRequestBaseType::edlType = edlType1; } return _p; }

inline edlprovider__EdlCreateRequestDoubleType * soap_new_set_edlprovider__EdlCreateRequestDoubleType(struct soap *soap, double edlFramesPerSecond, std::wstring& edlType1, edlprovider__ArrayOfClips *clips1, std::wstring *edlSequenceName1) { edlprovider__EdlCreateRequestDoubleType *_p = soap_instantiate_edlprovider__EdlCreateRequestDoubleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlCreateRequestDoubleType::edlFramesPerSecond = edlFramesPerSecond; _p->edlprovider__EdlCreateRequestBaseType::edlType = edlType1; _p->edlprovider__EdlCreateRequestBaseType::clips = clips1; _p->edlprovider__EdlCreateRequestBaseType::edlSequenceName = edlSequenceName1; } return _p; }

inline void soap_delete_edlprovider__EdlCreateRequestDoubleType(struct soap *soap, edlprovider__EdlCreateRequestDoubleType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__EdlCreateRequestDoubleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__EdlCreateRequestType
#define SOAP_TYPE_edlprovider__EdlCreateRequestType (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__EdlCreateRequestType(struct soap*, const char*, int, const edlprovider__EdlCreateRequestType *, const char*);
SOAP_FMAC3 edlprovider__EdlCreateRequestType * SOAP_FMAC4 soap_in_edlprovider__EdlCreateRequestType(struct soap*, const char*, edlprovider__EdlCreateRequestType *, const char*);

#ifndef soap_write_edlprovider__EdlCreateRequestType
#define soap_write_edlprovider__EdlCreateRequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:EdlCreateRequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlCreateRequestType * SOAP_FMAC4 soap_get_edlprovider__EdlCreateRequestType(struct soap*, edlprovider__EdlCreateRequestType *, const char*, const char*);

#ifndef soap_read_edlprovider__EdlCreateRequestType
#define soap_read_edlprovider__EdlCreateRequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__EdlCreateRequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__EdlCreateRequestType * SOAP_FMAC2 soap_instantiate_edlprovider__EdlCreateRequestType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__EdlCreateRequestType * soap_new_edlprovider__EdlCreateRequestType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__EdlCreateRequestType(soap, n, NULL, NULL, NULL); }

inline edlprovider__EdlCreateRequestType * soap_new_req_edlprovider__EdlCreateRequestType(struct soap *soap, fims__RationalType *edlFramesPerSecond, std::wstring& edlType1) { edlprovider__EdlCreateRequestType *_p = soap_instantiate_edlprovider__EdlCreateRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlCreateRequestType::edlFramesPerSecond = edlFramesPerSecond; _p->edlprovider__EdlCreateRequestBaseType::edlType = edlType1; } return _p; }

inline edlprovider__EdlCreateRequestType * soap_new_set_edlprovider__EdlCreateRequestType(struct soap *soap, fims__RationalType *edlFramesPerSecond, std::wstring& edlType1, edlprovider__ArrayOfClips *clips1, std::wstring *edlSequenceName1) { edlprovider__EdlCreateRequestType *_p = soap_instantiate_edlprovider__EdlCreateRequestType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlCreateRequestType::edlFramesPerSecond = edlFramesPerSecond; _p->edlprovider__EdlCreateRequestBaseType::edlType = edlType1; _p->edlprovider__EdlCreateRequestBaseType::clips = clips1; _p->edlprovider__EdlCreateRequestBaseType::edlSequenceName = edlSequenceName1; } return _p; }

inline void soap_delete_edlprovider__EdlCreateRequestType(struct soap *soap, edlprovider__EdlCreateRequestType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__EdlCreateRequestType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__EdlCreateRequestBaseType
#define SOAP_TYPE_edlprovider__EdlCreateRequestBaseType (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__EdlCreateRequestBaseType(struct soap*, const char*, int, const edlprovider__EdlCreateRequestBaseType *, const char*);
SOAP_FMAC3 edlprovider__EdlCreateRequestBaseType * SOAP_FMAC4 soap_in_edlprovider__EdlCreateRequestBaseType(struct soap*, const char*, edlprovider__EdlCreateRequestBaseType *, const char*);

#ifndef soap_write_edlprovider__EdlCreateRequestBaseType
#define soap_write_edlprovider__EdlCreateRequestBaseType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:EdlCreateRequestBaseType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlCreateRequestBaseType * SOAP_FMAC4 soap_get_edlprovider__EdlCreateRequestBaseType(struct soap*, edlprovider__EdlCreateRequestBaseType *, const char*, const char*);

#ifndef soap_read_edlprovider__EdlCreateRequestBaseType
#define soap_read_edlprovider__EdlCreateRequestBaseType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__EdlCreateRequestBaseType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__EdlCreateRequestBaseType * SOAP_FMAC2 soap_instantiate_edlprovider__EdlCreateRequestBaseType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__EdlCreateRequestBaseType * soap_new_edlprovider__EdlCreateRequestBaseType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__EdlCreateRequestBaseType(soap, n, NULL, NULL, NULL); }

inline edlprovider__EdlCreateRequestBaseType * soap_new_req_edlprovider__EdlCreateRequestBaseType(struct soap *soap, std::wstring& edlType) { edlprovider__EdlCreateRequestBaseType *_p = soap_instantiate_edlprovider__EdlCreateRequestBaseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlCreateRequestBaseType::edlType = edlType; } return _p; }

inline edlprovider__EdlCreateRequestBaseType * soap_new_set_edlprovider__EdlCreateRequestBaseType(struct soap *soap, std::wstring& edlType, edlprovider__ArrayOfClips *clips, std::wstring *edlSequenceName) { edlprovider__EdlCreateRequestBaseType *_p = soap_instantiate_edlprovider__EdlCreateRequestBaseType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__EdlCreateRequestBaseType::edlType = edlType; _p->edlprovider__EdlCreateRequestBaseType::clips = clips; _p->edlprovider__EdlCreateRequestBaseType::edlSequenceName = edlSequenceName; } return _p; }

inline void soap_delete_edlprovider__EdlCreateRequestBaseType(struct soap *soap, edlprovider__EdlCreateRequestBaseType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__EdlCreateRequestBaseType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__MapItemType
#define SOAP_TYPE_edlprovider__MapItemType (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__MapItemType(struct soap*, const char*, int, const edlprovider__MapItemType *, const char*);
SOAP_FMAC3 edlprovider__MapItemType * SOAP_FMAC4 soap_in_edlprovider__MapItemType(struct soap*, const char*, edlprovider__MapItemType *, const char*);

#ifndef soap_write_edlprovider__MapItemType
#define soap_write_edlprovider__MapItemType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:MapItemType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__MapItemType * SOAP_FMAC4 soap_get_edlprovider__MapItemType(struct soap*, edlprovider__MapItemType *, const char*, const char*);

#ifndef soap_read_edlprovider__MapItemType
#define soap_read_edlprovider__MapItemType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__MapItemType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__MapItemType * SOAP_FMAC2 soap_instantiate_edlprovider__MapItemType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__MapItemType * soap_new_edlprovider__MapItemType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__MapItemType(soap, n, NULL, NULL, NULL); }

inline edlprovider__MapItemType * soap_new_req_edlprovider__MapItemType(struct soap *soap, std::wstring& edlType, std::wstring& edlExtension) { edlprovider__MapItemType *_p = soap_instantiate_edlprovider__MapItemType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__MapItemType::edlType = edlType; _p->edlprovider__MapItemType::edlExtension = edlExtension; } return _p; }

inline edlprovider__MapItemType * soap_new_set_edlprovider__MapItemType(struct soap *soap, std::wstring& edlType, std::wstring& edlExtension) { edlprovider__MapItemType *_p = soap_instantiate_edlprovider__MapItemType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__MapItemType::edlType = edlType; _p->edlprovider__MapItemType::edlExtension = edlExtension; } return _p; }

inline void soap_delete_edlprovider__MapItemType(struct soap *soap, edlprovider__MapItemType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__MapItemType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__ClipType
#define SOAP_TYPE_edlprovider__ClipType (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__ClipType(struct soap*, const char*, int, const edlprovider__ClipType *, const char*);
SOAP_FMAC3 edlprovider__ClipType * SOAP_FMAC4 soap_in_edlprovider__ClipType(struct soap*, const char*, edlprovider__ClipType *, const char*);

#ifndef soap_write_edlprovider__ClipType
#define soap_write_edlprovider__ClipType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:ClipType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__ClipType * SOAP_FMAC4 soap_get_edlprovider__ClipType(struct soap*, edlprovider__ClipType *, const char*, const char*);

#ifndef soap_read_edlprovider__ClipType
#define soap_read_edlprovider__ClipType(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__ClipType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__ClipType * SOAP_FMAC2 soap_instantiate_edlprovider__ClipType(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__ClipType * soap_new_edlprovider__ClipType(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__ClipType(soap, n, NULL, NULL, NULL); }

inline edlprovider__ClipType * soap_new_req_edlprovider__ClipType(struct soap *soap, fimstime__TimeType *markIn, fimstime__TimeType *markOut, fims__BMObjectType *clipInfo) { edlprovider__ClipType *_p = soap_instantiate_edlprovider__ClipType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__ClipType::markIn = markIn; _p->edlprovider__ClipType::markOut = markOut; _p->edlprovider__ClipType::clipInfo = clipInfo; } return _p; }

inline edlprovider__ClipType * soap_new_set_edlprovider__ClipType(struct soap *soap, fimstime__TimeType *markIn, fimstime__TimeType *markOut, fims__BMObjectType *clipInfo) { edlprovider__ClipType *_p = soap_instantiate_edlprovider__ClipType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__ClipType::markIn = markIn; _p->edlprovider__ClipType::markOut = markOut; _p->edlprovider__ClipType::clipInfo = clipInfo; } return _p; }

inline void soap_delete_edlprovider__ClipType(struct soap *soap, edlprovider__ClipType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__ClipType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__ArrayOfClips
#define SOAP_TYPE_edlprovider__ArrayOfClips (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__ArrayOfClips(struct soap*, const char*, int, const edlprovider__ArrayOfClips *, const char*);
SOAP_FMAC3 edlprovider__ArrayOfClips * SOAP_FMAC4 soap_in_edlprovider__ArrayOfClips(struct soap*, const char*, edlprovider__ArrayOfClips *, const char*);

#ifndef soap_write_edlprovider__ArrayOfClips
#define soap_write_edlprovider__ArrayOfClips(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:ArrayOfClips", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__ArrayOfClips * SOAP_FMAC4 soap_get_edlprovider__ArrayOfClips(struct soap*, edlprovider__ArrayOfClips *, const char*, const char*);

#ifndef soap_read_edlprovider__ArrayOfClips
#define soap_read_edlprovider__ArrayOfClips(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__ArrayOfClips(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__ArrayOfClips * SOAP_FMAC2 soap_instantiate_edlprovider__ArrayOfClips(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__ArrayOfClips * soap_new_edlprovider__ArrayOfClips(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__ArrayOfClips(soap, n, NULL, NULL, NULL); }

inline edlprovider__ArrayOfClips * soap_new_req_edlprovider__ArrayOfClips(struct soap *soap) { edlprovider__ArrayOfClips *_p = soap_instantiate_edlprovider__ArrayOfClips(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline edlprovider__ArrayOfClips * soap_new_set_edlprovider__ArrayOfClips(struct soap *soap, std::vector<edlprovider__ClipType * >& clips) { edlprovider__ArrayOfClips *_p = soap_instantiate_edlprovider__ArrayOfClips(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__ArrayOfClips::clips = clips; } return _p; }

inline void soap_delete_edlprovider__ArrayOfClips(struct soap *soap, edlprovider__ArrayOfClips *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__ArrayOfClips(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_edlprovider__ArrayOfstring
#define SOAP_TYPE_edlprovider__ArrayOfstring (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_edlprovider__ArrayOfstring(struct soap*, const char*, int, const edlprovider__ArrayOfstring *, const char*);
SOAP_FMAC3 edlprovider__ArrayOfstring * SOAP_FMAC4 soap_in_edlprovider__ArrayOfstring(struct soap*, const char*, edlprovider__ArrayOfstring *, const char*);

#ifndef soap_write_edlprovider__ArrayOfstring
#define soap_write_edlprovider__ArrayOfstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "edlprovider:ArrayOfstring", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__ArrayOfstring * SOAP_FMAC4 soap_get_edlprovider__ArrayOfstring(struct soap*, edlprovider__ArrayOfstring *, const char*, const char*);

#ifndef soap_read_edlprovider__ArrayOfstring
#define soap_read_edlprovider__ArrayOfstring(soap, data) ( soap_begin_recv(soap) || !soap_get_edlprovider__ArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 edlprovider__ArrayOfstring * SOAP_FMAC2 soap_instantiate_edlprovider__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline edlprovider__ArrayOfstring * soap_new_edlprovider__ArrayOfstring(struct soap *soap, int n = -1) { return soap_instantiate_edlprovider__ArrayOfstring(soap, n, NULL, NULL, NULL); }

inline edlprovider__ArrayOfstring * soap_new_req_edlprovider__ArrayOfstring(struct soap *soap) { edlprovider__ArrayOfstring *_p = soap_instantiate_edlprovider__ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline edlprovider__ArrayOfstring * soap_new_set_edlprovider__ArrayOfstring(struct soap *soap, std::vector<std::wstring >& string) { edlprovider__ArrayOfstring *_p = soap_instantiate_edlprovider__ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->edlprovider__ArrayOfstring::string = string; } return _p; }

inline void soap_delete_edlprovider__ArrayOfstring(struct soap *soap, edlprovider__ArrayOfstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_edlprovider__ArrayOfstring(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _xml__lang is a typedef element/attribute synonym for std__wstring */

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (29)
#endif

#define soap_default__xml__lang(soap, a) soap_default_std__wstring(soap, a)


#define soap_serialize__xml__lang soap_serialize_std__wstring


#define soap_out__xml__lang soap_out_std__wstring


#define soap_in__xml__lang soap_in_std__wstring


#define soap_put__xml__lang soap_put_std__wstring


#define soap_get__xml__lang soap_get_std__wstring


#define soap_instantiate__xml__lang soap_instantiate_std__wstring


#define soap_copy__xml__lang soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__time
#define SOAP_TYPE_xsd__time (28)
#endif

#define soap_default_xsd__time(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__time(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__time(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__time(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__time(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__time
#define soap_write_xsd__time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__time(soap, data),0) || soap_put_xsd__time(soap, data, "xsd:time", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__time(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__time
#define soap_read_xsd__time(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__time soap_instantiate_std__wstring


#define soap_copy_xsd__time soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__positiveInteger
#define SOAP_TYPE_xsd__positiveInteger (27)
#endif

#define soap_default_xsd__positiveInteger(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__positiveInteger(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__positiveInteger
#define soap_write_xsd__positiveInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__positiveInteger(soap, data),0) || soap_put_xsd__positiveInteger(soap, data, "xsd:positiveInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__positiveInteger
#define soap_read_xsd__positiveInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__positiveInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__positiveInteger soap_instantiate_std__wstring


#define soap_copy_xsd__positiveInteger soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (26)
#endif

#define soap_default_xsd__nonNegativeInteger(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__nonNegativeInteger(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__nonNegativeInteger(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__nonNegativeInteger
#define soap_write_xsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__nonNegativeInteger(soap, data),0) || soap_put_xsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__nonNegativeInteger
#define soap_read_xsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__nonNegativeInteger soap_instantiate_std__wstring


#define soap_copy_xsd__nonNegativeInteger soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__language
#define SOAP_TYPE_xsd__language (25)
#endif

#define soap_default_xsd__language(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__language(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__language(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__language(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__language(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__language
#define soap_write_xsd__language(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__language(soap, data),0) || soap_put_xsd__language(soap, data, "xsd:language", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__language(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__language
#define soap_read_xsd__language(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__language(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__language soap_instantiate_std__wstring


#define soap_copy_xsd__language soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (24)
#endif

#define soap_default_xsd__integer(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__integer
#define soap_write_xsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__integer(soap, data),0) || soap_put_xsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__integer
#define soap_read_xsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__integer soap_instantiate_std__wstring


#define soap_copy_xsd__integer soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__gYear
#define SOAP_TYPE_xsd__gYear (23)
#endif

#define soap_default_xsd__gYear(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__gYear(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__gYear(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__gYear(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__gYear(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__gYear
#define soap_write_xsd__gYear(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__gYear(soap, data),0) || soap_put_xsd__gYear(soap, data, "xsd:gYear", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__gYear(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__gYear
#define soap_read_xsd__gYear(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__gYear(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__gYear soap_instantiate_std__wstring


#define soap_copy_xsd__gYear soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (22)
#endif

#define soap_default_xsd__decimal(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__decimal
#define soap_write_xsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__decimal(soap, data),0) || soap_put_xsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__decimal
#define soap_read_xsd__decimal(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__decimal soap_instantiate_std__wstring


#define soap_copy_xsd__decimal soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (21)
#endif

#define soap_default_xsd__date(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__date
#define soap_write_xsd__date(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__date(soap, data),0) || soap_put_xsd__date(soap, data, "xsd:date", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__date(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__date
#define soap_read_xsd__date(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__date(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__date soap_instantiate_std__wstring


#define soap_copy_xsd__date soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (20)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyURI(soap, data),0) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__wstring


#define soap_copy_xsd__anyURI soap_copy_std__wstring

#ifndef SOAP_TYPE_xsd__NMTOKEN
#define SOAP_TYPE_xsd__NMTOKEN (19)
#endif

#define soap_default_xsd__NMTOKEN(soap, a) soap_default_std__wstring(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__NMTOKEN(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__NMTOKEN(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__NMTOKEN(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__NMTOKEN(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_xsd__NMTOKEN
#define soap_write_xsd__NMTOKEN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__NMTOKEN(soap, data),0) || soap_put_xsd__NMTOKEN(soap, data, "xsd:NMTOKEN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__NMTOKEN(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_xsd__NMTOKEN
#define soap_read_xsd__NMTOKEN(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__NMTOKEN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__NMTOKEN soap_instantiate_std__wstring


#define soap_copy_xsd__NMTOKEN soap_copy_std__wstring

#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__wstring(soap, data),0) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (17)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);

#ifndef soap_write_xsd__hexBinary
#define soap_write_xsd__hexBinary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:hexBinary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

#ifndef soap_read_xsd__hexBinary
#define soap_read_xsd__hexBinary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__hexBinary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL); }

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(struct soap *soap) { xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(struct soap *soap, unsigned char *__ptr, int __size) { xsd__hexBinary *_p = soap_instantiate_xsd__hexBinary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__hexBinary::__ptr = __ptr; _p->xsd__hexBinary::__size = __size; } return _p; }

inline void soap_delete_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__hexBinary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (8)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (470)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (469)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (467)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (466)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___edlprovider__getEdlDouble
#define SOAP_TYPE___edlprovider__getEdlDouble (465)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___edlprovider__getEdlDouble(struct soap*, struct __edlprovider__getEdlDouble *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___edlprovider__getEdlDouble(struct soap*, const struct __edlprovider__getEdlDouble *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___edlprovider__getEdlDouble(struct soap*, const char*, int, const struct __edlprovider__getEdlDouble *, const char*);
SOAP_FMAC3 struct __edlprovider__getEdlDouble * SOAP_FMAC4 soap_in___edlprovider__getEdlDouble(struct soap*, const char*, struct __edlprovider__getEdlDouble *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___edlprovider__getEdlDouble(struct soap*, const struct __edlprovider__getEdlDouble *, const char*, const char*);

#ifndef soap_write___edlprovider__getEdlDouble
#define soap_write___edlprovider__getEdlDouble(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___edlprovider__getEdlDouble(soap, data),0) || soap_put___edlprovider__getEdlDouble(soap, data, "-edlprovider:getEdlDouble", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __edlprovider__getEdlDouble * SOAP_FMAC4 soap_get___edlprovider__getEdlDouble(struct soap*, struct __edlprovider__getEdlDouble *, const char*, const char*);

#ifndef soap_read___edlprovider__getEdlDouble
#define soap_read___edlprovider__getEdlDouble(soap, data) ( soap_begin_recv(soap) || !soap_get___edlprovider__getEdlDouble(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __edlprovider__getEdlDouble * SOAP_FMAC2 soap_instantiate___edlprovider__getEdlDouble(struct soap*, int, const char*, const char*, size_t*);

inline struct __edlprovider__getEdlDouble * soap_new___edlprovider__getEdlDouble(struct soap *soap, int n = -1) { return soap_instantiate___edlprovider__getEdlDouble(soap, n, NULL, NULL, NULL); }

inline struct __edlprovider__getEdlDouble * soap_new_req___edlprovider__getEdlDouble(struct soap *soap) { struct __edlprovider__getEdlDouble *_p = soap_instantiate___edlprovider__getEdlDouble(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___edlprovider__getEdlDouble(soap, _p); } return _p; }

inline struct __edlprovider__getEdlDouble * soap_new_set___edlprovider__getEdlDouble(struct soap *soap, edlprovider__EdlCreateRequestDoubleType *edlprovider__getEdlDoubleRequest) { struct __edlprovider__getEdlDouble *_p = soap_instantiate___edlprovider__getEdlDouble(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___edlprovider__getEdlDouble(soap, _p); _p->edlprovider__getEdlDoubleRequest = edlprovider__getEdlDoubleRequest; } return _p; }

inline void soap_delete___edlprovider__getEdlDouble(struct soap *soap, struct __edlprovider__getEdlDouble *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___edlprovider__getEdlDouble(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___edlprovider__getEdl
#define SOAP_TYPE___edlprovider__getEdl (462)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___edlprovider__getEdl(struct soap*, struct __edlprovider__getEdl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___edlprovider__getEdl(struct soap*, const struct __edlprovider__getEdl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___edlprovider__getEdl(struct soap*, const char*, int, const struct __edlprovider__getEdl *, const char*);
SOAP_FMAC3 struct __edlprovider__getEdl * SOAP_FMAC4 soap_in___edlprovider__getEdl(struct soap*, const char*, struct __edlprovider__getEdl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___edlprovider__getEdl(struct soap*, const struct __edlprovider__getEdl *, const char*, const char*);

#ifndef soap_write___edlprovider__getEdl
#define soap_write___edlprovider__getEdl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___edlprovider__getEdl(soap, data),0) || soap_put___edlprovider__getEdl(soap, data, "-edlprovider:getEdl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __edlprovider__getEdl * SOAP_FMAC4 soap_get___edlprovider__getEdl(struct soap*, struct __edlprovider__getEdl *, const char*, const char*);

#ifndef soap_read___edlprovider__getEdl
#define soap_read___edlprovider__getEdl(soap, data) ( soap_begin_recv(soap) || !soap_get___edlprovider__getEdl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __edlprovider__getEdl * SOAP_FMAC2 soap_instantiate___edlprovider__getEdl(struct soap*, int, const char*, const char*, size_t*);

inline struct __edlprovider__getEdl * soap_new___edlprovider__getEdl(struct soap *soap, int n = -1) { return soap_instantiate___edlprovider__getEdl(soap, n, NULL, NULL, NULL); }

inline struct __edlprovider__getEdl * soap_new_req___edlprovider__getEdl(struct soap *soap) { struct __edlprovider__getEdl *_p = soap_instantiate___edlprovider__getEdl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___edlprovider__getEdl(soap, _p); } return _p; }

inline struct __edlprovider__getEdl * soap_new_set___edlprovider__getEdl(struct soap *soap, edlprovider__EdlCreateRequestType *edlprovider__getEdlRequest) { struct __edlprovider__getEdl *_p = soap_instantiate___edlprovider__getEdl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___edlprovider__getEdl(soap, _p); _p->edlprovider__getEdlRequest = edlprovider__getEdlRequest; } return _p; }

inline void soap_delete___edlprovider__getEdl(struct soap *soap, struct __edlprovider__getEdl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___edlprovider__getEdl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___edlprovider__getInstalledEdls
#define SOAP_TYPE___edlprovider__getInstalledEdls (458)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___edlprovider__getInstalledEdls(struct soap*, struct __edlprovider__getInstalledEdls *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___edlprovider__getInstalledEdls(struct soap*, const struct __edlprovider__getInstalledEdls *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___edlprovider__getInstalledEdls(struct soap*, const char*, int, const struct __edlprovider__getInstalledEdls *, const char*);
SOAP_FMAC3 struct __edlprovider__getInstalledEdls * SOAP_FMAC4 soap_in___edlprovider__getInstalledEdls(struct soap*, const char*, struct __edlprovider__getInstalledEdls *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___edlprovider__getInstalledEdls(struct soap*, const struct __edlprovider__getInstalledEdls *, const char*, const char*);

#ifndef soap_write___edlprovider__getInstalledEdls
#define soap_write___edlprovider__getInstalledEdls(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize___edlprovider__getInstalledEdls(soap, data),0) || soap_put___edlprovider__getInstalledEdls(soap, data, "-edlprovider:getInstalledEdls", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __edlprovider__getInstalledEdls * SOAP_FMAC4 soap_get___edlprovider__getInstalledEdls(struct soap*, struct __edlprovider__getInstalledEdls *, const char*, const char*);

#ifndef soap_read___edlprovider__getInstalledEdls
#define soap_read___edlprovider__getInstalledEdls(soap, data) ( soap_begin_recv(soap) || !soap_get___edlprovider__getInstalledEdls(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __edlprovider__getInstalledEdls * SOAP_FMAC2 soap_instantiate___edlprovider__getInstalledEdls(struct soap*, int, const char*, const char*, size_t*);

inline struct __edlprovider__getInstalledEdls * soap_new___edlprovider__getInstalledEdls(struct soap *soap, int n = -1) { return soap_instantiate___edlprovider__getInstalledEdls(soap, n, NULL, NULL, NULL); }

inline struct __edlprovider__getInstalledEdls * soap_new_req___edlprovider__getInstalledEdls(struct soap *soap) { struct __edlprovider__getInstalledEdls *_p = soap_instantiate___edlprovider__getInstalledEdls(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___edlprovider__getInstalledEdls(soap, _p); } return _p; }

inline struct __edlprovider__getInstalledEdls * soap_new_set___edlprovider__getInstalledEdls(struct soap *soap) { struct __edlprovider__getInstalledEdls *_p = soap_instantiate___edlprovider__getInstalledEdls(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___edlprovider__getInstalledEdls(soap, _p); } return _p; }

inline void soap_delete___edlprovider__getInstalledEdls(struct soap *soap, struct __edlprovider__getInstalledEdls *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___edlprovider__getInstalledEdls(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (452)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, edlprovider__EdlProviderFaultType *edlprovider__edlProviderFault, int __type, void *fault, char *__any) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->edlprovider__edlProviderFault = edlprovider__edlProviderFault; _p->__type = __type; _p->fault = fault; _p->__any = __any; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE__fimstime__union_TimeType
#define SOAP_TYPE__fimstime__union_TimeType (332)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fimstime__union_TimeType(struct soap*, int, const union _fimstime__union_TimeType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimstime__union_TimeType(struct soap*, int, const union _fimstime__union_TimeType *);
SOAP_FMAC3 union _fimstime__union_TimeType * SOAP_FMAC4 soap_in__fimstime__union_TimeType(struct soap*, int*, union _fimstime__union_TimeType *);

#ifndef SOAP_TYPE__fimstime__union_DurationType
#define SOAP_TYPE__fimstime__union_DurationType (329)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fimstime__union_DurationType(struct soap*, int, const union _fimstime__union_DurationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fimstime__union_DurationType(struct soap*, int, const union _fimstime__union_DurationType *);
SOAP_FMAC3 union _fimstime__union_DurationType * SOAP_FMAC4 soap_in__fimstime__union_DurationType(struct soap*, int*, union _fimstime__union_DurationType *);

#ifndef SOAP_TYPE__fims__union_QueryGroupType
#define SOAP_TYPE__fims__union_QueryGroupType (301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fims__union_QueryGroupType(struct soap*, int, const union _fims__union_QueryGroupType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__union_QueryGroupType(struct soap*, int, const union _fims__union_QueryGroupType *);
SOAP_FMAC3 union _fims__union_QueryGroupType * SOAP_FMAC4 soap_in__fims__union_QueryGroupType(struct soap*, int*, union _fims__union_QueryGroupType *);

#ifndef SOAP_TYPE__fims__union_QueryParameterType_
#define SOAP_TYPE__fims__union_QueryParameterType_ (295)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fims__union_QueryParameterType_(struct soap*, int, const union _fims__union_QueryParameterType_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__union_QueryParameterType_(struct soap*, int, const union _fims__union_QueryParameterType_ *);
SOAP_FMAC3 union _fims__union_QueryParameterType_ * SOAP_FMAC4 soap_in__fims__union_QueryParameterType_(struct soap*, int*, union _fims__union_QueryParameterType_ *);

#ifndef SOAP_TYPE__fims__union_QueryParameterType
#define SOAP_TYPE__fims__union_QueryParameterType (294)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fims__union_QueryParameterType(struct soap*, int, const union _fims__union_QueryParameterType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__union_QueryParameterType(struct soap*, int, const union _fims__union_QueryParameterType *);
SOAP_FMAC3 union _fims__union_QueryParameterType * SOAP_FMAC4 soap_in__fims__union_QueryParameterType(struct soap*, int*, union _fims__union_QueryParameterType *);

#ifndef SOAP_TYPE__fims__union_QueryExpressionType
#define SOAP_TYPE__fims__union_QueryExpressionType (288)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__fims__union_QueryExpressionType(struct soap*, int, const union _fims__union_QueryExpressionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__fims__union_QueryExpressionType(struct soap*, int, const union _fims__union_QueryExpressionType *);
SOAP_FMAC3 union _fims__union_QueryExpressionType * SOAP_FMAC4 soap_in__fims__union_QueryExpressionType(struct soap*, int*, union _fims__union_QueryExpressionType *);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (472)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (471)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (468)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToedlprovider__EdlCreateRequestDoubleType
#define SOAP_TYPE_PointerToedlprovider__EdlCreateRequestDoubleType (463)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToedlprovider__EdlCreateRequestDoubleType(struct soap*, edlprovider__EdlCreateRequestDoubleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToedlprovider__EdlCreateRequestDoubleType(struct soap*, const char *, int, edlprovider__EdlCreateRequestDoubleType *const*, const char *);
SOAP_FMAC3 edlprovider__EdlCreateRequestDoubleType ** SOAP_FMAC4 soap_in_PointerToedlprovider__EdlCreateRequestDoubleType(struct soap*, const char*, edlprovider__EdlCreateRequestDoubleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToedlprovider__EdlCreateRequestDoubleType(struct soap*, edlprovider__EdlCreateRequestDoubleType *const*, const char*, const char*);

#ifndef soap_write_PointerToedlprovider__EdlCreateRequestDoubleType
#define soap_write_PointerToedlprovider__EdlCreateRequestDoubleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToedlprovider__EdlCreateRequestDoubleType(soap, data),0) || soap_put_PointerToedlprovider__EdlCreateRequestDoubleType(soap, data, "edlprovider:EdlCreateRequestDoubleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlCreateRequestDoubleType ** SOAP_FMAC4 soap_get_PointerToedlprovider__EdlCreateRequestDoubleType(struct soap*, edlprovider__EdlCreateRequestDoubleType **, const char*, const char*);

#ifndef soap_read_PointerToedlprovider__EdlCreateRequestDoubleType
#define soap_read_PointerToedlprovider__EdlCreateRequestDoubleType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToedlprovider__EdlCreateRequestDoubleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToedlprovider__EdlCreateRequestType
#define SOAP_TYPE_PointerToedlprovider__EdlCreateRequestType (459)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToedlprovider__EdlCreateRequestType(struct soap*, edlprovider__EdlCreateRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToedlprovider__EdlCreateRequestType(struct soap*, const char *, int, edlprovider__EdlCreateRequestType *const*, const char *);
SOAP_FMAC3 edlprovider__EdlCreateRequestType ** SOAP_FMAC4 soap_in_PointerToedlprovider__EdlCreateRequestType(struct soap*, const char*, edlprovider__EdlCreateRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToedlprovider__EdlCreateRequestType(struct soap*, edlprovider__EdlCreateRequestType *const*, const char*, const char*);

#ifndef soap_write_PointerToedlprovider__EdlCreateRequestType
#define soap_write_PointerToedlprovider__EdlCreateRequestType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToedlprovider__EdlCreateRequestType(soap, data),0) || soap_put_PointerToedlprovider__EdlCreateRequestType(soap, data, "edlprovider:EdlCreateRequestType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlCreateRequestType ** SOAP_FMAC4 soap_get_PointerToedlprovider__EdlCreateRequestType(struct soap*, edlprovider__EdlCreateRequestType **, const char*, const char*);

#ifndef soap_read_PointerToedlprovider__EdlCreateRequestType
#define soap_read_PointerToedlprovider__EdlCreateRequestType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToedlprovider__EdlCreateRequestType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToedlprovider__EdlProviderFaultType
#define SOAP_TYPE_PointerToedlprovider__EdlProviderFaultType (453)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToedlprovider__EdlProviderFaultType(struct soap*, edlprovider__EdlProviderFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToedlprovider__EdlProviderFaultType(struct soap*, const char *, int, edlprovider__EdlProviderFaultType *const*, const char *);
SOAP_FMAC3 edlprovider__EdlProviderFaultType ** SOAP_FMAC4 soap_in_PointerToedlprovider__EdlProviderFaultType(struct soap*, const char*, edlprovider__EdlProviderFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToedlprovider__EdlProviderFaultType(struct soap*, edlprovider__EdlProviderFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerToedlprovider__EdlProviderFaultType
#define soap_write_PointerToedlprovider__EdlProviderFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToedlprovider__EdlProviderFaultType(soap, data),0) || soap_put_PointerToedlprovider__EdlProviderFaultType(soap, data, "edlprovider:EdlProviderFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__EdlProviderFaultType ** SOAP_FMAC4 soap_get_PointerToedlprovider__EdlProviderFaultType(struct soap*, edlprovider__EdlProviderFaultType **, const char*, const char*);

#ifndef soap_read_PointerToedlprovider__EdlProviderFaultType
#define soap_read_PointerToedlprovider__EdlProviderFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToedlprovider__EdlProviderFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fims__ContainerFormatType_containerFormat
#define SOAP_TYPE_PointerTo_fims__ContainerFormatType_containerFormat (451)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fims__ContainerFormatType_containerFormat(struct soap*, _fims__ContainerFormatType_containerFormat *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fims__ContainerFormatType_containerFormat(struct soap*, const char *, int, _fims__ContainerFormatType_containerFormat *const*, const char *);
SOAP_FMAC3 _fims__ContainerFormatType_containerFormat ** SOAP_FMAC4 soap_in_PointerTo_fims__ContainerFormatType_containerFormat(struct soap*, const char*, _fims__ContainerFormatType_containerFormat **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fims__ContainerFormatType_containerFormat(struct soap*, _fims__ContainerFormatType_containerFormat *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fims__ContainerFormatType_containerFormat
#define soap_write_PointerTo_fims__ContainerFormatType_containerFormat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fims__ContainerFormatType_containerFormat(soap, data),0) || soap_put_PointerTo_fims__ContainerFormatType_containerFormat(soap, data, "fims:ContainerFormatType-containerFormat", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__ContainerFormatType_containerFormat ** SOAP_FMAC4 soap_get_PointerTo_fims__ContainerFormatType_containerFormat(struct soap*, _fims__ContainerFormatType_containerFormat **, const char*, const char*);

#ifndef soap_read_PointerTo_fims__ContainerFormatType_containerFormat
#define soap_read_PointerTo_fims__ContainerFormatType_containerFormat(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fims__ContainerFormatType_containerFormat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__AncillaryDataFormatType
#define SOAP_TYPE_PointerTofims__AncillaryDataFormatType (448)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__AncillaryDataFormatType(struct soap*, fims__AncillaryDataFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__AncillaryDataFormatType(struct soap*, const char *, int, fims__AncillaryDataFormatType *const*, const char *);
SOAP_FMAC3 fims__AncillaryDataFormatType ** SOAP_FMAC4 soap_in_PointerTofims__AncillaryDataFormatType(struct soap*, const char*, fims__AncillaryDataFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__AncillaryDataFormatType(struct soap*, fims__AncillaryDataFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__AncillaryDataFormatType
#define soap_write_PointerTofims__AncillaryDataFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__AncillaryDataFormatType(soap, data),0) || soap_put_PointerTofims__AncillaryDataFormatType(soap, data, "fims:AncillaryDataFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__AncillaryDataFormatType ** SOAP_FMAC4 soap_get_PointerTofims__AncillaryDataFormatType(struct soap*, fims__AncillaryDataFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__AncillaryDataFormatType
#define soap_read_PointerTofims__AncillaryDataFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__AncillaryDataFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__CaptioningFormatType
#define SOAP_TYPE_PointerTofims__CaptioningFormatType (446)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__CaptioningFormatType(struct soap*, fims__CaptioningFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__CaptioningFormatType(struct soap*, const char *, int, fims__CaptioningFormatType *const*, const char *);
SOAP_FMAC3 fims__CaptioningFormatType ** SOAP_FMAC4 soap_in_PointerTofims__CaptioningFormatType(struct soap*, const char*, fims__CaptioningFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__CaptioningFormatType(struct soap*, fims__CaptioningFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__CaptioningFormatType
#define soap_write_PointerTofims__CaptioningFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__CaptioningFormatType(soap, data),0) || soap_put_PointerTofims__CaptioningFormatType(soap, data, "fims:CaptioningFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CaptioningFormatType ** SOAP_FMAC4 soap_get_PointerTofims__CaptioningFormatType(struct soap*, fims__CaptioningFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__CaptioningFormatType
#define soap_read_PointerTofims__CaptioningFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__CaptioningFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__AudioSampleType
#define SOAP_TYPE_PointerTofims__AudioSampleType (445)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__AudioSampleType(struct soap*, enum fims__AudioSampleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__AudioSampleType(struct soap*, const char *, int, enum fims__AudioSampleType *const*, const char *);
SOAP_FMAC3 enum fims__AudioSampleType ** SOAP_FMAC4 soap_in_PointerTofims__AudioSampleType(struct soap*, const char*, enum fims__AudioSampleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__AudioSampleType(struct soap*, enum fims__AudioSampleType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__AudioSampleType
#define soap_write_PointerTofims__AudioSampleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__AudioSampleType(soap, data),0) || soap_put_PointerTofims__AudioSampleType(soap, data, "fims:AudioSampleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__AudioSampleType ** SOAP_FMAC4 soap_get_PointerTofims__AudioSampleType(struct soap*, enum fims__AudioSampleType **, const char*, const char*);

#ifndef soap_read_PointerTofims__AudioSampleType
#define soap_read_PointerTofims__AudioSampleType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__AudioSampleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fims__AudioFormatType_trackConfiguration
#define SOAP_TYPE_PointerTo_fims__AudioFormatType_trackConfiguration (444)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fims__AudioFormatType_trackConfiguration(struct soap*, _fims__AudioFormatType_trackConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fims__AudioFormatType_trackConfiguration(struct soap*, const char *, int, _fims__AudioFormatType_trackConfiguration *const*, const char *);
SOAP_FMAC3 _fims__AudioFormatType_trackConfiguration ** SOAP_FMAC4 soap_in_PointerTo_fims__AudioFormatType_trackConfiguration(struct soap*, const char*, _fims__AudioFormatType_trackConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fims__AudioFormatType_trackConfiguration(struct soap*, _fims__AudioFormatType_trackConfiguration *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fims__AudioFormatType_trackConfiguration
#define soap_write_PointerTo_fims__AudioFormatType_trackConfiguration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fims__AudioFormatType_trackConfiguration(soap, data),0) || soap_put_PointerTo_fims__AudioFormatType_trackConfiguration(soap, data, "fims:AudioFormatType-trackConfiguration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__AudioFormatType_trackConfiguration ** SOAP_FMAC4 soap_get_PointerTo_fims__AudioFormatType_trackConfiguration(struct soap*, _fims__AudioFormatType_trackConfiguration **, const char*, const char*);

#ifndef soap_read_PointerTo_fims__AudioFormatType_trackConfiguration
#define soap_read_PointerTo_fims__AudioFormatType_trackConfiguration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fims__AudioFormatType_trackConfiguration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__decimal
#define SOAP_TYPE_PointerToxsd__decimal (442)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__decimal
#define soap_write_PointerToxsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__decimal(soap, data),0) || soap_put_PointerToxsd__decimal(soap, data, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__decimal
#define soap_read_PointerToxsd__decimal(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ScanningOrderType
#define SOAP_TYPE_PointerTofims__ScanningOrderType (441)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ScanningOrderType(struct soap*, enum fims__ScanningOrderType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ScanningOrderType(struct soap*, const char *, int, enum fims__ScanningOrderType *const*, const char *);
SOAP_FMAC3 enum fims__ScanningOrderType ** SOAP_FMAC4 soap_in_PointerTofims__ScanningOrderType(struct soap*, const char*, enum fims__ScanningOrderType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ScanningOrderType(struct soap*, enum fims__ScanningOrderType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ScanningOrderType
#define soap_write_PointerTofims__ScanningOrderType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ScanningOrderType(soap, data),0) || soap_put_PointerTofims__ScanningOrderType(soap, data, "fims:ScanningOrderType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__ScanningOrderType ** SOAP_FMAC4 soap_get_PointerTofims__ScanningOrderType(struct soap*, enum fims__ScanningOrderType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ScanningOrderType
#define soap_read_PointerTofims__ScanningOrderType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ScanningOrderType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ScanningFormatType
#define SOAP_TYPE_PointerTofims__ScanningFormatType (440)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ScanningFormatType(struct soap*, enum fims__ScanningFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ScanningFormatType(struct soap*, const char *, int, enum fims__ScanningFormatType *const*, const char *);
SOAP_FMAC3 enum fims__ScanningFormatType ** SOAP_FMAC4 soap_in_PointerTofims__ScanningFormatType(struct soap*, const char*, enum fims__ScanningFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ScanningFormatType(struct soap*, enum fims__ScanningFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ScanningFormatType
#define soap_write_PointerTofims__ScanningFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ScanningFormatType(soap, data),0) || soap_put_PointerTofims__ScanningFormatType(soap, data, "fims:ScanningFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__ScanningFormatType ** SOAP_FMAC4 soap_get_PointerTofims__ScanningFormatType(struct soap*, enum fims__ScanningFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ScanningFormatType
#define soap_read_PointerTofims__ScanningFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ScanningFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BitRateModeType
#define SOAP_TYPE_PointerTofims__BitRateModeType (439)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BitRateModeType(struct soap*, enum fims__BitRateModeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BitRateModeType(struct soap*, const char *, int, enum fims__BitRateModeType *const*, const char *);
SOAP_FMAC3 enum fims__BitRateModeType ** SOAP_FMAC4 soap_in_PointerTofims__BitRateModeType(struct soap*, const char*, enum fims__BitRateModeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BitRateModeType(struct soap*, enum fims__BitRateModeType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BitRateModeType
#define soap_write_PointerTofims__BitRateModeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BitRateModeType(soap, data),0) || soap_put_PointerTofims__BitRateModeType(soap, data, "fims:BitRateModeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__BitRateModeType ** SOAP_FMAC4 soap_get_PointerTofims__BitRateModeType(struct soap*, enum fims__BitRateModeType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BitRateModeType
#define soap_read_PointerTofims__BitRateModeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BitRateModeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMTrackType
#define SOAP_TYPE_PointerTofims__BMTrackType (437)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMTrackType(struct soap*, fims__BMTrackType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMTrackType(struct soap*, const char *, int, fims__BMTrackType *const*, const char *);
SOAP_FMAC3 fims__BMTrackType ** SOAP_FMAC4 soap_in_PointerTofims__BMTrackType(struct soap*, const char*, fims__BMTrackType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMTrackType(struct soap*, fims__BMTrackType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMTrackType
#define soap_write_PointerTofims__BMTrackType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMTrackType(soap, data),0) || soap_put_PointerTofims__BMTrackType(soap, data, "fims:BMTrackType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMTrackType ** SOAP_FMAC4 soap_get_PointerTofims__BMTrackType(struct soap*, fims__BMTrackType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMTrackType
#define soap_read_PointerTofims__BMTrackType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMTrackType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__CodecType
#define SOAP_TYPE_PointerTofims__CodecType (436)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__CodecType(struct soap*, fims__CodecType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__CodecType(struct soap*, const char *, int, fims__CodecType *const*, const char *);
SOAP_FMAC3 fims__CodecType ** SOAP_FMAC4 soap_in_PointerTofims__CodecType(struct soap*, const char*, fims__CodecType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__CodecType(struct soap*, fims__CodecType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__CodecType
#define soap_write_PointerTofims__CodecType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__CodecType(soap, data),0) || soap_put_PointerTofims__CodecType(soap, data, "fims:CodecType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CodecType ** SOAP_FMAC4 soap_get_PointerTofims__CodecType(struct soap*, fims__CodecType **, const char*, const char*);

#ifndef soap_read_PointerTofims__CodecType
#define soap_read_PointerTofims__CodecType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__CodecType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__LengthType
#define SOAP_TYPE_PointerTofims__LengthType (435)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__LengthType(struct soap*, fims__LengthType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__LengthType(struct soap*, const char *, int, fims__LengthType *const*, const char *);
SOAP_FMAC3 fims__LengthType ** SOAP_FMAC4 soap_in_PointerTofims__LengthType(struct soap*, const char*, fims__LengthType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__LengthType(struct soap*, fims__LengthType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__LengthType
#define soap_write_PointerTofims__LengthType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__LengthType(soap, data),0) || soap_put_PointerTofims__LengthType(soap, data, "fims:LengthType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__LengthType ** SOAP_FMAC4 soap_get_PointerTofims__LengthType(struct soap*, fims__LengthType **, const char*, const char*);

#ifndef soap_read_PointerTofims__LengthType
#define soap_read_PointerTofims__LengthType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__LengthType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ResourceReferencesType
#define SOAP_TYPE_PointerTofims__ResourceReferencesType (434)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ResourceReferencesType(struct soap*, fims__ResourceReferencesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ResourceReferencesType(struct soap*, const char *, int, fims__ResourceReferencesType *const*, const char *);
SOAP_FMAC3 fims__ResourceReferencesType ** SOAP_FMAC4 soap_in_PointerTofims__ResourceReferencesType(struct soap*, const char*, fims__ResourceReferencesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ResourceReferencesType(struct soap*, fims__ResourceReferencesType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ResourceReferencesType
#define soap_write_PointerTofims__ResourceReferencesType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ResourceReferencesType(soap, data),0) || soap_put_PointerTofims__ResourceReferencesType(soap, data, "fims:ResourceReferencesType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ResourceReferencesType ** SOAP_FMAC4 soap_get_PointerTofims__ResourceReferencesType(struct soap*, fims__ResourceReferencesType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ResourceReferencesType
#define soap_read_PointerTofims__ResourceReferencesType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ResourceReferencesType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fims__BMEssenceLocatorType_containerMimeType
#define SOAP_TYPE_PointerTo_fims__BMEssenceLocatorType_containerMimeType (433)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fims__BMEssenceLocatorType_containerMimeType(struct soap*, _fims__BMEssenceLocatorType_containerMimeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fims__BMEssenceLocatorType_containerMimeType(struct soap*, const char *, int, _fims__BMEssenceLocatorType_containerMimeType *const*, const char *);
SOAP_FMAC3 _fims__BMEssenceLocatorType_containerMimeType ** SOAP_FMAC4 soap_in_PointerTo_fims__BMEssenceLocatorType_containerMimeType(struct soap*, const char*, _fims__BMEssenceLocatorType_containerMimeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fims__BMEssenceLocatorType_containerMimeType(struct soap*, _fims__BMEssenceLocatorType_containerMimeType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fims__BMEssenceLocatorType_containerMimeType
#define soap_write_PointerTo_fims__BMEssenceLocatorType_containerMimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fims__BMEssenceLocatorType_containerMimeType(soap, data),0) || soap_put_PointerTo_fims__BMEssenceLocatorType_containerMimeType(soap, data, "fims:BMEssenceLocatorType-containerMimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__BMEssenceLocatorType_containerMimeType ** SOAP_FMAC4 soap_get_PointerTo_fims__BMEssenceLocatorType_containerMimeType(struct soap*, _fims__BMEssenceLocatorType_containerMimeType **, const char*, const char*);

#ifndef soap_read_PointerTo_fims__BMEssenceLocatorType_containerMimeType
#define soap_read_PointerTo_fims__BMEssenceLocatorType_containerMimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fims__BMEssenceLocatorType_containerMimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__StorageType
#define SOAP_TYPE_PointerTofims__StorageType (431)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__StorageType(struct soap*, fims__StorageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__StorageType(struct soap*, const char *, int, fims__StorageType *const*, const char *);
SOAP_FMAC3 fims__StorageType ** SOAP_FMAC4 soap_in_PointerTofims__StorageType(struct soap*, const char*, fims__StorageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__StorageType(struct soap*, fims__StorageType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__StorageType
#define soap_write_PointerTofims__StorageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__StorageType(soap, data),0) || soap_put_PointerTofims__StorageType(soap, data, "fims:StorageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StorageType ** SOAP_FMAC4 soap_get_PointerTofims__StorageType(struct soap*, fims__StorageType **, const char*, const char*);

#ifndef soap_read_PointerTofims__StorageType
#define soap_read_PointerTofims__StorageType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__StorageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fims__BMContentFormatType_mimeType
#define SOAP_TYPE_PointerTo_fims__BMContentFormatType_mimeType (430)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fims__BMContentFormatType_mimeType(struct soap*, _fims__BMContentFormatType_mimeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fims__BMContentFormatType_mimeType(struct soap*, const char *, int, _fims__BMContentFormatType_mimeType *const*, const char *);
SOAP_FMAC3 _fims__BMContentFormatType_mimeType ** SOAP_FMAC4 soap_in_PointerTo_fims__BMContentFormatType_mimeType(struct soap*, const char*, _fims__BMContentFormatType_mimeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fims__BMContentFormatType_mimeType(struct soap*, _fims__BMContentFormatType_mimeType *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fims__BMContentFormatType_mimeType
#define soap_write_PointerTo_fims__BMContentFormatType_mimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fims__BMContentFormatType_mimeType(soap, data),0) || soap_put_PointerTo_fims__BMContentFormatType_mimeType(soap, data, "fims:BMContentFormatType-mimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__BMContentFormatType_mimeType ** SOAP_FMAC4 soap_get_PointerTo_fims__BMContentFormatType_mimeType(struct soap*, _fims__BMContentFormatType_mimeType **, const char*, const char*);

#ifndef soap_read_PointerTo_fims__BMContentFormatType_mimeType
#define soap_read_PointerTo_fims__BMContentFormatType_mimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fims__BMContentFormatType_mimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedLONG64
#define SOAP_TYPE_PointerTounsignedLONG64 (428)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedLONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedLONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerTounsignedLONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedLONG64(struct soap*, ULONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedLONG64
#define soap_write_PointerTounsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedLONG64(soap, data),0) || soap_put_PointerTounsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerTounsignedLONG64(struct soap*, ULONG64 **, const char*, const char*);

#ifndef soap_read_PointerTounsignedLONG64
#define soap_read_PointerTounsignedLONG64(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__HashType
#define SOAP_TYPE_PointerTofims__HashType (427)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__HashType(struct soap*, fims__HashType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__HashType(struct soap*, const char *, int, fims__HashType *const*, const char *);
SOAP_FMAC3 fims__HashType ** SOAP_FMAC4 soap_in_PointerTofims__HashType(struct soap*, const char*, fims__HashType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__HashType(struct soap*, fims__HashType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__HashType
#define soap_write_PointerTofims__HashType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__HashType(soap, data),0) || soap_put_PointerTofims__HashType(soap, data, "fims:HashType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__HashType ** SOAP_FMAC4 soap_get_PointerTofims__HashType(struct soap*, fims__HashType **, const char*, const char*);

#ifndef soap_read_PointerTofims__HashType
#define soap_read_PointerTofims__HashType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__HashType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fims__formatCollection
#define SOAP_TYPE_PointerTo_fims__formatCollection (426)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fims__formatCollection(struct soap*, _fims__formatCollection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fims__formatCollection(struct soap*, const char *, int, _fims__formatCollection *const*, const char *);
SOAP_FMAC3 _fims__formatCollection ** SOAP_FMAC4 soap_in_PointerTo_fims__formatCollection(struct soap*, const char*, _fims__formatCollection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fims__formatCollection(struct soap*, _fims__formatCollection *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fims__formatCollection
#define soap_write_PointerTo_fims__formatCollection(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fims__formatCollection(soap, data),0) || soap_put_PointerTo_fims__formatCollection(soap, data, "fims:formatCollection", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__formatCollection ** SOAP_FMAC4 soap_get_PointerTo_fims__formatCollection(struct soap*, _fims__formatCollection **, const char*, const char*);

#ifndef soap_read_PointerTo_fims__formatCollection
#define soap_read_PointerTo_fims__formatCollection(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fims__formatCollection(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMEssenceLocatorsType
#define SOAP_TYPE_PointerTofims__BMEssenceLocatorsType (425)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMEssenceLocatorsType(struct soap*, fims__BMEssenceLocatorsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMEssenceLocatorsType(struct soap*, const char *, int, fims__BMEssenceLocatorsType *const*, const char *);
SOAP_FMAC3 fims__BMEssenceLocatorsType ** SOAP_FMAC4 soap_in_PointerTofims__BMEssenceLocatorsType(struct soap*, const char*, fims__BMEssenceLocatorsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMEssenceLocatorsType(struct soap*, fims__BMEssenceLocatorsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMEssenceLocatorsType
#define soap_write_PointerTofims__BMEssenceLocatorsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMEssenceLocatorsType(soap, data),0) || soap_put_PointerTofims__BMEssenceLocatorsType(soap, data, "fims:BMEssenceLocatorsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMEssenceLocatorsType ** SOAP_FMAC4 soap_get_PointerTofims__BMEssenceLocatorsType(struct soap*, fims__BMEssenceLocatorsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMEssenceLocatorsType
#define soap_read_PointerTofims__BMEssenceLocatorsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMEssenceLocatorsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__bmContentDescriptionType
#define SOAP_TYPE_PointerTofimsdescription__bmContentDescriptionType (424)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__bmContentDescriptionType(struct soap*, fimsdescription__bmContentDescriptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__bmContentDescriptionType(struct soap*, const char *, int, fimsdescription__bmContentDescriptionType *const*, const char *);
SOAP_FMAC3 fimsdescription__bmContentDescriptionType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__bmContentDescriptionType(struct soap*, const char*, fimsdescription__bmContentDescriptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__bmContentDescriptionType(struct soap*, fimsdescription__bmContentDescriptionType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__bmContentDescriptionType
#define soap_write_PointerTofimsdescription__bmContentDescriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__bmContentDescriptionType(soap, data),0) || soap_put_PointerTofimsdescription__bmContentDescriptionType(soap, data, "fimsdescription:bmContentDescriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__bmContentDescriptionType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__bmContentDescriptionType(struct soap*, fimsdescription__bmContentDescriptionType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__bmContentDescriptionType
#define soap_read_PointerTofimsdescription__bmContentDescriptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__bmContentDescriptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__DescriptionsType
#define SOAP_TYPE_PointerTofims__DescriptionsType (423)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__DescriptionsType(struct soap*, fims__DescriptionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__DescriptionsType(struct soap*, const char *, int, fims__DescriptionsType *const*, const char *);
SOAP_FMAC3 fims__DescriptionsType ** SOAP_FMAC4 soap_in_PointerTofims__DescriptionsType(struct soap*, const char*, fims__DescriptionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__DescriptionsType(struct soap*, fims__DescriptionsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__DescriptionsType
#define soap_write_PointerTofims__DescriptionsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__DescriptionsType(soap, data),0) || soap_put_PointerTofims__DescriptionsType(soap, data, "fims:DescriptionsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__DescriptionsType ** SOAP_FMAC4 soap_get_PointerTofims__DescriptionsType(struct soap*, fims__DescriptionsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__DescriptionsType
#define soap_read_PointerTofims__DescriptionsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__DescriptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMContentFormatsType
#define SOAP_TYPE_PointerTofims__BMContentFormatsType (422)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMContentFormatsType(struct soap*, fims__BMContentFormatsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMContentFormatsType(struct soap*, const char *, int, fims__BMContentFormatsType *const*, const char *);
SOAP_FMAC3 fims__BMContentFormatsType ** SOAP_FMAC4 soap_in_PointerTofims__BMContentFormatsType(struct soap*, const char*, fims__BMContentFormatsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMContentFormatsType(struct soap*, fims__BMContentFormatsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMContentFormatsType
#define soap_write_PointerTofims__BMContentFormatsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMContentFormatsType(soap, data),0) || soap_put_PointerTofims__BMContentFormatsType(soap, data, "fims:BMContentFormatsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentFormatsType ** SOAP_FMAC4 soap_get_PointerTofims__BMContentFormatsType(struct soap*, fims__BMContentFormatsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMContentFormatsType
#define soap_read_PointerTofims__BMContentFormatsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMContentFormatsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMContentsType
#define SOAP_TYPE_PointerTofims__BMContentsType (421)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMContentsType(struct soap*, fims__BMContentsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMContentsType(struct soap*, const char *, int, fims__BMContentsType *const*, const char *);
SOAP_FMAC3 fims__BMContentsType ** SOAP_FMAC4 soap_in_PointerTofims__BMContentsType(struct soap*, const char*, fims__BMContentsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMContentsType(struct soap*, fims__BMContentsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMContentsType
#define soap_write_PointerTofims__BMContentsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMContentsType(soap, data),0) || soap_put_PointerTofims__BMContentsType(soap, data, "fims:BMContentsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentsType ** SOAP_FMAC4 soap_get_PointerTofims__BMContentsType(struct soap*, fims__BMContentsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMContentsType
#define soap_read_PointerTofims__BMContentsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMContentsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__TechnicalAttributeType
#define SOAP_TYPE_PointerTofims__TechnicalAttributeType (419)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__TechnicalAttributeType(struct soap*, fims__TechnicalAttributeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__TechnicalAttributeType(struct soap*, const char *, int, fims__TechnicalAttributeType *const*, const char *);
SOAP_FMAC3 fims__TechnicalAttributeType ** SOAP_FMAC4 soap_in_PointerTofims__TechnicalAttributeType(struct soap*, const char*, fims__TechnicalAttributeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__TechnicalAttributeType(struct soap*, fims__TechnicalAttributeType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__TechnicalAttributeType
#define soap_write_PointerTofims__TechnicalAttributeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__TechnicalAttributeType(soap, data),0) || soap_put_PointerTofims__TechnicalAttributeType(soap, data, "fims:TechnicalAttributeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__TechnicalAttributeType ** SOAP_FMAC4 soap_get_PointerTofims__TechnicalAttributeType(struct soap*, fims__TechnicalAttributeType **, const char*, const char*);

#ifndef soap_read_PointerTofims__TechnicalAttributeType
#define soap_read_PointerTofims__TechnicalAttributeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__TechnicalAttributeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ProcessedInfoType
#define SOAP_TYPE_PointerTofims__ProcessedInfoType (418)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ProcessedInfoType(struct soap*, fims__ProcessedInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ProcessedInfoType(struct soap*, const char *, int, fims__ProcessedInfoType *const*, const char *);
SOAP_FMAC3 fims__ProcessedInfoType ** SOAP_FMAC4 soap_in_PointerTofims__ProcessedInfoType(struct soap*, const char*, fims__ProcessedInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ProcessedInfoType(struct soap*, fims__ProcessedInfoType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ProcessedInfoType
#define soap_write_PointerTofims__ProcessedInfoType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ProcessedInfoType(soap, data),0) || soap_put_PointerTofims__ProcessedInfoType(soap, data, "fims:ProcessedInfoType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ProcessedInfoType ** SOAP_FMAC4 soap_get_PointerTofims__ProcessedInfoType(struct soap*, fims__ProcessedInfoType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ProcessedInfoType
#define soap_read_PointerTofims__ProcessedInfoType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ProcessedInfoType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__StartJobType
#define SOAP_TYPE_PointerTofims__StartJobType (417)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__StartJobType(struct soap*, fims__StartJobType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__StartJobType(struct soap*, const char *, int, fims__StartJobType *const*, const char *);
SOAP_FMAC3 fims__StartJobType ** SOAP_FMAC4 soap_in_PointerTofims__StartJobType(struct soap*, const char*, fims__StartJobType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__StartJobType(struct soap*, fims__StartJobType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__StartJobType
#define soap_write_PointerTofims__StartJobType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__StartJobType(soap, data),0) || soap_put_PointerTofims__StartJobType(soap, data, "fims:StartJobType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__StartJobType ** SOAP_FMAC4 soap_get_PointerTofims__StartJobType(struct soap*, fims__StartJobType **, const char*, const char*);

#ifndef soap_read_PointerTofims__StartJobType
#define soap_read_PointerTofims__StartJobType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__StartJobType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMObjectsType
#define SOAP_TYPE_PointerTofims__BMObjectsType (416)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMObjectsType(struct soap*, fims__BMObjectsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMObjectsType(struct soap*, const char *, int, fims__BMObjectsType *const*, const char *);
SOAP_FMAC3 fims__BMObjectsType ** SOAP_FMAC4 soap_in_PointerTofims__BMObjectsType(struct soap*, const char*, fims__BMObjectsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMObjectsType(struct soap*, fims__BMObjectsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMObjectsType
#define soap_write_PointerTofims__BMObjectsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMObjectsType(soap, data),0) || soap_put_PointerTofims__BMObjectsType(soap, data, "fims:BMObjectsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMObjectsType ** SOAP_FMAC4 soap_get_PointerTofims__BMObjectsType(struct soap*, fims__BMObjectsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMObjectsType
#define soap_read_PointerTofims__BMObjectsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMObjectsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__JobStatusType
#define SOAP_TYPE_PointerTofims__JobStatusType (415)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__JobStatusType(struct soap*, enum fims__JobStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__JobStatusType(struct soap*, const char *, int, enum fims__JobStatusType *const*, const char *);
SOAP_FMAC3 enum fims__JobStatusType ** SOAP_FMAC4 soap_in_PointerTofims__JobStatusType(struct soap*, const char*, enum fims__JobStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__JobStatusType(struct soap*, enum fims__JobStatusType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__JobStatusType
#define soap_write_PointerTofims__JobStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__JobStatusType(soap, data),0) || soap_put_PointerTofims__JobStatusType(soap, data, "fims:JobStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__JobStatusType ** SOAP_FMAC4 soap_get_PointerTofims__JobStatusType(struct soap*, enum fims__JobStatusType **, const char*, const char*);

#ifndef soap_read_PointerTofims__JobStatusType
#define soap_read_PointerTofims__JobStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__JobStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueueStatusType
#define SOAP_TYPE_PointerTofims__QueueStatusType (414)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueueStatusType(struct soap*, enum fims__QueueStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueueStatusType(struct soap*, const char *, int, enum fims__QueueStatusType *const*, const char *);
SOAP_FMAC3 enum fims__QueueStatusType ** SOAP_FMAC4 soap_in_PointerTofims__QueueStatusType(struct soap*, const char*, enum fims__QueueStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueueStatusType(struct soap*, enum fims__QueueStatusType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueueStatusType
#define soap_write_PointerTofims__QueueStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueueStatusType(soap, data),0) || soap_put_PointerTofims__QueueStatusType(soap, data, "fims:QueueStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__QueueStatusType ** SOAP_FMAC4 soap_get_PointerTofims__QueueStatusType(struct soap*, enum fims__QueueStatusType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueueStatusType
#define soap_read_PointerTofims__QueueStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueueStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fims__ServiceType_serviceDescription
#define SOAP_TYPE_PointerTo_fims__ServiceType_serviceDescription (413)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fims__ServiceType_serviceDescription(struct soap*, _fims__ServiceType_serviceDescription *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fims__ServiceType_serviceDescription(struct soap*, const char *, int, _fims__ServiceType_serviceDescription *const*, const char *);
SOAP_FMAC3 _fims__ServiceType_serviceDescription ** SOAP_FMAC4 soap_in_PointerTo_fims__ServiceType_serviceDescription(struct soap*, const char*, _fims__ServiceType_serviceDescription **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fims__ServiceType_serviceDescription(struct soap*, _fims__ServiceType_serviceDescription *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fims__ServiceType_serviceDescription
#define soap_write_PointerTo_fims__ServiceType_serviceDescription(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fims__ServiceType_serviceDescription(soap, data),0) || soap_put_PointerTo_fims__ServiceType_serviceDescription(soap, data, "fims:ServiceType-serviceDescription", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fims__ServiceType_serviceDescription ** SOAP_FMAC4 soap_get_PointerTo_fims__ServiceType_serviceDescription(struct soap*, _fims__ServiceType_serviceDescription **, const char*, const char*);

#ifndef soap_read_PointerTo_fims__ServiceType_serviceDescription
#define soap_read_PointerTo_fims__ServiceType_serviceDescription(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fims__ServiceType_serviceDescription(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__NMTOKEN
#define SOAP_TYPE_PointerToxsd__NMTOKEN (411)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__NMTOKEN(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__NMTOKEN(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__NMTOKEN(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__NMTOKEN(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__NMTOKEN
#define soap_write_PointerToxsd__NMTOKEN(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__NMTOKEN(soap, data),0) || soap_put_PointerToxsd__NMTOKEN(soap, data, "xsd:NMTOKEN", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__NMTOKEN(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__NMTOKEN
#define soap_read_PointerToxsd__NMTOKEN(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__NMTOKEN(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ListFilterType
#define SOAP_TYPE_PointerTofims__ListFilterType (410)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ListFilterType(struct soap*, fims__ListFilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ListFilterType(struct soap*, const char *, int, fims__ListFilterType *const*, const char *);
SOAP_FMAC3 fims__ListFilterType ** SOAP_FMAC4 soap_in_PointerTofims__ListFilterType(struct soap*, const char*, fims__ListFilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ListFilterType(struct soap*, fims__ListFilterType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ListFilterType
#define soap_write_PointerTofims__ListFilterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ListFilterType(soap, data),0) || soap_put_PointerTofims__ListFilterType(soap, data, "fims:ListFilterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ListFilterType ** SOAP_FMAC4 soap_get_PointerTofims__ListFilterType(struct soap*, fims__ListFilterType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ListFilterType
#define soap_read_PointerTofims__ListFilterType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ListFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimstime__DurationType
#define SOAP_TYPE_PointerTofimstime__DurationType (408)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimstime__DurationType(struct soap*, fimstime__DurationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimstime__DurationType(struct soap*, const char *, int, fimstime__DurationType *const*, const char *);
SOAP_FMAC3 fimstime__DurationType ** SOAP_FMAC4 soap_in_PointerTofimstime__DurationType(struct soap*, const char*, fimstime__DurationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimstime__DurationType(struct soap*, fimstime__DurationType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimstime__DurationType
#define soap_write_PointerTofimstime__DurationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimstime__DurationType(soap, data),0) || soap_put_PointerTofimstime__DurationType(soap, data, "fimstime:DurationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimstime__DurationType ** SOAP_FMAC4 soap_get_PointerTofimstime__DurationType(struct soap*, fimstime__DurationType **, const char*, const char*);

#ifndef soap_read_PointerTofimstime__DurationType
#define soap_read_PointerTofimstime__DurationType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimstime__DurationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__AsyncEndpointType
#define SOAP_TYPE_PointerTofims__AsyncEndpointType (405)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__AsyncEndpointType(struct soap*, fims__AsyncEndpointType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__AsyncEndpointType(struct soap*, const char *, int, fims__AsyncEndpointType *const*, const char *);
SOAP_FMAC3 fims__AsyncEndpointType ** SOAP_FMAC4 soap_in_PointerTofims__AsyncEndpointType(struct soap*, const char*, fims__AsyncEndpointType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__AsyncEndpointType(struct soap*, fims__AsyncEndpointType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__AsyncEndpointType
#define soap_write_PointerTofims__AsyncEndpointType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__AsyncEndpointType(soap, data),0) || soap_put_PointerTofims__AsyncEndpointType(soap, data, "fims:AsyncEndpointType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__AsyncEndpointType ** SOAP_FMAC4 soap_get_PointerTofims__AsyncEndpointType(struct soap*, fims__AsyncEndpointType **, const char*, const char*);

#ifndef soap_read_PointerTofims__AsyncEndpointType
#define soap_read_PointerTofims__AsyncEndpointType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__AsyncEndpointType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToedlprovider__EdlProviderErrorCodeType
#define SOAP_TYPE_PointerToedlprovider__EdlProviderErrorCodeType (404)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToedlprovider__EdlProviderErrorCodeType(struct soap*, enum edlprovider__EdlProviderErrorCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToedlprovider__EdlProviderErrorCodeType(struct soap*, const char *, int, enum edlprovider__EdlProviderErrorCodeType *const*, const char *);
SOAP_FMAC3 enum edlprovider__EdlProviderErrorCodeType ** SOAP_FMAC4 soap_in_PointerToedlprovider__EdlProviderErrorCodeType(struct soap*, const char*, enum edlprovider__EdlProviderErrorCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToedlprovider__EdlProviderErrorCodeType(struct soap*, enum edlprovider__EdlProviderErrorCodeType *const*, const char*, const char*);

#ifndef soap_write_PointerToedlprovider__EdlProviderErrorCodeType
#define soap_write_PointerToedlprovider__EdlProviderErrorCodeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToedlprovider__EdlProviderErrorCodeType(soap, data),0) || soap_put_PointerToedlprovider__EdlProviderErrorCodeType(soap, data, "edlprovider:EdlProviderErrorCodeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum edlprovider__EdlProviderErrorCodeType ** SOAP_FMAC4 soap_get_PointerToedlprovider__EdlProviderErrorCodeType(struct soap*, enum edlprovider__EdlProviderErrorCodeType **, const char*, const char*);

#ifndef soap_read_PointerToedlprovider__EdlProviderErrorCodeType
#define soap_read_PointerToedlprovider__EdlProviderErrorCodeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToedlprovider__EdlProviderErrorCodeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__RationalType
#define SOAP_TYPE_PointerTofims__RationalType (402)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__RationalType(struct soap*, fims__RationalType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__RationalType(struct soap*, const char *, int, fims__RationalType *const*, const char *);
SOAP_FMAC3 fims__RationalType ** SOAP_FMAC4 soap_in_PointerTofims__RationalType(struct soap*, const char*, fims__RationalType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__RationalType(struct soap*, fims__RationalType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__RationalType
#define soap_write_PointerTofims__RationalType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__RationalType(soap, data),0) || soap_put_PointerTofims__RationalType(soap, data, "fims:RationalType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__RationalType ** SOAP_FMAC4 soap_get_PointerTofims__RationalType(struct soap*, fims__RationalType **, const char*, const char*);

#ifndef soap_read_PointerTofims__RationalType
#define soap_read_PointerTofims__RationalType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__RationalType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__addressType_country
#define SOAP_TYPE_PointerTo_fimsdescription__addressType_country (401)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__addressType_country(struct soap*, _fimsdescription__addressType_country *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__addressType_country(struct soap*, const char *, int, _fimsdescription__addressType_country *const*, const char *);
SOAP_FMAC3 _fimsdescription__addressType_country ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__addressType_country(struct soap*, const char*, _fimsdescription__addressType_country **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__addressType_country(struct soap*, _fimsdescription__addressType_country *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__addressType_country
#define soap_write_PointerTo_fimsdescription__addressType_country(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__addressType_country(soap, data),0) || soap_put_PointerTo_fimsdescription__addressType_country(soap, data, "fimsdescription:addressType-country", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__addressType_country ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__addressType_country(struct soap*, _fimsdescription__addressType_country **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__addressType_country
#define soap_read_PointerTo_fimsdescription__addressType_country(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__addressType_country(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__addressType
#define SOAP_TYPE_PointerTofimsdescription__addressType (399)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__addressType(struct soap*, fimsdescription__addressType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__addressType(struct soap*, const char *, int, fimsdescription__addressType *const*, const char *);
SOAP_FMAC3 fimsdescription__addressType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__addressType(struct soap*, const char*, fimsdescription__addressType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__addressType(struct soap*, fimsdescription__addressType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__addressType
#define soap_write_PointerTofimsdescription__addressType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__addressType(soap, data),0) || soap_put_PointerTofimsdescription__addressType(soap, data, "fimsdescription:addressType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__addressType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__addressType(struct soap*, fimsdescription__addressType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__addressType
#define soap_read_PointerTofimsdescription__addressType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__addressType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment
#define SOAP_TYPE_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment (398)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, _fimsdescription__organisationDetailsType_organisationDepartment *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, const char *, int, _fimsdescription__organisationDetailsType_organisationDepartment *const*, const char *);
SOAP_FMAC3 _fimsdescription__organisationDetailsType_organisationDepartment ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, const char*, _fimsdescription__organisationDetailsType_organisationDepartment **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, _fimsdescription__organisationDetailsType_organisationDepartment *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment
#define soap_write_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(soap, data),0) || soap_put_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(soap, data, "fimsdescription:organisationDetailsType-organisationDepartment", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__organisationDetailsType_organisationDepartment ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(struct soap*, _fimsdescription__organisationDetailsType_organisationDepartment **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment
#define soap_read_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__organisationDetailsType_organisationDepartment(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__detailsType
#define SOAP_TYPE_PointerTofimsdescription__detailsType (394)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__detailsType(struct soap*, fimsdescription__detailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__detailsType(struct soap*, const char *, int, fimsdescription__detailsType *const*, const char *);
SOAP_FMAC3 fimsdescription__detailsType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__detailsType(struct soap*, const char*, fimsdescription__detailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__detailsType(struct soap*, fimsdescription__detailsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__detailsType
#define soap_write_PointerTofimsdescription__detailsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__detailsType(soap, data),0) || soap_put_PointerTofimsdescription__detailsType(soap, data, "fimsdescription:detailsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__detailsType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__detailsType(struct soap*, fimsdescription__detailsType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__detailsType
#define soap_read_PointerTofimsdescription__detailsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__detailsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role (393)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, std::vector<_fimsdescription__entityType_role >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, const char *, int, std::vector<_fimsdescription__entityType_role >*const*, const char *);
SOAP_FMAC3 std::vector<_fimsdescription__entityType_role >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, const char*, std::vector<_fimsdescription__entityType_role >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, std::vector<_fimsdescription__entityType_role >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role
#define soap_write_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(soap, data),0) || soap_put_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_fimsdescription__entityType_role >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, std::vector<_fimsdescription__entityType_role >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role
#define soap_read_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_fimsdescription__entityType_role(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__organisationDetailsType
#define SOAP_TYPE_PointerTofimsdescription__organisationDetailsType (389)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__organisationDetailsType(struct soap*, fimsdescription__organisationDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__organisationDetailsType(struct soap*, const char *, int, fimsdescription__organisationDetailsType *const*, const char *);
SOAP_FMAC3 fimsdescription__organisationDetailsType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__organisationDetailsType(struct soap*, const char*, fimsdescription__organisationDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__organisationDetailsType(struct soap*, fimsdescription__organisationDetailsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__organisationDetailsType
#define soap_write_PointerTofimsdescription__organisationDetailsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__organisationDetailsType(soap, data),0) || soap_put_PointerTofimsdescription__organisationDetailsType(soap, data, "fimsdescription:organisationDetailsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__organisationDetailsType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__organisationDetailsType(struct soap*, fimsdescription__organisationDetailsType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__organisationDetailsType
#define soap_read_PointerTofimsdescription__organisationDetailsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__organisationDetailsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__dateType_alternative
#define SOAP_TYPE_PointerTo_fimsdescription__dateType_alternative (388)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__dateType_alternative(struct soap*, _fimsdescription__dateType_alternative *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__dateType_alternative(struct soap*, const char *, int, _fimsdescription__dateType_alternative *const*, const char *);
SOAP_FMAC3 _fimsdescription__dateType_alternative ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__dateType_alternative(struct soap*, const char*, _fimsdescription__dateType_alternative **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__dateType_alternative(struct soap*, _fimsdescription__dateType_alternative *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__dateType_alternative
#define soap_write_PointerTo_fimsdescription__dateType_alternative(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__dateType_alternative(soap, data),0) || soap_put_PointerTo_fimsdescription__dateType_alternative(soap, data, "fimsdescription:dateType-alternative", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_alternative ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__dateType_alternative(struct soap*, _fimsdescription__dateType_alternative **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__dateType_alternative
#define soap_read_PointerTo_fimsdescription__dateType_alternative(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__dateType_alternative(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__dateType_issued
#define SOAP_TYPE_PointerTo_fimsdescription__dateType_issued (386)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__dateType_issued(struct soap*, _fimsdescription__dateType_issued *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__dateType_issued(struct soap*, const char *, int, _fimsdescription__dateType_issued *const*, const char *);
SOAP_FMAC3 _fimsdescription__dateType_issued ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__dateType_issued(struct soap*, const char*, _fimsdescription__dateType_issued **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__dateType_issued(struct soap*, _fimsdescription__dateType_issued *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__dateType_issued
#define soap_write_PointerTo_fimsdescription__dateType_issued(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__dateType_issued(soap, data),0) || soap_put_PointerTo_fimsdescription__dateType_issued(soap, data, "fimsdescription:dateType-issued", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_issued ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__dateType_issued(struct soap*, _fimsdescription__dateType_issued **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__dateType_issued
#define soap_read_PointerTo_fimsdescription__dateType_issued(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__dateType_issued(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__dateType_modified
#define SOAP_TYPE_PointerTo_fimsdescription__dateType_modified (384)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__dateType_modified(struct soap*, _fimsdescription__dateType_modified *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__dateType_modified(struct soap*, const char *, int, _fimsdescription__dateType_modified *const*, const char *);
SOAP_FMAC3 _fimsdescription__dateType_modified ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__dateType_modified(struct soap*, const char*, _fimsdescription__dateType_modified **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__dateType_modified(struct soap*, _fimsdescription__dateType_modified *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__dateType_modified
#define soap_write_PointerTo_fimsdescription__dateType_modified(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__dateType_modified(soap, data),0) || soap_put_PointerTo_fimsdescription__dateType_modified(soap, data, "fimsdescription:dateType-modified", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_modified ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__dateType_modified(struct soap*, _fimsdescription__dateType_modified **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__dateType_modified
#define soap_read_PointerTo_fimsdescription__dateType_modified(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__dateType_modified(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__dateType_created
#define SOAP_TYPE_PointerTo_fimsdescription__dateType_created (382)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__dateType_created(struct soap*, _fimsdescription__dateType_created *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__dateType_created(struct soap*, const char *, int, _fimsdescription__dateType_created *const*, const char *);
SOAP_FMAC3 _fimsdescription__dateType_created ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__dateType_created(struct soap*, const char*, _fimsdescription__dateType_created **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__dateType_created(struct soap*, _fimsdescription__dateType_created *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__dateType_created
#define soap_write_PointerTo_fimsdescription__dateType_created(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__dateType_created(soap, data),0) || soap_put_PointerTo_fimsdescription__dateType_created(soap, data, "fimsdescription:dateType-created", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__dateType_created ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__dateType_created(struct soap*, _fimsdescription__dateType_created **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__dateType_created
#define soap_read_PointerTo_fimsdescription__dateType_created(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__dateType_created(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__date
#define SOAP_TYPE_PointerToxsd__date (381)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__date(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__date(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__date(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__date(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__date
#define soap_write_PointerToxsd__date(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__date(soap, data),0) || soap_put_PointerToxsd__date(soap, data, "xsd:date", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__date(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__date
#define soap_read_PointerToxsd__date(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__date(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__gYear
#define SOAP_TYPE_PointerToxsd__gYear (380)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__gYear(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__gYear(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__gYear(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__gYear(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__gYear
#define soap_write_PointerToxsd__gYear(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__gYear(soap, data),0) || soap_put_PointerToxsd__gYear(soap, data, "xsd:gYear", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__gYear(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__gYear
#define soap_read_PointerToxsd__gYear(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__gYear(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__contactDetailsType
#define SOAP_TYPE_PointerTofimsdescription__contactDetailsType (377)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__contactDetailsType(struct soap*, fimsdescription__contactDetailsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__contactDetailsType(struct soap*, const char *, int, fimsdescription__contactDetailsType *const*, const char *);
SOAP_FMAC3 fimsdescription__contactDetailsType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__contactDetailsType(struct soap*, const char*, fimsdescription__contactDetailsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__contactDetailsType(struct soap*, fimsdescription__contactDetailsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__contactDetailsType
#define soap_write_PointerTofimsdescription__contactDetailsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__contactDetailsType(soap, data),0) || soap_put_PointerTofimsdescription__contactDetailsType(soap, data, "fimsdescription:contactDetailsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__contactDetailsType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__contactDetailsType(struct soap*, fimsdescription__contactDetailsType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__contactDetailsType
#define soap_read_PointerTofimsdescription__contactDetailsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__contactDetailsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__coverageType_spatial
#define SOAP_TYPE_PointerTo_fimsdescription__coverageType_spatial (376)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__coverageType_spatial(struct soap*, _fimsdescription__coverageType_spatial *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__coverageType_spatial(struct soap*, const char *, int, _fimsdescription__coverageType_spatial *const*, const char *);
SOAP_FMAC3 _fimsdescription__coverageType_spatial ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__coverageType_spatial(struct soap*, const char*, _fimsdescription__coverageType_spatial **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__coverageType_spatial(struct soap*, _fimsdescription__coverageType_spatial *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__coverageType_spatial
#define soap_write_PointerTo_fimsdescription__coverageType_spatial(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__coverageType_spatial(soap, data),0) || soap_put_PointerTo_fimsdescription__coverageType_spatial(soap, data, "fimsdescription:coverageType-spatial", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__coverageType_spatial ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__coverageType_spatial(struct soap*, _fimsdescription__coverageType_spatial **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__coverageType_spatial
#define soap_read_PointerTo_fimsdescription__coverageType_spatial(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__coverageType_spatial(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__coverageType_spatial_coordinates
#define SOAP_TYPE_PointerTo_fimsdescription__coverageType_spatial_coordinates (375)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__coverageType_spatial_coordinates(struct soap*, _fimsdescription__coverageType_spatial_coordinates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__coverageType_spatial_coordinates(struct soap*, const char *, int, _fimsdescription__coverageType_spatial_coordinates *const*, const char *);
SOAP_FMAC3 _fimsdescription__coverageType_spatial_coordinates ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__coverageType_spatial_coordinates(struct soap*, const char*, _fimsdescription__coverageType_spatial_coordinates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__coverageType_spatial_coordinates(struct soap*, _fimsdescription__coverageType_spatial_coordinates *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__coverageType_spatial_coordinates
#define soap_write_PointerTo_fimsdescription__coverageType_spatial_coordinates(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__coverageType_spatial_coordinates(soap, data),0) || soap_put_PointerTo_fimsdescription__coverageType_spatial_coordinates(soap, data, "fimsdescription:coverageType-spatial-coordinates", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__coverageType_spatial_coordinates ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__coverageType_spatial_coordinates(struct soap*, _fimsdescription__coverageType_spatial_coordinates **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__coverageType_spatial_coordinates
#define soap_read_PointerTo_fimsdescription__coverageType_spatial_coordinates(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__coverageType_spatial_coordinates(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_fimsdescription__coverageType_temporal
#define SOAP_TYPE_PointerTo_fimsdescription__coverageType_temporal (370)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_fimsdescription__coverageType_temporal(struct soap*, _fimsdescription__coverageType_temporal *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_fimsdescription__coverageType_temporal(struct soap*, const char *, int, _fimsdescription__coverageType_temporal *const*, const char *);
SOAP_FMAC3 _fimsdescription__coverageType_temporal ** SOAP_FMAC4 soap_in_PointerTo_fimsdescription__coverageType_temporal(struct soap*, const char*, _fimsdescription__coverageType_temporal **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_fimsdescription__coverageType_temporal(struct soap*, _fimsdescription__coverageType_temporal *const*, const char*, const char*);

#ifndef soap_write_PointerTo_fimsdescription__coverageType_temporal
#define soap_write_PointerTo_fimsdescription__coverageType_temporal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_fimsdescription__coverageType_temporal(soap, data),0) || soap_put_PointerTo_fimsdescription__coverageType_temporal(soap, data, "fimsdescription:coverageType-temporal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _fimsdescription__coverageType_temporal ** SOAP_FMAC4 soap_get_PointerTo_fimsdescription__coverageType_temporal(struct soap*, _fimsdescription__coverageType_temporal **, const char*, const char*);

#ifndef soap_read_PointerTo_fimsdescription__coverageType_temporal
#define soap_read_PointerTo_fimsdescription__coverageType_temporal(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_fimsdescription__coverageType_temporal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience (368)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, std::vector<_fimsdescription__typeType_targetAudience >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, const char *, int, std::vector<_fimsdescription__typeType_targetAudience >*const*, const char *);
SOAP_FMAC3 std::vector<_fimsdescription__typeType_targetAudience >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, const char*, std::vector<_fimsdescription__typeType_targetAudience >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, std::vector<_fimsdescription__typeType_targetAudience >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience
#define soap_write_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(soap, data),0) || soap_put_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_fimsdescription__typeType_targetAudience >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, std::vector<_fimsdescription__typeType_targetAudience >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience
#define soap_read_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_fimsdescription__typeType_targetAudience(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType (365)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, std::vector<_fimsdescription__typeType_objectType >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, const char *, int, std::vector<_fimsdescription__typeType_objectType >*const*, const char *);
SOAP_FMAC3 std::vector<_fimsdescription__typeType_objectType >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, const char*, std::vector<_fimsdescription__typeType_objectType >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, std::vector<_fimsdescription__typeType_objectType >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType
#define soap_write_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(soap, data),0) || soap_put_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_fimsdescription__typeType_objectType >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, std::vector<_fimsdescription__typeType_objectType >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType
#define soap_read_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_fimsdescription__typeType_objectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre
#define SOAP_TYPE_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre (362)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, std::vector<_fimsdescription__typeType_genre >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, const char *, int, std::vector<_fimsdescription__typeType_genre >*const*, const char *);
SOAP_FMAC3 std::vector<_fimsdescription__typeType_genre >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, const char*, std::vector<_fimsdescription__typeType_genre >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, std::vector<_fimsdescription__typeType_genre >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre
#define soap_write_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(soap, data),0) || soap_put_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(soap, data, "", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::vector<_fimsdescription__typeType_genre >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, std::vector<_fimsdescription__typeType_genre >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre
#define soap_read_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__vectorTemplateOf_fimsdescription__typeType_genre(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xml__lang
#define SOAP_TYPE_PointerTo_xml__lang (359)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xml__lang
#define soap_write_PointerTo_xml__lang(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_xml__lang(soap, data),0) || soap_put_PointerTo_xml__lang(soap, data, "xml:lang", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTo_xml__lang
#define soap_read_PointerTo_xml__lang(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xml__lang(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__partType
#define SOAP_TYPE_PointerTofimsdescription__partType (357)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__partType(struct soap*, fimsdescription__partType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__partType(struct soap*, const char *, int, fimsdescription__partType *const*, const char *);
SOAP_FMAC3 fimsdescription__partType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__partType(struct soap*, const char*, fimsdescription__partType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__partType(struct soap*, fimsdescription__partType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__partType
#define soap_write_PointerTofimsdescription__partType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__partType(soap, data),0) || soap_put_PointerTofimsdescription__partType(soap, data, "fimsdescription:partType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__partType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__partType(struct soap*, fimsdescription__partType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__partType
#define soap_read_PointerTofimsdescription__partType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__partType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__rightsType
#define SOAP_TYPE_PointerTofimsdescription__rightsType (355)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__rightsType(struct soap*, fimsdescription__rightsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__rightsType(struct soap*, const char *, int, fimsdescription__rightsType *const*, const char *);
SOAP_FMAC3 fimsdescription__rightsType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__rightsType(struct soap*, const char*, fimsdescription__rightsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__rightsType(struct soap*, fimsdescription__rightsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__rightsType
#define soap_write_PointerTofimsdescription__rightsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__rightsType(soap, data),0) || soap_put_PointerTofimsdescription__rightsType(soap, data, "fimsdescription:rightsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__rightsType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__rightsType(struct soap*, fimsdescription__rightsType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__rightsType
#define soap_read_PointerTofimsdescription__rightsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__rightsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__coverageType
#define SOAP_TYPE_PointerTofimsdescription__coverageType (353)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__coverageType(struct soap*, fimsdescription__coverageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__coverageType(struct soap*, const char *, int, fimsdescription__coverageType *const*, const char *);
SOAP_FMAC3 fimsdescription__coverageType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__coverageType(struct soap*, const char*, fimsdescription__coverageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__coverageType(struct soap*, fimsdescription__coverageType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__coverageType
#define soap_write_PointerTofimsdescription__coverageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__coverageType(soap, data),0) || soap_put_PointerTofimsdescription__coverageType(soap, data, "fimsdescription:coverageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__coverageType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__coverageType(struct soap*, fimsdescription__coverageType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__coverageType
#define soap_read_PointerTofimsdescription__coverageType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__coverageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__relationType
#define SOAP_TYPE_PointerTofimsdescription__relationType (351)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__relationType(struct soap*, fimsdescription__relationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__relationType(struct soap*, const char *, int, fimsdescription__relationType *const*, const char *);
SOAP_FMAC3 fimsdescription__relationType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__relationType(struct soap*, const char*, fimsdescription__relationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__relationType(struct soap*, fimsdescription__relationType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__relationType
#define soap_write_PointerTofimsdescription__relationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__relationType(soap, data),0) || soap_put_PointerTofimsdescription__relationType(soap, data, "fimsdescription:relationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__relationType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__relationType(struct soap*, fimsdescription__relationType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__relationType
#define soap_read_PointerTofimsdescription__relationType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__relationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__languageType
#define SOAP_TYPE_PointerTofimsdescription__languageType (349)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__languageType(struct soap*, fimsdescription__languageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__languageType(struct soap*, const char *, int, fimsdescription__languageType *const*, const char *);
SOAP_FMAC3 fimsdescription__languageType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__languageType(struct soap*, const char*, fimsdescription__languageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__languageType(struct soap*, fimsdescription__languageType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__languageType
#define soap_write_PointerTofimsdescription__languageType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__languageType(soap, data),0) || soap_put_PointerTofimsdescription__languageType(soap, data, "fimsdescription:languageType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__languageType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__languageType(struct soap*, fimsdescription__languageType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__languageType
#define soap_read_PointerTofimsdescription__languageType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__languageType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__identifierType
#define SOAP_TYPE_PointerTofimsdescription__identifierType (347)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__identifierType(struct soap*, fimsdescription__identifierType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__identifierType(struct soap*, const char *, int, fimsdescription__identifierType *const*, const char *);
SOAP_FMAC3 fimsdescription__identifierType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__identifierType(struct soap*, const char*, fimsdescription__identifierType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__identifierType(struct soap*, fimsdescription__identifierType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__identifierType
#define soap_write_PointerTofimsdescription__identifierType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__identifierType(soap, data),0) || soap_put_PointerTofimsdescription__identifierType(soap, data, "fimsdescription:identifierType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__identifierType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__identifierType(struct soap*, fimsdescription__identifierType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__identifierType
#define soap_read_PointerTofimsdescription__identifierType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__identifierType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__typeType
#define SOAP_TYPE_PointerTofimsdescription__typeType (345)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__typeType(struct soap*, fimsdescription__typeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__typeType(struct soap*, const char *, int, fimsdescription__typeType *const*, const char *);
SOAP_FMAC3 fimsdescription__typeType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__typeType(struct soap*, const char*, fimsdescription__typeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__typeType(struct soap*, fimsdescription__typeType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__typeType
#define soap_write_PointerTofimsdescription__typeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__typeType(soap, data),0) || soap_put_PointerTofimsdescription__typeType(soap, data, "fimsdescription:typeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__typeType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__typeType(struct soap*, fimsdescription__typeType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__typeType
#define soap_read_PointerTofimsdescription__typeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__typeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__dateType
#define SOAP_TYPE_PointerTofimsdescription__dateType (343)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__dateType(struct soap*, fimsdescription__dateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__dateType(struct soap*, const char *, int, fimsdescription__dateType *const*, const char *);
SOAP_FMAC3 fimsdescription__dateType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__dateType(struct soap*, const char*, fimsdescription__dateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__dateType(struct soap*, fimsdescription__dateType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__dateType
#define soap_write_PointerTofimsdescription__dateType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__dateType(soap, data),0) || soap_put_PointerTofimsdescription__dateType(soap, data, "fimsdescription:dateType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__dateType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__dateType(struct soap*, fimsdescription__dateType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__dateType
#define soap_read_PointerTofimsdescription__dateType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__dateType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__descriptionType
#define SOAP_TYPE_PointerTofimsdescription__descriptionType (341)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__descriptionType(struct soap*, fimsdescription__descriptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__descriptionType(struct soap*, const char *, int, fimsdescription__descriptionType *const*, const char *);
SOAP_FMAC3 fimsdescription__descriptionType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__descriptionType(struct soap*, const char*, fimsdescription__descriptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__descriptionType(struct soap*, fimsdescription__descriptionType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__descriptionType
#define soap_write_PointerTofimsdescription__descriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__descriptionType(soap, data),0) || soap_put_PointerTofimsdescription__descriptionType(soap, data, "fimsdescription:descriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__descriptionType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__descriptionType(struct soap*, fimsdescription__descriptionType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__descriptionType
#define soap_read_PointerTofimsdescription__descriptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__descriptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__subjectType
#define SOAP_TYPE_PointerTofimsdescription__subjectType (339)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__subjectType(struct soap*, fimsdescription__subjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__subjectType(struct soap*, const char *, int, fimsdescription__subjectType *const*, const char *);
SOAP_FMAC3 fimsdescription__subjectType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__subjectType(struct soap*, const char*, fimsdescription__subjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__subjectType(struct soap*, fimsdescription__subjectType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__subjectType
#define soap_write_PointerTofimsdescription__subjectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__subjectType(soap, data),0) || soap_put_PointerTofimsdescription__subjectType(soap, data, "fimsdescription:subjectType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__subjectType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__subjectType(struct soap*, fimsdescription__subjectType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__subjectType
#define soap_read_PointerTofimsdescription__subjectType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__subjectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__entityType
#define SOAP_TYPE_PointerTofimsdescription__entityType (337)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__entityType(struct soap*, fimsdescription__entityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__entityType(struct soap*, const char *, int, fimsdescription__entityType *const*, const char *);
SOAP_FMAC3 fimsdescription__entityType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__entityType(struct soap*, const char*, fimsdescription__entityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__entityType(struct soap*, fimsdescription__entityType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__entityType
#define soap_write_PointerTofimsdescription__entityType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__entityType(soap, data),0) || soap_put_PointerTofimsdescription__entityType(soap, data, "fimsdescription:entityType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__entityType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__entityType(struct soap*, fimsdescription__entityType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__entityType
#define soap_read_PointerTofimsdescription__entityType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__entityType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__titleType
#define SOAP_TYPE_PointerTofimsdescription__titleType (335)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__titleType(struct soap*, fimsdescription__titleType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__titleType(struct soap*, const char *, int, fimsdescription__titleType *const*, const char *);
SOAP_FMAC3 fimsdescription__titleType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__titleType(struct soap*, const char*, fimsdescription__titleType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__titleType(struct soap*, fimsdescription__titleType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__titleType
#define soap_write_PointerTofimsdescription__titleType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__titleType(soap, data),0) || soap_put_PointerTofimsdescription__titleType(soap, data, "fimsdescription:titleType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__titleType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__titleType(struct soap*, fimsdescription__titleType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__titleType
#define soap_read_PointerTofimsdescription__titleType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__titleType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimsdescription__textElementType
#define SOAP_TYPE_PointerTofimsdescription__textElementType (333)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimsdescription__textElementType(struct soap*, fimsdescription__textElementType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimsdescription__textElementType(struct soap*, const char *, int, fimsdescription__textElementType *const*, const char *);
SOAP_FMAC3 fimsdescription__textElementType ** SOAP_FMAC4 soap_in_PointerTofimsdescription__textElementType(struct soap*, const char*, fimsdescription__textElementType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimsdescription__textElementType(struct soap*, fimsdescription__textElementType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimsdescription__textElementType
#define soap_write_PointerTofimsdescription__textElementType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimsdescription__textElementType(soap, data),0) || soap_put_PointerTofimsdescription__textElementType(soap, data, "fimsdescription:textElementType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimsdescription__textElementType ** SOAP_FMAC4 soap_get_PointerTofimsdescription__textElementType(struct soap*, fimsdescription__textElementType **, const char*, const char*);

#ifndef soap_read_PointerTofimsdescription__textElementType
#define soap_read_PointerTofimsdescription__textElementType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimsdescription__textElementType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__time
#define SOAP_TYPE_PointerToxsd__time (331)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__time(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__time(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__time(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__time(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__time
#define soap_write_PointerToxsd__time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__time(soap, data),0) || soap_put_PointerToxsd__time(soap, data, "xsd:time", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__time(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__time
#define soap_read_PointerToxsd__time(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimstime__Timecode
#define SOAP_TYPE_PointerTofimstime__Timecode (330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimstime__Timecode(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimstime__Timecode(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTofimstime__Timecode(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimstime__Timecode(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTofimstime__Timecode
#define soap_write_PointerTofimstime__Timecode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimstime__Timecode(soap, data),0) || soap_put_PointerTofimstime__Timecode(soap, data, "fimstime:Timecode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTofimstime__Timecode(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTofimstime__Timecode
#define soap_read_PointerTofimstime__Timecode(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimstime__Timecode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimstime__EditUnitNumberType
#define SOAP_TYPE_PointerTofimstime__EditUnitNumberType (328)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimstime__EditUnitNumberType(struct soap*, fimstime__EditUnitNumberType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimstime__EditUnitNumberType(struct soap*, const char *, int, fimstime__EditUnitNumberType *const*, const char *);
SOAP_FMAC3 fimstime__EditUnitNumberType ** SOAP_FMAC4 soap_in_PointerTofimstime__EditUnitNumberType(struct soap*, const char*, fimstime__EditUnitNumberType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimstime__EditUnitNumberType(struct soap*, fimstime__EditUnitNumberType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimstime__EditUnitNumberType
#define soap_write_PointerTofimstime__EditUnitNumberType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimstime__EditUnitNumberType(soap, data),0) || soap_put_PointerTofimstime__EditUnitNumberType(soap, data, "fimstime:EditUnitNumberType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimstime__EditUnitNumberType ** SOAP_FMAC4 soap_get_PointerTofimstime__EditUnitNumberType(struct soap*, fimstime__EditUnitNumberType **, const char*, const char*);

#ifndef soap_read_PointerTofimstime__EditUnitNumberType
#define soap_read_PointerTofimstime__EditUnitNumberType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimstime__EditUnitNumberType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__duration
#define SOAP_TYPE_PointerToxsd__duration (327)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__duration(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__duration(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToxsd__duration(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__duration(struct soap*, LONG64 *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__duration
#define soap_write_PointerToxsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__duration(soap, data),0) || soap_put_PointerToxsd__duration(soap, data, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToxsd__duration(struct soap*, LONG64 **, const char*, const char*);

#ifndef soap_read_PointerToxsd__duration
#define soap_read_PointerToxsd__duration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimstime__TimecodeDuration
#define SOAP_TYPE_PointerTofimstime__TimecodeDuration (326)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimstime__TimecodeDuration(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimstime__TimecodeDuration(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTofimstime__TimecodeDuration(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimstime__TimecodeDuration(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTofimstime__TimecodeDuration
#define soap_write_PointerTofimstime__TimecodeDuration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimstime__TimecodeDuration(soap, data),0) || soap_put_PointerTofimstime__TimecodeDuration(soap, data, "fimstime:TimecodeDuration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTofimstime__TimecodeDuration(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTofimstime__TimecodeDuration
#define soap_read_PointerTofimstime__TimecodeDuration(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimstime__TimecodeDuration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__SystemPerformanceEventType
#define SOAP_TYPE_PointerTofims__SystemPerformanceEventType (324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__SystemPerformanceEventType(struct soap*, fims__SystemPerformanceEventType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__SystemPerformanceEventType(struct soap*, const char *, int, fims__SystemPerformanceEventType *const*, const char *);
SOAP_FMAC3 fims__SystemPerformanceEventType ** SOAP_FMAC4 soap_in_PointerTofims__SystemPerformanceEventType(struct soap*, const char*, fims__SystemPerformanceEventType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__SystemPerformanceEventType(struct soap*, fims__SystemPerformanceEventType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__SystemPerformanceEventType
#define soap_write_PointerTofims__SystemPerformanceEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__SystemPerformanceEventType(soap, data),0) || soap_put_PointerTofims__SystemPerformanceEventType(soap, data, "fims:SystemPerformanceEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemPerformanceEventType ** SOAP_FMAC4 soap_get_PointerTofims__SystemPerformanceEventType(struct soap*, fims__SystemPerformanceEventType **, const char*, const char*);

#ifndef soap_read_PointerTofims__SystemPerformanceEventType
#define soap_read_PointerTofims__SystemPerformanceEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__SystemPerformanceEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__SystemExceptionEventType
#define SOAP_TYPE_PointerTofims__SystemExceptionEventType (322)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__SystemExceptionEventType(struct soap*, fims__SystemExceptionEventType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__SystemExceptionEventType(struct soap*, const char *, int, fims__SystemExceptionEventType *const*, const char *);
SOAP_FMAC3 fims__SystemExceptionEventType ** SOAP_FMAC4 soap_in_PointerTofims__SystemExceptionEventType(struct soap*, const char*, fims__SystemExceptionEventType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__SystemExceptionEventType(struct soap*, fims__SystemExceptionEventType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__SystemExceptionEventType
#define soap_write_PointerTofims__SystemExceptionEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__SystemExceptionEventType(soap, data),0) || soap_put_PointerTofims__SystemExceptionEventType(soap, data, "fims:SystemExceptionEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemExceptionEventType ** SOAP_FMAC4 soap_get_PointerTofims__SystemExceptionEventType(struct soap*, fims__SystemExceptionEventType **, const char*, const char*);

#ifndef soap_read_PointerTofims__SystemExceptionEventType
#define soap_read_PointerTofims__SystemExceptionEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__SystemExceptionEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__SystemEventType
#define SOAP_TYPE_PointerTofims__SystemEventType (320)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__SystemEventType(struct soap*, fims__SystemEventType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__SystemEventType(struct soap*, const char *, int, fims__SystemEventType *const*, const char *);
SOAP_FMAC3 fims__SystemEventType ** SOAP_FMAC4 soap_in_PointerTofims__SystemEventType(struct soap*, const char*, fims__SystemEventType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__SystemEventType(struct soap*, fims__SystemEventType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__SystemEventType
#define soap_write_PointerTofims__SystemEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__SystemEventType(soap, data),0) || soap_put_PointerTofims__SystemEventType(soap, data, "fims:SystemEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SystemEventType ** SOAP_FMAC4 soap_get_PointerTofims__SystemEventType(struct soap*, fims__SystemEventType **, const char*, const char*);

#ifndef soap_read_PointerTofims__SystemEventType
#define soap_read_PointerTofims__SystemEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__SystemEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ContentCustomEventType
#define SOAP_TYPE_PointerTofims__ContentCustomEventType (318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ContentCustomEventType(struct soap*, fims__ContentCustomEventType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ContentCustomEventType(struct soap*, const char *, int, fims__ContentCustomEventType *const*, const char *);
SOAP_FMAC3 fims__ContentCustomEventType ** SOAP_FMAC4 soap_in_PointerTofims__ContentCustomEventType(struct soap*, const char*, fims__ContentCustomEventType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ContentCustomEventType(struct soap*, fims__ContentCustomEventType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ContentCustomEventType
#define soap_write_PointerTofims__ContentCustomEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ContentCustomEventType(soap, data),0) || soap_put_PointerTofims__ContentCustomEventType(soap, data, "fims:ContentCustomEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentCustomEventType ** SOAP_FMAC4 soap_get_PointerTofims__ContentCustomEventType(struct soap*, fims__ContentCustomEventType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ContentCustomEventType
#define soap_read_PointerTofims__ContentCustomEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ContentCustomEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ContentStatusEventType
#define SOAP_TYPE_PointerTofims__ContentStatusEventType (316)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ContentStatusEventType(struct soap*, fims__ContentStatusEventType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ContentStatusEventType(struct soap*, const char *, int, fims__ContentStatusEventType *const*, const char *);
SOAP_FMAC3 fims__ContentStatusEventType ** SOAP_FMAC4 soap_in_PointerTofims__ContentStatusEventType(struct soap*, const char*, fims__ContentStatusEventType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ContentStatusEventType(struct soap*, fims__ContentStatusEventType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ContentStatusEventType
#define soap_write_PointerTofims__ContentStatusEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ContentStatusEventType(soap, data),0) || soap_put_PointerTofims__ContentStatusEventType(soap, data, "fims:ContentStatusEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentStatusEventType ** SOAP_FMAC4 soap_get_PointerTofims__ContentStatusEventType(struct soap*, fims__ContentStatusEventType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ContentStatusEventType
#define soap_read_PointerTofims__ContentStatusEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ContentStatusEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ContentEventType
#define SOAP_TYPE_PointerTofims__ContentEventType (314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ContentEventType(struct soap*, fims__ContentEventType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ContentEventType(struct soap*, const char *, int, fims__ContentEventType *const*, const char *);
SOAP_FMAC3 fims__ContentEventType ** SOAP_FMAC4 soap_in_PointerTofims__ContentEventType(struct soap*, const char*, fims__ContentEventType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ContentEventType(struct soap*, fims__ContentEventType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ContentEventType
#define soap_write_PointerTofims__ContentEventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ContentEventType(soap, data),0) || soap_put_PointerTofims__ContentEventType(soap, data, "fims:ContentEventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContentEventType ** SOAP_FMAC4 soap_get_PointerTofims__ContentEventType(struct soap*, fims__ContentEventType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ContentEventType
#define soap_read_PointerTofims__ContentEventType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ContentEventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__EventEnvelopeType
#define SOAP_TYPE_PointerTofims__EventEnvelopeType (311)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__EventEnvelopeType(struct soap*, fims__EventEnvelopeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__EventEnvelopeType(struct soap*, const char *, int, fims__EventEnvelopeType *const*, const char *);
SOAP_FMAC3 fims__EventEnvelopeType ** SOAP_FMAC4 soap_in_PointerTofims__EventEnvelopeType(struct soap*, const char*, fims__EventEnvelopeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__EventEnvelopeType(struct soap*, fims__EventEnvelopeType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__EventEnvelopeType
#define soap_write_PointerTofims__EventEnvelopeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__EventEnvelopeType(soap, data),0) || soap_put_PointerTofims__EventEnvelopeType(soap, data, "fims:EventEnvelopeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__EventEnvelopeType ** SOAP_FMAC4 soap_get_PointerTofims__EventEnvelopeType(struct soap*, fims__EventEnvelopeType **, const char*, const char*);

#ifndef soap_read_PointerTofims__EventEnvelopeType
#define soap_read_PointerTofims__EventEnvelopeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__EventEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__EventPayloadType
#define SOAP_TYPE_PointerTofims__EventPayloadType (310)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__EventPayloadType(struct soap*, fims__EventPayloadType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__EventPayloadType(struct soap*, const char *, int, fims__EventPayloadType *const*, const char *);
SOAP_FMAC3 fims__EventPayloadType ** SOAP_FMAC4 soap_in_PointerTofims__EventPayloadType(struct soap*, const char*, fims__EventPayloadType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__EventPayloadType(struct soap*, fims__EventPayloadType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__EventPayloadType
#define soap_write_PointerTofims__EventPayloadType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__EventPayloadType(soap, data),0) || soap_put_PointerTofims__EventPayloadType(soap, data, "fims:EventPayloadType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__EventPayloadType ** SOAP_FMAC4 soap_get_PointerTofims__EventPayloadType(struct soap*, fims__EventPayloadType **, const char*, const char*);

#ifndef soap_read_PointerTofims__EventPayloadType
#define soap_read_PointerTofims__EventPayloadType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__EventPayloadType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__EventClassificationType
#define SOAP_TYPE_PointerTofims__EventClassificationType (309)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__EventClassificationType(struct soap*, enum fims__EventClassificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__EventClassificationType(struct soap*, const char *, int, enum fims__EventClassificationType *const*, const char *);
SOAP_FMAC3 enum fims__EventClassificationType ** SOAP_FMAC4 soap_in_PointerTofims__EventClassificationType(struct soap*, const char*, enum fims__EventClassificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__EventClassificationType(struct soap*, enum fims__EventClassificationType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__EventClassificationType
#define soap_write_PointerTofims__EventClassificationType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__EventClassificationType(soap, data),0) || soap_put_PointerTofims__EventClassificationType(soap, data, "fims:EventClassificationType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__EventClassificationType ** SOAP_FMAC4 soap_get_PointerTofims__EventClassificationType(struct soap*, enum fims__EventClassificationType **, const char*, const char*);

#ifndef soap_read_PointerTofims__EventClassificationType
#define soap_read_PointerTofims__EventClassificationType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__EventClassificationType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__EventSubType
#define SOAP_TYPE_PointerTofims__EventSubType (308)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__EventSubType(struct soap*, enum fims__EventSubType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__EventSubType(struct soap*, const char *, int, enum fims__EventSubType *const*, const char *);
SOAP_FMAC3 enum fims__EventSubType ** SOAP_FMAC4 soap_in_PointerTofims__EventSubType(struct soap*, const char*, enum fims__EventSubType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__EventSubType(struct soap*, enum fims__EventSubType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__EventSubType
#define soap_write_PointerTofims__EventSubType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__EventSubType(soap, data),0) || soap_put_PointerTofims__EventSubType(soap, data, "fims:EventSubType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__EventSubType ** SOAP_FMAC4 soap_get_PointerTofims__EventSubType(struct soap*, enum fims__EventSubType **, const char*, const char*);

#ifndef soap_read_PointerTofims__EventSubType
#define soap_read_PointerTofims__EventSubType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__EventSubType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__EventType
#define SOAP_TYPE_PointerTofims__EventType (307)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__EventType(struct soap*, enum fims__EventType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__EventType(struct soap*, const char *, int, enum fims__EventType *const*, const char *);
SOAP_FMAC3 enum fims__EventType ** SOAP_FMAC4 soap_in_PointerTofims__EventType(struct soap*, const char*, enum fims__EventType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__EventType(struct soap*, enum fims__EventType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__EventType
#define soap_write_PointerTofims__EventType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__EventType(soap, data),0) || soap_put_PointerTofims__EventType(soap, data, "fims:EventType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__EventType ** SOAP_FMAC4 soap_get_PointerTofims__EventType(struct soap*, enum fims__EventType **, const char*, const char*);

#ifndef soap_read_PointerTofims__EventType
#define soap_read_PointerTofims__EventType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__EventType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__CustomEventTemplateType
#define SOAP_TYPE_PointerTofims__CustomEventTemplateType (305)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__CustomEventTemplateType(struct soap*, fims__CustomEventTemplateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__CustomEventTemplateType(struct soap*, const char *, int, fims__CustomEventTemplateType *const*, const char *);
SOAP_FMAC3 fims__CustomEventTemplateType ** SOAP_FMAC4 soap_in_PointerTofims__CustomEventTemplateType(struct soap*, const char*, fims__CustomEventTemplateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__CustomEventTemplateType(struct soap*, fims__CustomEventTemplateType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__CustomEventTemplateType
#define soap_write_PointerTofims__CustomEventTemplateType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__CustomEventTemplateType(soap, data),0) || soap_put_PointerTofims__CustomEventTemplateType(soap, data, "fims:CustomEventTemplateType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomEventTemplateType ** SOAP_FMAC4 soap_get_PointerTofims__CustomEventTemplateType(struct soap*, fims__CustomEventTemplateType **, const char*, const char*);

#ifndef soap_read_PointerTofims__CustomEventTemplateType
#define soap_read_PointerTofims__CustomEventTemplateType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__CustomEventTemplateType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueryExpressionsType
#define SOAP_TYPE_PointerTofims__QueryExpressionsType (304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueryExpressionsType(struct soap*, fims__QueryExpressionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueryExpressionsType(struct soap*, const char *, int, fims__QueryExpressionsType *const*, const char *);
SOAP_FMAC3 fims__QueryExpressionsType ** SOAP_FMAC4 soap_in_PointerTofims__QueryExpressionsType(struct soap*, const char*, fims__QueryExpressionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueryExpressionsType(struct soap*, fims__QueryExpressionsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueryExpressionsType
#define soap_write_PointerTofims__QueryExpressionsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueryExpressionsType(soap, data),0) || soap_put_PointerTofims__QueryExpressionsType(soap, data, "fims:QueryExpressionsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryExpressionsType ** SOAP_FMAC4 soap_get_PointerTofims__QueryExpressionsType(struct soap*, fims__QueryExpressionsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueryExpressionsType
#define soap_read_PointerTofims__QueryExpressionsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueryExpressionsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ResourceIDType
#define SOAP_TYPE_PointerTofims__ResourceIDType (303)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ResourceIDType(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ResourceIDType(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTofims__ResourceIDType(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ResourceIDType(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ResourceIDType
#define soap_write_PointerTofims__ResourceIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ResourceIDType(soap, data),0) || soap_put_PointerTofims__ResourceIDType(soap, data, "fims:ResourceIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTofims__ResourceIDType(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTofims__ResourceIDType
#define soap_read_PointerTofims__ResourceIDType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ResourceIDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueryGroupsType
#define SOAP_TYPE_PointerTofims__QueryGroupsType (300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueryGroupsType(struct soap*, fims__QueryGroupsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueryGroupsType(struct soap*, const char *, int, fims__QueryGroupsType *const*, const char *);
SOAP_FMAC3 fims__QueryGroupsType ** SOAP_FMAC4 soap_in_PointerTofims__QueryGroupsType(struct soap*, const char*, fims__QueryGroupsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueryGroupsType(struct soap*, fims__QueryGroupsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueryGroupsType
#define soap_write_PointerTofims__QueryGroupsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueryGroupsType(soap, data),0) || soap_put_PointerTofims__QueryGroupsType(soap, data, "fims:QueryGroupsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryGroupsType ** SOAP_FMAC4 soap_get_PointerTofims__QueryGroupsType(struct soap*, fims__QueryGroupsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueryGroupsType
#define soap_read_PointerTofims__QueryGroupsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueryGroupsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueryParametersType
#define SOAP_TYPE_PointerTofims__QueryParametersType (299)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueryParametersType(struct soap*, fims__QueryParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueryParametersType(struct soap*, const char *, int, fims__QueryParametersType *const*, const char *);
SOAP_FMAC3 fims__QueryParametersType ** SOAP_FMAC4 soap_in_PointerTofims__QueryParametersType(struct soap*, const char*, fims__QueryParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueryParametersType(struct soap*, fims__QueryParametersType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueryParametersType
#define soap_write_PointerTofims__QueryParametersType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueryParametersType(soap, data),0) || soap_put_PointerTofims__QueryParametersType(soap, data, "fims:QueryParametersType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryParametersType ** SOAP_FMAC4 soap_get_PointerTofims__QueryParametersType(struct soap*, fims__QueryParametersType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueryParametersType
#define soap_read_PointerTofims__QueryParametersType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueryParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__CustomQueryGroupOperatorType
#define SOAP_TYPE_PointerTofims__CustomQueryGroupOperatorType (297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__CustomQueryGroupOperatorType(struct soap*, fims__CustomQueryGroupOperatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__CustomQueryGroupOperatorType(struct soap*, const char *, int, fims__CustomQueryGroupOperatorType *const*, const char *);
SOAP_FMAC3 fims__CustomQueryGroupOperatorType ** SOAP_FMAC4 soap_in_PointerTofims__CustomQueryGroupOperatorType(struct soap*, const char*, fims__CustomQueryGroupOperatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__CustomQueryGroupOperatorType(struct soap*, fims__CustomQueryGroupOperatorType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__CustomQueryGroupOperatorType
#define soap_write_PointerTofims__CustomQueryGroupOperatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__CustomQueryGroupOperatorType(soap, data),0) || soap_put_PointerTofims__CustomQueryGroupOperatorType(soap, data, "fims:CustomQueryGroupOperatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomQueryGroupOperatorType ** SOAP_FMAC4 soap_get_PointerTofims__CustomQueryGroupOperatorType(struct soap*, fims__CustomQueryGroupOperatorType **, const char*, const char*);

#ifndef soap_read_PointerTofims__CustomQueryGroupOperatorType
#define soap_read_PointerTofims__CustomQueryGroupOperatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__CustomQueryGroupOperatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTobool
#define SOAP_TYPE_PointerTobool (293)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTobool(soap, data),0) || soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__CustomQueryParameterOperatorType
#define SOAP_TYPE_PointerTofims__CustomQueryParameterOperatorType (291)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__CustomQueryParameterOperatorType(struct soap*, fims__CustomQueryParameterOperatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__CustomQueryParameterOperatorType(struct soap*, const char *, int, fims__CustomQueryParameterOperatorType *const*, const char *);
SOAP_FMAC3 fims__CustomQueryParameterOperatorType ** SOAP_FMAC4 soap_in_PointerTofims__CustomQueryParameterOperatorType(struct soap*, const char*, fims__CustomQueryParameterOperatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__CustomQueryParameterOperatorType(struct soap*, fims__CustomQueryParameterOperatorType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__CustomQueryParameterOperatorType
#define soap_write_PointerTofims__CustomQueryParameterOperatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__CustomQueryParameterOperatorType(soap, data),0) || soap_put_PointerTofims__CustomQueryParameterOperatorType(soap, data, "fims:CustomQueryParameterOperatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomQueryParameterOperatorType ** SOAP_FMAC4 soap_get_PointerTofims__CustomQueryParameterOperatorType(struct soap*, fims__CustomQueryParameterOperatorType **, const char*, const char*);

#ifndef soap_read_PointerTofims__CustomQueryParameterOperatorType
#define soap_read_PointerTofims__CustomQueryParameterOperatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__CustomQueryParameterOperatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueryExpressionType
#define SOAP_TYPE_PointerTofims__QueryExpressionType (289)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueryExpressionType(struct soap*, fims__QueryExpressionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueryExpressionType(struct soap*, const char *, int, fims__QueryExpressionType *const*, const char *);
SOAP_FMAC3 fims__QueryExpressionType ** SOAP_FMAC4 soap_in_PointerTofims__QueryExpressionType(struct soap*, const char*, fims__QueryExpressionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueryExpressionType(struct soap*, fims__QueryExpressionType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueryExpressionType
#define soap_write_PointerTofims__QueryExpressionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueryExpressionType(soap, data),0) || soap_put_PointerTofims__QueryExpressionType(soap, data, "fims:QueryExpressionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryExpressionType ** SOAP_FMAC4 soap_get_PointerTofims__QueryExpressionType(struct soap*, fims__QueryExpressionType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueryExpressionType
#define soap_read_PointerTofims__QueryExpressionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueryExpressionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueryGroupType
#define SOAP_TYPE_PointerTofims__QueryGroupType (287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueryGroupType(struct soap*, fims__QueryGroupType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueryGroupType(struct soap*, const char *, int, fims__QueryGroupType *const*, const char *);
SOAP_FMAC3 fims__QueryGroupType ** SOAP_FMAC4 soap_in_PointerTofims__QueryGroupType(struct soap*, const char*, fims__QueryGroupType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueryGroupType(struct soap*, fims__QueryGroupType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueryGroupType
#define soap_write_PointerTofims__QueryGroupType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueryGroupType(soap, data),0) || soap_put_PointerTofims__QueryGroupType(soap, data, "fims:QueryGroupType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryGroupType ** SOAP_FMAC4 soap_get_PointerTofims__QueryGroupType(struct soap*, fims__QueryGroupType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueryGroupType
#define soap_read_PointerTofims__QueryGroupType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueryGroupType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueryParameterType
#define SOAP_TYPE_PointerTofims__QueryParameterType (286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueryParameterType(struct soap*, fims__QueryParameterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueryParameterType(struct soap*, const char *, int, fims__QueryParameterType *const*, const char *);
SOAP_FMAC3 fims__QueryParameterType ** SOAP_FMAC4 soap_in_PointerTofims__QueryParameterType(struct soap*, const char*, fims__QueryParameterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueryParameterType(struct soap*, fims__QueryParameterType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueryParameterType
#define soap_write_PointerTofims__QueryParameterType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueryParameterType(soap, data),0) || soap_put_PointerTofims__QueryParameterType(soap, data, "fims:QueryParameterType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueryParameterType ** SOAP_FMAC4 soap_get_PointerTofims__QueryParameterType(struct soap*, fims__QueryParameterType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueryParameterType
#define soap_read_PointerTofims__QueryParameterType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueryParameterType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__SuperLockTokenType
#define SOAP_TYPE_PointerTofims__SuperLockTokenType (284)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__SuperLockTokenType(struct soap*, fims__SuperLockTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__SuperLockTokenType(struct soap*, const char *, int, fims__SuperLockTokenType *const*, const char *);
SOAP_FMAC3 fims__SuperLockTokenType ** SOAP_FMAC4 soap_in_PointerTofims__SuperLockTokenType(struct soap*, const char*, fims__SuperLockTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__SuperLockTokenType(struct soap*, fims__SuperLockTokenType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__SuperLockTokenType
#define soap_write_PointerTofims__SuperLockTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__SuperLockTokenType(soap, data),0) || soap_put_PointerTofims__SuperLockTokenType(soap, data, "fims:SuperLockTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__SuperLockTokenType ** SOAP_FMAC4 soap_get_PointerTofims__SuperLockTokenType(struct soap*, fims__SuperLockTokenType **, const char*, const char*);

#ifndef soap_read_PointerTofims__SuperLockTokenType
#define soap_read_PointerTofims__SuperLockTokenType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__SuperLockTokenType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__LockTokenType
#define SOAP_TYPE_PointerTofims__LockTokenType (282)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__LockTokenType(struct soap*, fims__LockTokenType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__LockTokenType(struct soap*, const char *, int, fims__LockTokenType *const*, const char *);
SOAP_FMAC3 fims__LockTokenType ** SOAP_FMAC4 soap_in_PointerTofims__LockTokenType(struct soap*, const char*, fims__LockTokenType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__LockTokenType(struct soap*, fims__LockTokenType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__LockTokenType
#define soap_write_PointerTofims__LockTokenType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__LockTokenType(soap, data),0) || soap_put_PointerTofims__LockTokenType(soap, data, "fims:LockTokenType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__LockTokenType ** SOAP_FMAC4 soap_get_PointerTofims__LockTokenType(struct soap*, fims__LockTokenType **, const char*, const char*);

#ifndef soap_read_PointerTofims__LockTokenType
#define soap_read_PointerTofims__LockTokenType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__LockTokenType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__CredentialType
#define SOAP_TYPE_PointerTofims__CredentialType (280)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__CredentialType(struct soap*, fims__CredentialType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__CredentialType(struct soap*, const char *, int, fims__CredentialType *const*, const char *);
SOAP_FMAC3 fims__CredentialType ** SOAP_FMAC4 soap_in_PointerTofims__CredentialType(struct soap*, const char*, fims__CredentialType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__CredentialType(struct soap*, fims__CredentialType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__CredentialType
#define soap_write_PointerTofims__CredentialType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__CredentialType(soap, data),0) || soap_put_PointerTofims__CredentialType(soap, data, "fims:CredentialType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CredentialType ** SOAP_FMAC4 soap_get_PointerTofims__CredentialType(struct soap*, fims__CredentialType **, const char*, const char*);

#ifndef soap_read_PointerTofims__CredentialType
#define soap_read_PointerTofims__CredentialType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__CredentialType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMEssenceLocatorStatusType
#define SOAP_TYPE_PointerTofims__BMEssenceLocatorStatusType (278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMEssenceLocatorStatusType(struct soap*, fims__BMEssenceLocatorStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMEssenceLocatorStatusType(struct soap*, const char *, int, fims__BMEssenceLocatorStatusType *const*, const char *);
SOAP_FMAC3 fims__BMEssenceLocatorStatusType ** SOAP_FMAC4 soap_in_PointerTofims__BMEssenceLocatorStatusType(struct soap*, const char*, fims__BMEssenceLocatorStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMEssenceLocatorStatusType(struct soap*, fims__BMEssenceLocatorStatusType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMEssenceLocatorStatusType
#define soap_write_PointerTofims__BMEssenceLocatorStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMEssenceLocatorStatusType(soap, data),0) || soap_put_PointerTofims__BMEssenceLocatorStatusType(soap, data, "fims:BMEssenceLocatorStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMEssenceLocatorStatusType ** SOAP_FMAC4 soap_get_PointerTofims__BMEssenceLocatorStatusType(struct soap*, fims__BMEssenceLocatorStatusType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMEssenceLocatorStatusType
#define soap_read_PointerTofims__BMEssenceLocatorStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMEssenceLocatorStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMContentStatusType
#define SOAP_TYPE_PointerTofims__BMContentStatusType (276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMContentStatusType(struct soap*, fims__BMContentStatusType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMContentStatusType(struct soap*, const char *, int, fims__BMContentStatusType *const*, const char *);
SOAP_FMAC3 fims__BMContentStatusType ** SOAP_FMAC4 soap_in_PointerTofims__BMContentStatusType(struct soap*, const char*, fims__BMContentStatusType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMContentStatusType(struct soap*, fims__BMContentStatusType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMContentStatusType
#define soap_write_PointerTofims__BMContentStatusType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMContentStatusType(soap, data),0) || soap_put_PointerTofims__BMContentStatusType(soap, data, "fims:BMContentStatusType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentStatusType ** SOAP_FMAC4 soap_get_PointerTofims__BMContentStatusType(struct soap*, fims__BMContentStatusType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMContentStatusType
#define soap_read_PointerTofims__BMContentStatusType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMContentStatusType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMCustomStatusExtensionType
#define SOAP_TYPE_PointerTofims__BMCustomStatusExtensionType (274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMCustomStatusExtensionType(struct soap*, fims__BMCustomStatusExtensionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMCustomStatusExtensionType(struct soap*, const char *, int, fims__BMCustomStatusExtensionType *const*, const char *);
SOAP_FMAC3 fims__BMCustomStatusExtensionType ** SOAP_FMAC4 soap_in_PointerTofims__BMCustomStatusExtensionType(struct soap*, const char*, fims__BMCustomStatusExtensionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMCustomStatusExtensionType(struct soap*, fims__BMCustomStatusExtensionType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMCustomStatusExtensionType
#define soap_write_PointerTofims__BMCustomStatusExtensionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMCustomStatusExtensionType(soap, data),0) || soap_put_PointerTofims__BMCustomStatusExtensionType(soap, data, "fims:BMCustomStatusExtensionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMCustomStatusExtensionType ** SOAP_FMAC4 soap_get_PointerTofims__BMCustomStatusExtensionType(struct soap*, fims__BMCustomStatusExtensionType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMCustomStatusExtensionType
#define soap_read_PointerTofims__BMCustomStatusExtensionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMCustomStatusExtensionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__CustomValueType
#define SOAP_TYPE_PointerTofims__CustomValueType (272)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__CustomValueType(struct soap*, fims__CustomValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__CustomValueType(struct soap*, const char *, int, fims__CustomValueType *const*, const char *);
SOAP_FMAC3 fims__CustomValueType ** SOAP_FMAC4 soap_in_PointerTofims__CustomValueType(struct soap*, const char*, fims__CustomValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__CustomValueType(struct soap*, fims__CustomValueType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__CustomValueType
#define soap_write_PointerTofims__CustomValueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__CustomValueType(soap, data),0) || soap_put_PointerTofims__CustomValueType(soap, data, "fims:CustomValueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__CustomValueType ** SOAP_FMAC4 soap_get_PointerTofims__CustomValueType(struct soap*, fims__CustomValueType **, const char*, const char*);

#ifndef soap_read_PointerTofims__CustomValueType
#define soap_read_PointerTofims__CustomValueType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__CustomValueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ResourceReferenceType
#define SOAP_TYPE_PointerTofims__ResourceReferenceType (270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ResourceReferenceType(struct soap*, fims__ResourceReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ResourceReferenceType(struct soap*, const char *, int, fims__ResourceReferenceType *const*, const char *);
SOAP_FMAC3 fims__ResourceReferenceType ** SOAP_FMAC4 soap_in_PointerTofims__ResourceReferenceType(struct soap*, const char*, fims__ResourceReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ResourceReferenceType(struct soap*, fims__ResourceReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ResourceReferenceType
#define soap_write_PointerTofims__ResourceReferenceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ResourceReferenceType(soap, data),0) || soap_put_PointerTofims__ResourceReferenceType(soap, data, "fims:ResourceReferenceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ResourceReferenceType ** SOAP_FMAC4 soap_get_PointerTofims__ResourceReferenceType(struct soap*, fims__ResourceReferenceType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ResourceReferenceType
#define soap_read_PointerTofims__ResourceReferenceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ResourceReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__DescriptionType
#define SOAP_TYPE_PointerTofims__DescriptionType (268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__DescriptionType(struct soap*, fims__DescriptionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__DescriptionType(struct soap*, const char *, int, fims__DescriptionType *const*, const char *);
SOAP_FMAC3 fims__DescriptionType ** SOAP_FMAC4 soap_in_PointerTofims__DescriptionType(struct soap*, const char*, fims__DescriptionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__DescriptionType(struct soap*, fims__DescriptionType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__DescriptionType
#define soap_write_PointerTofims__DescriptionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__DescriptionType(soap, data),0) || soap_put_PointerTofims__DescriptionType(soap, data, "fims:DescriptionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__DescriptionType ** SOAP_FMAC4 soap_get_PointerTofims__DescriptionType(struct soap*, fims__DescriptionType **, const char*, const char*);

#ifndef soap_read_PointerTofims__DescriptionType
#define soap_read_PointerTofims__DescriptionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__DescriptionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMEssenceLocatorType
#define SOAP_TYPE_PointerTofims__BMEssenceLocatorType (266)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMEssenceLocatorType(struct soap*, fims__BMEssenceLocatorType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMEssenceLocatorType(struct soap*, const char *, int, fims__BMEssenceLocatorType *const*, const char *);
SOAP_FMAC3 fims__BMEssenceLocatorType ** SOAP_FMAC4 soap_in_PointerTofims__BMEssenceLocatorType(struct soap*, const char*, fims__BMEssenceLocatorType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMEssenceLocatorType(struct soap*, fims__BMEssenceLocatorType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMEssenceLocatorType
#define soap_write_PointerTofims__BMEssenceLocatorType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMEssenceLocatorType(soap, data),0) || soap_put_PointerTofims__BMEssenceLocatorType(soap, data, "fims:BMEssenceLocatorType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMEssenceLocatorType ** SOAP_FMAC4 soap_get_PointerTofims__BMEssenceLocatorType(struct soap*, fims__BMEssenceLocatorType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMEssenceLocatorType
#define soap_read_PointerTofims__BMEssenceLocatorType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMEssenceLocatorType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMContentFormatType
#define SOAP_TYPE_PointerTofims__BMContentFormatType (264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMContentFormatType(struct soap*, fims__BMContentFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMContentFormatType(struct soap*, const char *, int, fims__BMContentFormatType *const*, const char *);
SOAP_FMAC3 fims__BMContentFormatType ** SOAP_FMAC4 soap_in_PointerTofims__BMContentFormatType(struct soap*, const char*, fims__BMContentFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMContentFormatType(struct soap*, fims__BMContentFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMContentFormatType
#define soap_write_PointerTofims__BMContentFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMContentFormatType(soap, data),0) || soap_put_PointerTofims__BMContentFormatType(soap, data, "fims:BMContentFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentFormatType ** SOAP_FMAC4 soap_get_PointerTofims__BMContentFormatType(struct soap*, fims__BMContentFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMContentFormatType
#define soap_read_PointerTofims__BMContentFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMContentFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMContentType
#define SOAP_TYPE_PointerTofims__BMContentType (262)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMContentType(struct soap*, fims__BMContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMContentType(struct soap*, const char *, int, fims__BMContentType *const*, const char *);
SOAP_FMAC3 fims__BMContentType ** SOAP_FMAC4 soap_in_PointerTofims__BMContentType(struct soap*, const char*, fims__BMContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMContentType(struct soap*, fims__BMContentType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMContentType
#define soap_write_PointerTofims__BMContentType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMContentType(soap, data),0) || soap_put_PointerTofims__BMContentType(soap, data, "fims:BMContentType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMContentType ** SOAP_FMAC4 soap_get_PointerTofims__BMContentType(struct soap*, fims__BMContentType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMContentType
#define soap_read_PointerTofims__BMContentType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMContentType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__DataFormatType
#define SOAP_TYPE_PointerTofims__DataFormatType (259)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__DataFormatType(struct soap*, fims__DataFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__DataFormatType(struct soap*, const char *, int, fims__DataFormatType *const*, const char *);
SOAP_FMAC3 fims__DataFormatType ** SOAP_FMAC4 soap_in_PointerTofims__DataFormatType(struct soap*, const char*, fims__DataFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__DataFormatType(struct soap*, fims__DataFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__DataFormatType
#define soap_write_PointerTofims__DataFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__DataFormatType(soap, data),0) || soap_put_PointerTofims__DataFormatType(soap, data, "fims:DataFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__DataFormatType ** SOAP_FMAC4 soap_get_PointerTofims__DataFormatType(struct soap*, fims__DataFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__DataFormatType
#define soap_read_PointerTofims__DataFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__DataFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ProfileType
#define SOAP_TYPE_PointerTofims__ProfileType (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ProfileType(struct soap*, fims__ProfileType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ProfileType(struct soap*, const char *, int, fims__ProfileType *const*, const char *);
SOAP_FMAC3 fims__ProfileType ** SOAP_FMAC4 soap_in_PointerTofims__ProfileType(struct soap*, const char*, fims__ProfileType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ProfileType(struct soap*, fims__ProfileType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ProfileType
#define soap_write_PointerTofims__ProfileType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ProfileType(soap, data),0) || soap_put_PointerTofims__ProfileType(soap, data, "fims:ProfileType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ProfileType ** SOAP_FMAC4 soap_get_PointerTofims__ProfileType(struct soap*, fims__ProfileType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ProfileType
#define soap_read_PointerTofims__ProfileType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ProfileType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ResourceType
#define SOAP_TYPE_PointerTofims__ResourceType (249)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ResourceType(struct soap*, fims__ResourceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ResourceType(struct soap*, const char *, int, fims__ResourceType *const*, const char *);
SOAP_FMAC3 fims__ResourceType ** SOAP_FMAC4 soap_in_PointerTofims__ResourceType(struct soap*, const char*, fims__ResourceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ResourceType(struct soap*, fims__ResourceType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ResourceType
#define soap_write_PointerTofims__ResourceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ResourceType(soap, data),0) || soap_put_PointerTofims__ResourceType(soap, data, "fims:ResourceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ResourceType ** SOAP_FMAC4 soap_get_PointerTofims__ResourceType(struct soap*, fims__ResourceType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ResourceType
#define soap_read_PointerTofims__ResourceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ResourceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__InnerFaultType
#define SOAP_TYPE_PointerTofims__InnerFaultType (247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__InnerFaultType(struct soap*, fims__InnerFaultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__InnerFaultType(struct soap*, const char *, int, fims__InnerFaultType *const*, const char *);
SOAP_FMAC3 fims__InnerFaultType ** SOAP_FMAC4 soap_in_PointerTofims__InnerFaultType(struct soap*, const char*, fims__InnerFaultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__InnerFaultType(struct soap*, fims__InnerFaultType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__InnerFaultType
#define soap_write_PointerTofims__InnerFaultType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__InnerFaultType(soap, data),0) || soap_put_PointerTofims__InnerFaultType(soap, data, "fims:InnerFaultType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__InnerFaultType ** SOAP_FMAC4 soap_get_PointerTofims__InnerFaultType(struct soap*, fims__InnerFaultType **, const char*, const char*);

#ifndef soap_read_PointerTofims__InnerFaultType
#define soap_read_PointerTofims__InnerFaultType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__InnerFaultType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTotime
#define SOAP_TYPE_PointerTotime (245)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap*, time_t *const*, const char*, const char*);

#ifndef soap_write_PointerTotime
#define soap_write_PointerTotime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTotime(soap, data),0) || soap_put_PointerTotime(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap*, time_t **, const char*, const char*);

#ifndef soap_read_PointerTotime
#define soap_read_PointerTotime(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTotime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ServiceType
#define SOAP_TYPE_PointerTofims__ServiceType (243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ServiceType(struct soap*, fims__ServiceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ServiceType(struct soap*, const char *, int, fims__ServiceType *const*, const char *);
SOAP_FMAC3 fims__ServiceType ** SOAP_FMAC4 soap_in_PointerTofims__ServiceType(struct soap*, const char*, fims__ServiceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ServiceType(struct soap*, fims__ServiceType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ServiceType
#define soap_write_PointerTofims__ServiceType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ServiceType(soap, data),0) || soap_put_PointerTofims__ServiceType(soap, data, "fims:ServiceType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ServiceType ** SOAP_FMAC4 soap_get_PointerTofims__ServiceType(struct soap*, fims__ServiceType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ServiceType
#define soap_read_PointerTofims__ServiceType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ServiceType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__nonNegativeInteger
#define SOAP_TYPE_PointerToxsd__nonNegativeInteger (241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__nonNegativeInteger(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__nonNegativeInteger(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__nonNegativeInteger(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__nonNegativeInteger(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__nonNegativeInteger
#define soap_write_PointerToxsd__nonNegativeInteger(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__nonNegativeInteger(soap, data),0) || soap_put_PointerToxsd__nonNegativeInteger(soap, data, "xsd:nonNegativeInteger", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__nonNegativeInteger(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__nonNegativeInteger
#define soap_read_PointerToxsd__nonNegativeInteger(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__nonNegativeInteger(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__JobsType
#define SOAP_TYPE_PointerTofims__JobsType (240)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__JobsType(struct soap*, fims__JobsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__JobsType(struct soap*, const char *, int, fims__JobsType *const*, const char *);
SOAP_FMAC3 fims__JobsType ** SOAP_FMAC4 soap_in_PointerTofims__JobsType(struct soap*, const char*, fims__JobsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__JobsType(struct soap*, fims__JobsType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__JobsType
#define soap_write_PointerTofims__JobsType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__JobsType(soap, data),0) || soap_put_PointerTofims__JobsType(soap, data, "fims:JobsType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__JobsType ** SOAP_FMAC4 soap_get_PointerTofims__JobsType(struct soap*, fims__JobsType **, const char*, const char*);

#ifndef soap_read_PointerTofims__JobsType
#define soap_read_PointerTofims__JobsType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__JobsType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__QueueType
#define SOAP_TYPE_PointerTofims__QueueType (239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__QueueType(struct soap*, fims__QueueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__QueueType(struct soap*, const char *, int, fims__QueueType *const*, const char *);
SOAP_FMAC3 fims__QueueType ** SOAP_FMAC4 soap_in_PointerTofims__QueueType(struct soap*, const char*, fims__QueueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__QueueType(struct soap*, fims__QueueType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__QueueType
#define soap_write_PointerTofims__QueueType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__QueueType(soap, data),0) || soap_put_PointerTofims__QueueType(soap, data, "fims:QueueType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__QueueType ** SOAP_FMAC4 soap_get_PointerTofims__QueueType(struct soap*, fims__QueueType **, const char*, const char*);

#ifndef soap_read_PointerTofims__QueueType
#define soap_read_PointerTofims__QueueType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__QueueType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__JobType
#define SOAP_TYPE_PointerTofims__JobType (238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__JobType(struct soap*, fims__JobType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__JobType(struct soap*, const char *, int, fims__JobType *const*, const char *);
SOAP_FMAC3 fims__JobType ** SOAP_FMAC4 soap_in_PointerTofims__JobType(struct soap*, const char*, fims__JobType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__JobType(struct soap*, fims__JobType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__JobType
#define soap_write_PointerTofims__JobType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__JobType(soap, data),0) || soap_put_PointerTofims__JobType(soap, data, "fims:JobType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__JobType ** SOAP_FMAC4 soap_get_PointerTofims__JobType(struct soap*, fims__JobType **, const char*, const char*);

#ifndef soap_read_PointerTofims__JobType
#define soap_read_PointerTofims__JobType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__JobType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__PriorityType
#define SOAP_TYPE_PointerTofims__PriorityType (237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__PriorityType(struct soap*, enum fims__PriorityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__PriorityType(struct soap*, const char *, int, enum fims__PriorityType *const*, const char *);
SOAP_FMAC3 enum fims__PriorityType ** SOAP_FMAC4 soap_in_PointerTofims__PriorityType(struct soap*, const char*, enum fims__PriorityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__PriorityType(struct soap*, enum fims__PriorityType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__PriorityType
#define soap_write_PointerTofims__PriorityType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__PriorityType(soap, data),0) || soap_put_PointerTofims__PriorityType(soap, data, "fims:PriorityType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum fims__PriorityType ** SOAP_FMAC4 soap_get_PointerTofims__PriorityType(struct soap*, enum fims__PriorityType **, const char*, const char*);

#ifndef soap_read_PointerTofims__PriorityType
#define soap_read_PointerTofims__PriorityType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__PriorityType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__HashFunctionType
#define SOAP_TYPE_PointerTofims__HashFunctionType (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__HashFunctionType(struct soap*, fims__HashFunctionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__HashFunctionType(struct soap*, const char *, int, fims__HashFunctionType *const*, const char *);
SOAP_FMAC3 fims__HashFunctionType ** SOAP_FMAC4 soap_in_PointerTofims__HashFunctionType(struct soap*, const char*, fims__HashFunctionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__HashFunctionType(struct soap*, fims__HashFunctionType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__HashFunctionType
#define soap_write_PointerTofims__HashFunctionType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__HashFunctionType(soap, data),0) || soap_put_PointerTofims__HashFunctionType(soap, data, "fims:HashFunctionType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__HashFunctionType ** SOAP_FMAC4 soap_get_PointerTofims__HashFunctionType(struct soap*, fims__HashFunctionType **, const char*, const char*);

#ifndef soap_read_PointerTofims__HashFunctionType
#define soap_read_PointerTofims__HashFunctionType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__HashFunctionType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ContainerFormatType
#define SOAP_TYPE_PointerTofims__ContainerFormatType (235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ContainerFormatType(struct soap*, fims__ContainerFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ContainerFormatType(struct soap*, const char *, int, fims__ContainerFormatType *const*, const char *);
SOAP_FMAC3 fims__ContainerFormatType ** SOAP_FMAC4 soap_in_PointerTofims__ContainerFormatType(struct soap*, const char*, fims__ContainerFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ContainerFormatType(struct soap*, fims__ContainerFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ContainerFormatType
#define soap_write_PointerTofims__ContainerFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ContainerFormatType(soap, data),0) || soap_put_PointerTofims__ContainerFormatType(soap, data, "fims:ContainerFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ContainerFormatType ** SOAP_FMAC4 soap_get_PointerTofims__ContainerFormatType(struct soap*, fims__ContainerFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__ContainerFormatType
#define soap_read_PointerTofims__ContainerFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ContainerFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__AudioFormatType
#define SOAP_TYPE_PointerTofims__AudioFormatType (234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__AudioFormatType(struct soap*, fims__AudioFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__AudioFormatType(struct soap*, const char *, int, fims__AudioFormatType *const*, const char *);
SOAP_FMAC3 fims__AudioFormatType ** SOAP_FMAC4 soap_in_PointerTofims__AudioFormatType(struct soap*, const char*, fims__AudioFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__AudioFormatType(struct soap*, fims__AudioFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__AudioFormatType
#define soap_write_PointerTofims__AudioFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__AudioFormatType(soap, data),0) || soap_put_PointerTofims__AudioFormatType(soap, data, "fims:AudioFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__AudioFormatType ** SOAP_FMAC4 soap_get_PointerTofims__AudioFormatType(struct soap*, fims__AudioFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__AudioFormatType
#define soap_read_PointerTofims__AudioFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__AudioFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__VideoFormatType
#define SOAP_TYPE_PointerTofims__VideoFormatType (233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__VideoFormatType(struct soap*, fims__VideoFormatType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__VideoFormatType(struct soap*, const char *, int, fims__VideoFormatType *const*, const char *);
SOAP_FMAC3 fims__VideoFormatType ** SOAP_FMAC4 soap_in_PointerTofims__VideoFormatType(struct soap*, const char*, fims__VideoFormatType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__VideoFormatType(struct soap*, fims__VideoFormatType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__VideoFormatType
#define soap_write_PointerTofims__VideoFormatType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__VideoFormatType(soap, data),0) || soap_put_PointerTofims__VideoFormatType(soap, data, "fims:VideoFormatType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__VideoFormatType ** SOAP_FMAC4 soap_get_PointerTofims__VideoFormatType(struct soap*, fims__VideoFormatType **, const char*, const char*);

#ifndef soap_read_PointerTofims__VideoFormatType
#define soap_read_PointerTofims__VideoFormatType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__VideoFormatType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__language
#define SOAP_TYPE_PointerToxsd__language (232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__language(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__language(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__language(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__language(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__language
#define soap_write_PointerToxsd__language(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__language(soap, data),0) || soap_put_PointerToxsd__language(soap, data, "xsd:language", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__language(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__language
#define soap_read_PointerToxsd__language(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__language(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__UID
#define SOAP_TYPE_PointerTofims__UID (231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__UID(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__UID(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTofims__UID(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__UID(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__UID
#define soap_write_PointerTofims__UID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__UID(soap, data),0) || soap_put_PointerTofims__UID(soap, data, "fims:UID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTofims__UID(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTofims__UID
#define soap_read_PointerTofims__UID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__UID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__integer
#define SOAP_TYPE_PointerToxsd__integer (230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__integer(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__integer(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__integer(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__integer(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__integer
#define soap_write_PointerToxsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__integer(soap, data),0) || soap_put_PointerToxsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__integer(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__integer
#define soap_read_PointerToxsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ExtensionAttributes
#define SOAP_TYPE_PointerTofims__ExtensionAttributes (229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ExtensionAttributes(struct soap*, fims__ExtensionAttributes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ExtensionAttributes(struct soap*, const char *, int, fims__ExtensionAttributes *const*, const char *);
SOAP_FMAC3 fims__ExtensionAttributes ** SOAP_FMAC4 soap_in_PointerTofims__ExtensionAttributes(struct soap*, const char*, fims__ExtensionAttributes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ExtensionAttributes(struct soap*, fims__ExtensionAttributes *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ExtensionAttributes
#define soap_write_PointerTofims__ExtensionAttributes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ExtensionAttributes(soap, data),0) || soap_put_PointerTofims__ExtensionAttributes(soap, data, "fims:ExtensionAttributes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ExtensionAttributes ** SOAP_FMAC4 soap_get_PointerTofims__ExtensionAttributes(struct soap*, fims__ExtensionAttributes **, const char*, const char*);

#ifndef soap_read_PointerTofims__ExtensionAttributes
#define soap_read_PointerTofims__ExtensionAttributes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ExtensionAttributes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__ExtensionGroup
#define SOAP_TYPE_PointerTofims__ExtensionGroup (228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__ExtensionGroup(struct soap*, fims__ExtensionGroup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__ExtensionGroup(struct soap*, const char *, int, fims__ExtensionGroup *const*, const char *);
SOAP_FMAC3 fims__ExtensionGroup ** SOAP_FMAC4 soap_in_PointerTofims__ExtensionGroup(struct soap*, const char*, fims__ExtensionGroup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__ExtensionGroup(struct soap*, fims__ExtensionGroup *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__ExtensionGroup
#define soap_write_PointerTofims__ExtensionGroup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__ExtensionGroup(soap, data),0) || soap_put_PointerTofims__ExtensionGroup(soap, data, "fims:ExtensionGroup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__ExtensionGroup ** SOAP_FMAC4 soap_get_PointerTofims__ExtensionGroup(struct soap*, fims__ExtensionGroup **, const char*, const char*);

#ifndef soap_read_PointerTofims__ExtensionGroup
#define soap_read_PointerTofims__ExtensionGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__ExtensionGroup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__anyURI
#define soap_write_PointerToxsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__anyURI(soap, data),0) || soap_put_PointerToxsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerToxsd__anyURI
#define soap_read_PointerToxsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__RevisionIDType
#define SOAP_TYPE_PointerTofims__RevisionIDType (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__RevisionIDType(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__RevisionIDType(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTofims__RevisionIDType(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__RevisionIDType(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__RevisionIDType
#define soap_write_PointerTofims__RevisionIDType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__RevisionIDType(soap, data),0) || soap_put_PointerTofims__RevisionIDType(soap, data, "fims:RevisionIDType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTofims__RevisionIDType(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTofims__RevisionIDType
#define soap_read_PointerTofims__RevisionIDType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__RevisionIDType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToedlprovider__MapItemType
#define SOAP_TYPE_PointerToedlprovider__MapItemType (223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToedlprovider__MapItemType(struct soap*, edlprovider__MapItemType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToedlprovider__MapItemType(struct soap*, const char *, int, edlprovider__MapItemType *const*, const char *);
SOAP_FMAC3 edlprovider__MapItemType ** SOAP_FMAC4 soap_in_PointerToedlprovider__MapItemType(struct soap*, const char*, edlprovider__MapItemType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToedlprovider__MapItemType(struct soap*, edlprovider__MapItemType *const*, const char*, const char*);

#ifndef soap_write_PointerToedlprovider__MapItemType
#define soap_write_PointerToedlprovider__MapItemType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToedlprovider__MapItemType(soap, data),0) || soap_put_PointerToedlprovider__MapItemType(soap, data, "edlprovider:MapItemType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__MapItemType ** SOAP_FMAC4 soap_get_PointerToedlprovider__MapItemType(struct soap*, edlprovider__MapItemType **, const char*, const char*);

#ifndef soap_read_PointerToedlprovider__MapItemType
#define soap_read_PointerToedlprovider__MapItemType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToedlprovider__MapItemType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTo_edlprovider__Map
#define SOAP_TYPE_PointerTo_edlprovider__Map (222)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_edlprovider__Map(struct soap*, _edlprovider__Map *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_edlprovider__Map(struct soap*, const char *, int, _edlprovider__Map *const*, const char *);
SOAP_FMAC3 _edlprovider__Map ** SOAP_FMAC4 soap_in_PointerTo_edlprovider__Map(struct soap*, const char*, _edlprovider__Map **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_edlprovider__Map(struct soap*, _edlprovider__Map *const*, const char*, const char*);

#ifndef soap_write_PointerTo_edlprovider__Map
#define soap_write_PointerTo_edlprovider__Map(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTo_edlprovider__Map(soap, data),0) || soap_put_PointerTo_edlprovider__Map(soap, data, "edlprovider:Map", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _edlprovider__Map ** SOAP_FMAC4 soap_get_PointerTo_edlprovider__Map(struct soap*, _edlprovider__Map **, const char*, const char*);

#ifndef soap_read_PointerTo_edlprovider__Map
#define soap_read_PointerTo_edlprovider__Map(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_edlprovider__Map(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__base64Binary
#define SOAP_TYPE_PointerToxsd__base64Binary (221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__base64Binary
#define soap_write_PointerToxsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToxsd__base64Binary(soap, data),0) || soap_put_PointerToxsd__base64Binary(soap, data, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);

#ifndef soap_read_PointerToxsd__base64Binary
#define soap_read_PointerToxsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__wstring
#define SOAP_TYPE_PointerTostd__wstring (220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__wstring
#define soap_write_PointerTostd__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__wstring(soap, data),0) || soap_put_PointerTostd__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTostd__wstring
#define soap_read_PointerTostd__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToedlprovider__ArrayOfClips
#define SOAP_TYPE_PointerToedlprovider__ArrayOfClips (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToedlprovider__ArrayOfClips(struct soap*, edlprovider__ArrayOfClips *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToedlprovider__ArrayOfClips(struct soap*, const char *, int, edlprovider__ArrayOfClips *const*, const char *);
SOAP_FMAC3 edlprovider__ArrayOfClips ** SOAP_FMAC4 soap_in_PointerToedlprovider__ArrayOfClips(struct soap*, const char*, edlprovider__ArrayOfClips **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToedlprovider__ArrayOfClips(struct soap*, edlprovider__ArrayOfClips *const*, const char*, const char*);

#ifndef soap_write_PointerToedlprovider__ArrayOfClips
#define soap_write_PointerToedlprovider__ArrayOfClips(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToedlprovider__ArrayOfClips(soap, data),0) || soap_put_PointerToedlprovider__ArrayOfClips(soap, data, "edlprovider:ArrayOfClips", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__ArrayOfClips ** SOAP_FMAC4 soap_get_PointerToedlprovider__ArrayOfClips(struct soap*, edlprovider__ArrayOfClips **, const char*, const char*);

#ifndef soap_read_PointerToedlprovider__ArrayOfClips
#define soap_read_PointerToedlprovider__ArrayOfClips(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToedlprovider__ArrayOfClips(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofims__BMObjectType
#define SOAP_TYPE_PointerTofims__BMObjectType (218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofims__BMObjectType(struct soap*, fims__BMObjectType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofims__BMObjectType(struct soap*, const char *, int, fims__BMObjectType *const*, const char *);
SOAP_FMAC3 fims__BMObjectType ** SOAP_FMAC4 soap_in_PointerTofims__BMObjectType(struct soap*, const char*, fims__BMObjectType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofims__BMObjectType(struct soap*, fims__BMObjectType *const*, const char*, const char*);

#ifndef soap_write_PointerTofims__BMObjectType
#define soap_write_PointerTofims__BMObjectType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofims__BMObjectType(soap, data),0) || soap_put_PointerTofims__BMObjectType(soap, data, "fims:BMObjectType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fims__BMObjectType ** SOAP_FMAC4 soap_get_PointerTofims__BMObjectType(struct soap*, fims__BMObjectType **, const char*, const char*);

#ifndef soap_read_PointerTofims__BMObjectType
#define soap_read_PointerTofims__BMObjectType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofims__BMObjectType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofimstime__TimeType
#define SOAP_TYPE_PointerTofimstime__TimeType (217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofimstime__TimeType(struct soap*, fimstime__TimeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofimstime__TimeType(struct soap*, const char *, int, fimstime__TimeType *const*, const char *);
SOAP_FMAC3 fimstime__TimeType ** SOAP_FMAC4 soap_in_PointerTofimstime__TimeType(struct soap*, const char*, fimstime__TimeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofimstime__TimeType(struct soap*, fimstime__TimeType *const*, const char*, const char*);

#ifndef soap_write_PointerTofimstime__TimeType
#define soap_write_PointerTofimstime__TimeType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofimstime__TimeType(soap, data),0) || soap_put_PointerTofimstime__TimeType(soap, data, "fimstime:TimeType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 fimstime__TimeType ** SOAP_FMAC4 soap_get_PointerTofimstime__TimeType(struct soap*, fimstime__TimeType **, const char*, const char*);

#ifndef soap_read_PointerTofimstime__TimeType
#define soap_read_PointerTofimstime__TimeType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofimstime__TimeType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToedlprovider__ClipType
#define SOAP_TYPE_PointerToedlprovider__ClipType (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToedlprovider__ClipType(struct soap*, edlprovider__ClipType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToedlprovider__ClipType(struct soap*, const char *, int, edlprovider__ClipType *const*, const char *);
SOAP_FMAC3 edlprovider__ClipType ** SOAP_FMAC4 soap_in_PointerToedlprovider__ClipType(struct soap*, const char*, edlprovider__ClipType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToedlprovider__ClipType(struct soap*, edlprovider__ClipType *const*, const char*, const char*);

#ifndef soap_write_PointerToedlprovider__ClipType
#define soap_write_PointerToedlprovider__ClipType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToedlprovider__ClipType(soap, data),0) || soap_put_PointerToedlprovider__ClipType(soap, data, "edlprovider:ClipType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 edlprovider__ClipType ** SOAP_FMAC4 soap_get_PointerToedlprovider__ClipType(struct soap*, edlprovider__ClipType **, const char*, const char*);

#ifndef soap_read_PointerToedlprovider__ClipType
#define soap_read_PointerToedlprovider__ClipType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToedlprovider__ClipType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data),0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType (449)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap*, std::vector<fims__AncillaryDataFormatType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap*, const std::vector<fims__AncillaryDataFormatType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap*, const char*, int, const std::vector<fims__AncillaryDataFormatType * >*, const char*);
SOAP_FMAC3 std::vector<fims__AncillaryDataFormatType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap*, const char*, std::vector<fims__AncillaryDataFormatType * >*, const char*);
SOAP_FMAC1 std::vector<fims__AncillaryDataFormatType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__AncillaryDataFormatType * > * soap_new_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap *soap, std::vector<fims__AncillaryDataFormatType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__AncillaryDataFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__CaptioningFormatType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__CaptioningFormatType (447)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap*, std::vector<fims__CaptioningFormatType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap*, const std::vector<fims__CaptioningFormatType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap*, const char*, int, const std::vector<fims__CaptioningFormatType * >*, const char*);
SOAP_FMAC3 std::vector<fims__CaptioningFormatType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap*, const char*, std::vector<fims__CaptioningFormatType * >*, const char*);
SOAP_FMAC1 std::vector<fims__CaptioningFormatType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__CaptioningFormatType * > * soap_new_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__CaptioningFormatType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap *soap, std::vector<fims__CaptioningFormatType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__CaptioningFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMTrackType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMTrackType (438)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap*, std::vector<fims__BMTrackType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap*, const std::vector<fims__BMTrackType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap*, const char*, int, const std::vector<fims__BMTrackType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMTrackType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap*, const char*, std::vector<fims__BMTrackType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMTrackType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMTrackType * > * soap_new_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMTrackType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap *soap, std::vector<fims__BMTrackType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMTrackType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__TechnicalAttributeType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__TechnicalAttributeType (420)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap*, std::vector<fims__TechnicalAttributeType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap*, const std::vector<fims__TechnicalAttributeType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap*, const char*, int, const std::vector<fims__TechnicalAttributeType * >*, const char*);
SOAP_FMAC3 std::vector<fims__TechnicalAttributeType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap*, const char*, std::vector<fims__TechnicalAttributeType * >*, const char*);
SOAP_FMAC1 std::vector<fims__TechnicalAttributeType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__TechnicalAttributeType * > * soap_new_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap *soap, std::vector<fims__TechnicalAttributeType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__TechnicalAttributeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOffims__UID
#define SOAP_TYPE_std__vectorTemplateOffims__UID (409)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOffims__UID(struct soap*, std::vector<std::wstring >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOffims__UID(struct soap*, const std::vector<std::wstring >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOffims__UID(struct soap*, const char*, int, const std::vector<std::wstring >*, const char*);
SOAP_FMAC3 std::vector<std::wstring >* SOAP_FMAC4 soap_in_std__vectorTemplateOffims__UID(struct soap*, const char*, std::vector<std::wstring >*, const char*);
SOAP_FMAC1 std::vector<std::wstring > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOffims__UID(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::wstring > * soap_new_std__vectorTemplateOffims__UID(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOffims__UID(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOffims__UID(struct soap *soap, std::vector<std::wstring >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOffims__UID(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__anyURI
#define SOAP_TYPE_std__vectorTemplateOfxsd__anyURI (396)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__anyURI(struct soap*, std::vector<std::wstring >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__anyURI(struct soap*, const std::vector<std::wstring >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, int, const std::vector<std::wstring >*, const char*);
SOAP_FMAC3 std::vector<std::wstring >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__anyURI(struct soap*, const char*, std::vector<std::wstring >*, const char*);
SOAP_FMAC1 std::vector<std::wstring > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__anyURI(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::wstring > * soap_new_std__vectorTemplateOfxsd__anyURI(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__anyURI(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__anyURI(struct soap *soap, std::vector<std::wstring >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__anyURI(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__detailsType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__detailsType (395)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap*, std::vector<fimsdescription__detailsType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap*, const std::vector<fimsdescription__detailsType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap*, const char*, int, const std::vector<fimsdescription__detailsType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__detailsType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap*, const char*, std::vector<fimsdescription__detailsType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__detailsType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__detailsType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__detailsType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap *soap, std::vector<fimsdescription__detailsType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__detailsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_fimsdescription__entityType_role
#define SOAP_TYPE_std__vectorTemplateOf_fimsdescription__entityType_role (392)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, std::vector<_fimsdescription__entityType_role >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, const std::vector<_fimsdescription__entityType_role >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, const char*, int, const std::vector<_fimsdescription__entityType_role >*, const char*);
SOAP_FMAC3 std::vector<_fimsdescription__entityType_role >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, const char*, std::vector<_fimsdescription__entityType_role >*, const char*);
SOAP_FMAC1 std::vector<_fimsdescription__entityType_role > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_fimsdescription__entityType_role > * soap_new_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_fimsdescription__entityType_role(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap *soap, std::vector<_fimsdescription__entityType_role >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_fimsdescription__entityType_role(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType (390)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap*, std::vector<fimsdescription__organisationDetailsType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap*, const std::vector<fimsdescription__organisationDetailsType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap*, const char*, int, const std::vector<fimsdescription__organisationDetailsType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__organisationDetailsType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap*, const char*, std::vector<fimsdescription__organisationDetailsType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__organisationDetailsType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__organisationDetailsType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap *soap, std::vector<fimsdescription__organisationDetailsType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__organisationDetailsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType (378)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap*, std::vector<fimsdescription__contactDetailsType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap*, const std::vector<fimsdescription__contactDetailsType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap*, const char*, int, const std::vector<fimsdescription__contactDetailsType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__contactDetailsType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap*, const char*, std::vector<fimsdescription__contactDetailsType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__contactDetailsType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__contactDetailsType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap *soap, std::vector<fimsdescription__contactDetailsType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__contactDetailsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_fimsdescription__typeType_targetAudience
#define SOAP_TYPE_std__vectorTemplateOf_fimsdescription__typeType_targetAudience (367)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, std::vector<_fimsdescription__typeType_targetAudience >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, const std::vector<_fimsdescription__typeType_targetAudience >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, const char*, int, const std::vector<_fimsdescription__typeType_targetAudience >*, const char*);
SOAP_FMAC3 std::vector<_fimsdescription__typeType_targetAudience >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, const char*, std::vector<_fimsdescription__typeType_targetAudience >*, const char*);
SOAP_FMAC1 std::vector<_fimsdescription__typeType_targetAudience > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_fimsdescription__typeType_targetAudience > * soap_new_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap *soap, std::vector<_fimsdescription__typeType_targetAudience >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_fimsdescription__typeType_targetAudience(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_fimsdescription__typeType_objectType
#define SOAP_TYPE_std__vectorTemplateOf_fimsdescription__typeType_objectType (364)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, std::vector<_fimsdescription__typeType_objectType >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, const std::vector<_fimsdescription__typeType_objectType >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, const char*, int, const std::vector<_fimsdescription__typeType_objectType >*, const char*);
SOAP_FMAC3 std::vector<_fimsdescription__typeType_objectType >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, const char*, std::vector<_fimsdescription__typeType_objectType >*, const char*);
SOAP_FMAC1 std::vector<_fimsdescription__typeType_objectType > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_fimsdescription__typeType_objectType > * soap_new_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_fimsdescription__typeType_objectType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap *soap, std::vector<_fimsdescription__typeType_objectType >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_fimsdescription__typeType_objectType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_fimsdescription__typeType_genre
#define SOAP_TYPE_std__vectorTemplateOf_fimsdescription__typeType_genre (361)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, std::vector<_fimsdescription__typeType_genre >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, const std::vector<_fimsdescription__typeType_genre >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, const char*, int, const std::vector<_fimsdescription__typeType_genre >*, const char*);
SOAP_FMAC3 std::vector<_fimsdescription__typeType_genre >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, const char*, std::vector<_fimsdescription__typeType_genre >*, const char*);
SOAP_FMAC1 std::vector<_fimsdescription__typeType_genre > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_fimsdescription__typeType_genre > * soap_new_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_fimsdescription__typeType_genre(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap *soap, std::vector<_fimsdescription__typeType_genre >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_fimsdescription__typeType_genre(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__partType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__partType (358)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap*, std::vector<fimsdescription__partType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap*, const std::vector<fimsdescription__partType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap*, const char*, int, const std::vector<fimsdescription__partType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__partType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap*, const char*, std::vector<fimsdescription__partType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__partType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__partType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__partType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap *soap, std::vector<fimsdescription__partType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__partType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__rightsType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__rightsType (356)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap*, std::vector<fimsdescription__rightsType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap*, const std::vector<fimsdescription__rightsType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap*, const char*, int, const std::vector<fimsdescription__rightsType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__rightsType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap*, const char*, std::vector<fimsdescription__rightsType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__rightsType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__rightsType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__rightsType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap *soap, std::vector<fimsdescription__rightsType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__rightsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__coverageType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__coverageType (354)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap*, std::vector<fimsdescription__coverageType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap*, const std::vector<fimsdescription__coverageType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap*, const char*, int, const std::vector<fimsdescription__coverageType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__coverageType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap*, const char*, std::vector<fimsdescription__coverageType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__coverageType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__coverageType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__coverageType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap *soap, std::vector<fimsdescription__coverageType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__coverageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__relationType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__relationType (352)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap*, std::vector<fimsdescription__relationType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap*, const std::vector<fimsdescription__relationType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap*, const char*, int, const std::vector<fimsdescription__relationType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__relationType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap*, const char*, std::vector<fimsdescription__relationType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__relationType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__relationType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__relationType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap *soap, std::vector<fimsdescription__relationType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__relationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__languageType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__languageType (350)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap*, std::vector<fimsdescription__languageType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap*, const std::vector<fimsdescription__languageType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap*, const char*, int, const std::vector<fimsdescription__languageType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__languageType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap*, const char*, std::vector<fimsdescription__languageType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__languageType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__languageType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__languageType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap *soap, std::vector<fimsdescription__languageType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__languageType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__identifierType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__identifierType (348)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap*, std::vector<fimsdescription__identifierType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap*, const std::vector<fimsdescription__identifierType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap*, const char*, int, const std::vector<fimsdescription__identifierType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__identifierType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap*, const char*, std::vector<fimsdescription__identifierType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__identifierType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__identifierType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__identifierType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap *soap, std::vector<fimsdescription__identifierType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__identifierType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__typeType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__typeType (346)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap*, std::vector<fimsdescription__typeType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap*, const std::vector<fimsdescription__typeType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap*, const char*, int, const std::vector<fimsdescription__typeType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__typeType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap*, const char*, std::vector<fimsdescription__typeType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__typeType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__typeType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__typeType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap *soap, std::vector<fimsdescription__typeType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__typeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__dateType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__dateType (344)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap*, std::vector<fimsdescription__dateType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap*, const std::vector<fimsdescription__dateType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap*, const char*, int, const std::vector<fimsdescription__dateType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__dateType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap*, const char*, std::vector<fimsdescription__dateType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__dateType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__dateType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__dateType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap *soap, std::vector<fimsdescription__dateType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__dateType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__descriptionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__descriptionType (342)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap*, std::vector<fimsdescription__descriptionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap*, const std::vector<fimsdescription__descriptionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap*, const char*, int, const std::vector<fimsdescription__descriptionType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__descriptionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap*, const char*, std::vector<fimsdescription__descriptionType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__descriptionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__descriptionType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__descriptionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap *soap, std::vector<fimsdescription__descriptionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__descriptionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__subjectType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__subjectType (340)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap*, std::vector<fimsdescription__subjectType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap*, const std::vector<fimsdescription__subjectType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap*, const char*, int, const std::vector<fimsdescription__subjectType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__subjectType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap*, const char*, std::vector<fimsdescription__subjectType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__subjectType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__subjectType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__subjectType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap *soap, std::vector<fimsdescription__subjectType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__subjectType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__entityType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__entityType (338)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap*, std::vector<fimsdescription__entityType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap*, const std::vector<fimsdescription__entityType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap*, const char*, int, const std::vector<fimsdescription__entityType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__entityType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap*, const char*, std::vector<fimsdescription__entityType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__entityType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__entityType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__entityType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap *soap, std::vector<fimsdescription__entityType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__entityType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__titleType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__titleType (336)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap*, std::vector<fimsdescription__titleType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap*, const std::vector<fimsdescription__titleType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap*, const char*, int, const std::vector<fimsdescription__titleType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__titleType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap*, const char*, std::vector<fimsdescription__titleType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__titleType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__titleType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__titleType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap *soap, std::vector<fimsdescription__titleType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__titleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__textElementType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofimsdescription__textElementType (334)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap*, std::vector<fimsdescription__textElementType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap*, const std::vector<fimsdescription__textElementType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap*, const char*, int, const std::vector<fimsdescription__textElementType * >*, const char*);
SOAP_FMAC3 std::vector<fimsdescription__textElementType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap*, const char*, std::vector<fimsdescription__textElementType * >*, const char*);
SOAP_FMAC1 std::vector<fimsdescription__textElementType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fimsdescription__textElementType * > * soap_new_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofimsdescription__textElementType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap *soap, std::vector<fimsdescription__textElementType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofimsdescription__textElementType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType (325)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap*, std::vector<fims__SystemPerformanceEventType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap*, const std::vector<fims__SystemPerformanceEventType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap*, const char*, int, const std::vector<fims__SystemPerformanceEventType * >*, const char*);
SOAP_FMAC3 std::vector<fims__SystemPerformanceEventType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap*, const char*, std::vector<fims__SystemPerformanceEventType * >*, const char*);
SOAP_FMAC1 std::vector<fims__SystemPerformanceEventType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__SystemPerformanceEventType * > * soap_new_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap *soap, std::vector<fims__SystemPerformanceEventType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__SystemPerformanceEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__SystemExceptionEventType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__SystemExceptionEventType (323)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap*, std::vector<fims__SystemExceptionEventType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap*, const std::vector<fims__SystemExceptionEventType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap*, const char*, int, const std::vector<fims__SystemExceptionEventType * >*, const char*);
SOAP_FMAC3 std::vector<fims__SystemExceptionEventType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap*, const char*, std::vector<fims__SystemExceptionEventType * >*, const char*);
SOAP_FMAC1 std::vector<fims__SystemExceptionEventType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__SystemExceptionEventType * > * soap_new_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap *soap, std::vector<fims__SystemExceptionEventType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__SystemExceptionEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__SystemEventType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__SystemEventType (321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap*, std::vector<fims__SystemEventType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap*, const std::vector<fims__SystemEventType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap*, const char*, int, const std::vector<fims__SystemEventType * >*, const char*);
SOAP_FMAC3 std::vector<fims__SystemEventType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap*, const char*, std::vector<fims__SystemEventType * >*, const char*);
SOAP_FMAC1 std::vector<fims__SystemEventType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__SystemEventType * > * soap_new_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__SystemEventType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap *soap, std::vector<fims__SystemEventType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__SystemEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContentCustomEventType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContentCustomEventType (319)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap*, std::vector<fims__ContentCustomEventType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap*, const std::vector<fims__ContentCustomEventType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap*, const char*, int, const std::vector<fims__ContentCustomEventType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ContentCustomEventType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap*, const char*, std::vector<fims__ContentCustomEventType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ContentCustomEventType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ContentCustomEventType * > * soap_new_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ContentCustomEventType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap *soap, std::vector<fims__ContentCustomEventType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ContentCustomEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContentStatusEventType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContentStatusEventType (317)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap*, std::vector<fims__ContentStatusEventType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap*, const std::vector<fims__ContentStatusEventType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap*, const char*, int, const std::vector<fims__ContentStatusEventType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ContentStatusEventType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap*, const char*, std::vector<fims__ContentStatusEventType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ContentStatusEventType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ContentStatusEventType * > * soap_new_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ContentStatusEventType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap *soap, std::vector<fims__ContentStatusEventType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ContentStatusEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContentEventType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContentEventType (315)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap*, std::vector<fims__ContentEventType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap*, const std::vector<fims__ContentEventType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap*, const char*, int, const std::vector<fims__ContentEventType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ContentEventType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap*, const char*, std::vector<fims__ContentEventType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ContentEventType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ContentEventType * > * soap_new_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ContentEventType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap *soap, std::vector<fims__ContentEventType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ContentEventType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__EventPayloadType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__EventPayloadType (313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap*, std::vector<fims__EventPayloadType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap*, const std::vector<fims__EventPayloadType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap*, const char*, int, const std::vector<fims__EventPayloadType * >*, const char*);
SOAP_FMAC3 std::vector<fims__EventPayloadType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap*, const char*, std::vector<fims__EventPayloadType * >*, const char*);
SOAP_FMAC1 std::vector<fims__EventPayloadType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__EventPayloadType * > * soap_new_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__EventPayloadType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap *soap, std::vector<fims__EventPayloadType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__EventPayloadType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__EventEnvelopeType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__EventEnvelopeType (312)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap*, std::vector<fims__EventEnvelopeType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap*, const std::vector<fims__EventEnvelopeType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap*, const char*, int, const std::vector<fims__EventEnvelopeType * >*, const char*);
SOAP_FMAC3 std::vector<fims__EventEnvelopeType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap*, const char*, std::vector<fims__EventEnvelopeType * >*, const char*);
SOAP_FMAC1 std::vector<fims__EventEnvelopeType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__EventEnvelopeType * > * soap_new_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__EventEnvelopeType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap *soap, std::vector<fims__EventEnvelopeType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__EventEnvelopeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomEventTemplateType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomEventTemplateType (306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap*, std::vector<fims__CustomEventTemplateType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap*, const std::vector<fims__CustomEventTemplateType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap*, const char*, int, const std::vector<fims__CustomEventTemplateType * >*, const char*);
SOAP_FMAC3 std::vector<fims__CustomEventTemplateType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap*, const char*, std::vector<fims__CustomEventTemplateType * >*, const char*);
SOAP_FMAC1 std::vector<fims__CustomEventTemplateType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__CustomEventTemplateType * > * soap_new_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap *soap, std::vector<fims__CustomEventTemplateType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__CustomEventTemplateType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueryGroupType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueryGroupType (302)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap*, std::vector<fims__QueryGroupType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap*, const std::vector<fims__QueryGroupType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap*, const char*, int, const std::vector<fims__QueryGroupType * >*, const char*);
SOAP_FMAC3 std::vector<fims__QueryGroupType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap*, const char*, std::vector<fims__QueryGroupType * >*, const char*);
SOAP_FMAC1 std::vector<fims__QueryGroupType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__QueryGroupType * > * soap_new_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__QueryGroupType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap *soap, std::vector<fims__QueryGroupType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__QueryGroupType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType (298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap*, std::vector<fims__CustomQueryGroupOperatorType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap*, const std::vector<fims__CustomQueryGroupOperatorType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap*, const char*, int, const std::vector<fims__CustomQueryGroupOperatorType * >*, const char*);
SOAP_FMAC3 std::vector<fims__CustomQueryGroupOperatorType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap*, const char*, std::vector<fims__CustomQueryGroupOperatorType * >*, const char*);
SOAP_FMAC1 std::vector<fims__CustomQueryGroupOperatorType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__CustomQueryGroupOperatorType * > * soap_new_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap *soap, std::vector<fims__CustomQueryGroupOperatorType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__CustomQueryGroupOperatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueryParameterType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueryParameterType (296)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap*, std::vector<fims__QueryParameterType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap*, const std::vector<fims__QueryParameterType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap*, const char*, int, const std::vector<fims__QueryParameterType * >*, const char*);
SOAP_FMAC3 std::vector<fims__QueryParameterType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap*, const char*, std::vector<fims__QueryParameterType * >*, const char*);
SOAP_FMAC1 std::vector<fims__QueryParameterType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__QueryParameterType * > * soap_new_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__QueryParameterType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap *soap, std::vector<fims__QueryParameterType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__QueryParameterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType (292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap*, std::vector<fims__CustomQueryParameterOperatorType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap*, const std::vector<fims__CustomQueryParameterOperatorType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap*, const char*, int, const std::vector<fims__CustomQueryParameterOperatorType * >*, const char*);
SOAP_FMAC3 std::vector<fims__CustomQueryParameterOperatorType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap*, const char*, std::vector<fims__CustomQueryParameterOperatorType * >*, const char*);
SOAP_FMAC1 std::vector<fims__CustomQueryParameterOperatorType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__CustomQueryParameterOperatorType * > * soap_new_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap *soap, std::vector<fims__CustomQueryParameterOperatorType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__CustomQueryParameterOperatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueryExpressionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueryExpressionType (290)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap*, std::vector<fims__QueryExpressionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap*, const std::vector<fims__QueryExpressionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap*, const char*, int, const std::vector<fims__QueryExpressionType * >*, const char*);
SOAP_FMAC3 std::vector<fims__QueryExpressionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap*, const char*, std::vector<fims__QueryExpressionType * >*, const char*);
SOAP_FMAC1 std::vector<fims__QueryExpressionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__QueryExpressionType * > * soap_new_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__QueryExpressionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap *soap, std::vector<fims__QueryExpressionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__QueryExpressionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__SuperLockTokenType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__SuperLockTokenType (285)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap*, std::vector<fims__SuperLockTokenType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap*, const std::vector<fims__SuperLockTokenType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap*, const char*, int, const std::vector<fims__SuperLockTokenType * >*, const char*);
SOAP_FMAC3 std::vector<fims__SuperLockTokenType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap*, const char*, std::vector<fims__SuperLockTokenType * >*, const char*);
SOAP_FMAC1 std::vector<fims__SuperLockTokenType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__SuperLockTokenType * > * soap_new_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__SuperLockTokenType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap *soap, std::vector<fims__SuperLockTokenType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__SuperLockTokenType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__LockTokenType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__LockTokenType (283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap*, std::vector<fims__LockTokenType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap*, const std::vector<fims__LockTokenType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap*, const char*, int, const std::vector<fims__LockTokenType * >*, const char*);
SOAP_FMAC3 std::vector<fims__LockTokenType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap*, const char*, std::vector<fims__LockTokenType * >*, const char*);
SOAP_FMAC1 std::vector<fims__LockTokenType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__LockTokenType * > * soap_new_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__LockTokenType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap *soap, std::vector<fims__LockTokenType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__LockTokenType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__CredentialType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__CredentialType (281)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__CredentialType(struct soap*, std::vector<fims__CredentialType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__CredentialType(struct soap*, const std::vector<fims__CredentialType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__CredentialType(struct soap*, const char*, int, const std::vector<fims__CredentialType * >*, const char*);
SOAP_FMAC3 std::vector<fims__CredentialType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__CredentialType(struct soap*, const char*, std::vector<fims__CredentialType * >*, const char*);
SOAP_FMAC1 std::vector<fims__CredentialType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__CredentialType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__CredentialType * > * soap_new_std__vectorTemplateOfPointerTofims__CredentialType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__CredentialType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__CredentialType(struct soap *soap, std::vector<fims__CredentialType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__CredentialType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap*, std::vector<fims__BMEssenceLocatorStatusType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap*, const std::vector<fims__BMEssenceLocatorStatusType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap*, const char*, int, const std::vector<fims__BMEssenceLocatorStatusType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMEssenceLocatorStatusType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap*, const char*, std::vector<fims__BMEssenceLocatorStatusType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMEssenceLocatorStatusType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMEssenceLocatorStatusType * > * soap_new_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap *soap, std::vector<fims__BMEssenceLocatorStatusType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMEssenceLocatorStatusType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMContentStatusType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMContentStatusType (277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap*, std::vector<fims__BMContentStatusType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap*, const std::vector<fims__BMContentStatusType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap*, const char*, int, const std::vector<fims__BMContentStatusType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMContentStatusType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap*, const char*, std::vector<fims__BMContentStatusType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMContentStatusType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMContentStatusType * > * soap_new_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMContentStatusType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap *soap, std::vector<fims__BMContentStatusType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMContentStatusType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType (275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap*, std::vector<fims__BMCustomStatusExtensionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap*, const std::vector<fims__BMCustomStatusExtensionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap*, const char*, int, const std::vector<fims__BMCustomStatusExtensionType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMCustomStatusExtensionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap*, const char*, std::vector<fims__BMCustomStatusExtensionType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMCustomStatusExtensionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMCustomStatusExtensionType * > * soap_new_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap *soap, std::vector<fims__BMCustomStatusExtensionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMCustomStatusExtensionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomValueType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__CustomValueType (273)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap*, std::vector<fims__CustomValueType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap*, const std::vector<fims__CustomValueType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap*, const char*, int, const std::vector<fims__CustomValueType * >*, const char*);
SOAP_FMAC3 std::vector<fims__CustomValueType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap*, const char*, std::vector<fims__CustomValueType * >*, const char*);
SOAP_FMAC1 std::vector<fims__CustomValueType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__CustomValueType * > * soap_new_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__CustomValueType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap *soap, std::vector<fims__CustomValueType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__CustomValueType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ResourceReferenceType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ResourceReferenceType (271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap*, std::vector<fims__ResourceReferenceType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap*, const std::vector<fims__ResourceReferenceType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap*, const char*, int, const std::vector<fims__ResourceReferenceType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ResourceReferenceType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap*, const char*, std::vector<fims__ResourceReferenceType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ResourceReferenceType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ResourceReferenceType * > * soap_new_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ResourceReferenceType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap *soap, std::vector<fims__ResourceReferenceType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ResourceReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__DescriptionType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__DescriptionType (269)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap*, std::vector<fims__DescriptionType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap*, const std::vector<fims__DescriptionType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap*, const char*, int, const std::vector<fims__DescriptionType * >*, const char*);
SOAP_FMAC3 std::vector<fims__DescriptionType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap*, const char*, std::vector<fims__DescriptionType * >*, const char*);
SOAP_FMAC1 std::vector<fims__DescriptionType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__DescriptionType * > * soap_new_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__DescriptionType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap *soap, std::vector<fims__DescriptionType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__DescriptionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType (267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap*, std::vector<fims__BMEssenceLocatorType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap*, const std::vector<fims__BMEssenceLocatorType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap*, const char*, int, const std::vector<fims__BMEssenceLocatorType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMEssenceLocatorType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap*, const char*, std::vector<fims__BMEssenceLocatorType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMEssenceLocatorType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMEssenceLocatorType * > * soap_new_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap *soap, std::vector<fims__BMEssenceLocatorType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMEssenceLocatorType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMContentFormatType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMContentFormatType (265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap*, std::vector<fims__BMContentFormatType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap*, const std::vector<fims__BMContentFormatType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap*, const char*, int, const std::vector<fims__BMContentFormatType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMContentFormatType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap*, const char*, std::vector<fims__BMContentFormatType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMContentFormatType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMContentFormatType * > * soap_new_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMContentFormatType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap *soap, std::vector<fims__BMContentFormatType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMContentFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMContentType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMContentType (263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMContentType(struct soap*, std::vector<fims__BMContentType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMContentType(struct soap*, const std::vector<fims__BMContentType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMContentType(struct soap*, const char*, int, const std::vector<fims__BMContentType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMContentType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMContentType(struct soap*, const char*, std::vector<fims__BMContentType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMContentType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMContentType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMContentType * > * soap_new_std__vectorTemplateOfPointerTofims__BMContentType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMContentType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMContentType(struct soap *soap, std::vector<fims__BMContentType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMContentType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMObjectType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__BMObjectType (261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap*, std::vector<fims__BMObjectType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap*, const std::vector<fims__BMObjectType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap*, const char*, int, const std::vector<fims__BMObjectType * >*, const char*);
SOAP_FMAC3 std::vector<fims__BMObjectType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap*, const char*, std::vector<fims__BMObjectType * >*, const char*);
SOAP_FMAC1 std::vector<fims__BMObjectType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__BMObjectType * > * soap_new_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__BMObjectType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap *soap, std::vector<fims__BMObjectType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__BMObjectType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__DataFormatType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__DataFormatType (260)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap*, std::vector<fims__DataFormatType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap*, const std::vector<fims__DataFormatType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap*, const char*, int, const std::vector<fims__DataFormatType * >*, const char*);
SOAP_FMAC3 std::vector<fims__DataFormatType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap*, const char*, std::vector<fims__DataFormatType * >*, const char*);
SOAP_FMAC1 std::vector<fims__DataFormatType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__DataFormatType * > * soap_new_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__DataFormatType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap *soap, std::vector<fims__DataFormatType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__DataFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContainerFormatType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ContainerFormatType (258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap*, std::vector<fims__ContainerFormatType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap*, const std::vector<fims__ContainerFormatType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap*, const char*, int, const std::vector<fims__ContainerFormatType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ContainerFormatType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap*, const char*, std::vector<fims__ContainerFormatType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ContainerFormatType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ContainerFormatType * > * soap_new_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ContainerFormatType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap *soap, std::vector<fims__ContainerFormatType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ContainerFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__AudioFormatType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__AudioFormatType (257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap*, std::vector<fims__AudioFormatType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap*, const std::vector<fims__AudioFormatType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap*, const char*, int, const std::vector<fims__AudioFormatType * >*, const char*);
SOAP_FMAC3 std::vector<fims__AudioFormatType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap*, const char*, std::vector<fims__AudioFormatType * >*, const char*);
SOAP_FMAC1 std::vector<fims__AudioFormatType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__AudioFormatType * > * soap_new_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__AudioFormatType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap *soap, std::vector<fims__AudioFormatType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__AudioFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__VideoFormatType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__VideoFormatType (256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap*, std::vector<fims__VideoFormatType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap*, const std::vector<fims__VideoFormatType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap*, const char*, int, const std::vector<fims__VideoFormatType * >*, const char*);
SOAP_FMAC3 std::vector<fims__VideoFormatType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap*, const char*, std::vector<fims__VideoFormatType * >*, const char*);
SOAP_FMAC1 std::vector<fims__VideoFormatType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__VideoFormatType * > * soap_new_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__VideoFormatType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap *soap, std::vector<fims__VideoFormatType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__VideoFormatType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__JobType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__JobType (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__JobType(struct soap*, std::vector<fims__JobType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__JobType(struct soap*, const std::vector<fims__JobType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__JobType(struct soap*, const char*, int, const std::vector<fims__JobType * >*, const char*);
SOAP_FMAC3 std::vector<fims__JobType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__JobType(struct soap*, const char*, std::vector<fims__JobType * >*, const char*);
SOAP_FMAC1 std::vector<fims__JobType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__JobType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__JobType * > * soap_new_std__vectorTemplateOfPointerTofims__JobType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__JobType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__JobType(struct soap *soap, std::vector<fims__JobType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__JobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueueType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__QueueType (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__QueueType(struct soap*, std::vector<fims__QueueType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__QueueType(struct soap*, const std::vector<fims__QueueType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__QueueType(struct soap*, const char*, int, const std::vector<fims__QueueType * >*, const char*);
SOAP_FMAC3 std::vector<fims__QueueType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__QueueType(struct soap*, const char*, std::vector<fims__QueueType * >*, const char*);
SOAP_FMAC1 std::vector<fims__QueueType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__QueueType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__QueueType * > * soap_new_std__vectorTemplateOfPointerTofims__QueueType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__QueueType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__QueueType(struct soap *soap, std::vector<fims__QueueType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__QueueType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ServiceType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ServiceType (253)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ServiceType(struct soap*, std::vector<fims__ServiceType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ServiceType(struct soap*, const std::vector<fims__ServiceType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ServiceType(struct soap*, const char*, int, const std::vector<fims__ServiceType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ServiceType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ServiceType(struct soap*, const char*, std::vector<fims__ServiceType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ServiceType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ServiceType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ServiceType * > * soap_new_std__vectorTemplateOfPointerTofims__ServiceType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ServiceType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ServiceType(struct soap *soap, std::vector<fims__ServiceType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ServiceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ProfileType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ProfileType (252)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ProfileType(struct soap*, std::vector<fims__ProfileType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ProfileType(struct soap*, const std::vector<fims__ProfileType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ProfileType(struct soap*, const char*, int, const std::vector<fims__ProfileType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ProfileType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ProfileType(struct soap*, const char*, std::vector<fims__ProfileType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ProfileType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ProfileType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ProfileType * > * soap_new_std__vectorTemplateOfPointerTofims__ProfileType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ProfileType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ProfileType(struct soap *soap, std::vector<fims__ProfileType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ProfileType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__ResourceType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__ResourceType (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__ResourceType(struct soap*, std::vector<fims__ResourceType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__ResourceType(struct soap*, const std::vector<fims__ResourceType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__ResourceType(struct soap*, const char*, int, const std::vector<fims__ResourceType * >*, const char*);
SOAP_FMAC3 std::vector<fims__ResourceType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__ResourceType(struct soap*, const char*, std::vector<fims__ResourceType * >*, const char*);
SOAP_FMAC1 std::vector<fims__ResourceType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__ResourceType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__ResourceType * > * soap_new_std__vectorTemplateOfPointerTofims__ResourceType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__ResourceType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__ResourceType(struct soap *soap, std::vector<fims__ResourceType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__ResourceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTofims__InnerFaultType
#define SOAP_TYPE_std__vectorTemplateOfPointerTofims__InnerFaultType (248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap*, std::vector<fims__InnerFaultType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap*, const std::vector<fims__InnerFaultType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap*, const char*, int, const std::vector<fims__InnerFaultType * >*, const char*);
SOAP_FMAC3 std::vector<fims__InnerFaultType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap*, const char*, std::vector<fims__InnerFaultType * >*, const char*);
SOAP_FMAC1 std::vector<fims__InnerFaultType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<fims__InnerFaultType * > * soap_new_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTofims__InnerFaultType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap *soap, std::vector<fims__InnerFaultType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTofims__InnerFaultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToedlprovider__MapItemType
#define SOAP_TYPE_std__vectorTemplateOfPointerToedlprovider__MapItemType (224)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap*, std::vector<edlprovider__MapItemType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap*, const std::vector<edlprovider__MapItemType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap*, const char*, int, const std::vector<edlprovider__MapItemType * >*, const char*);
SOAP_FMAC3 std::vector<edlprovider__MapItemType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap*, const char*, std::vector<edlprovider__MapItemType * >*, const char*);
SOAP_FMAC1 std::vector<edlprovider__MapItemType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<edlprovider__MapItemType * > * soap_new_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToedlprovider__MapItemType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap *soap, std::vector<edlprovider__MapItemType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToedlprovider__MapItemType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToedlprovider__ClipType
#define SOAP_TYPE_std__vectorTemplateOfPointerToedlprovider__ClipType (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap*, std::vector<edlprovider__ClipType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap*, const std::vector<edlprovider__ClipType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap*, const char*, int, const std::vector<edlprovider__ClipType * >*, const char*);
SOAP_FMAC3 std::vector<edlprovider__ClipType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap*, const char*, std::vector<edlprovider__ClipType * >*, const char*);
SOAP_FMAC1 std::vector<edlprovider__ClipType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<edlprovider__ClipType * > * soap_new_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToedlprovider__ClipType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap *soap, std::vector<edlprovider__ClipType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToedlprovider__ClipType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__wstring
#define SOAP_TYPE_std__vectorTemplateOfstd__wstring (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__wstring(struct soap*, std::vector<std::wstring >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__wstring(struct soap*, const std::vector<std::wstring >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__wstring(struct soap*, const char*, int, const std::vector<std::wstring >*, const char*);
SOAP_FMAC3 std::vector<std::wstring >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__wstring(struct soap*, const char*, std::vector<std::wstring >*, const char*);
SOAP_FMAC1 std::vector<std::wstring > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::wstring > * soap_new_std__vectorTemplateOfstd__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__wstring(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__wstring(struct soap *soap, std::vector<std::wstring >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of EDLProviderH.h */
