// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* D:\Sandbox\EdlProvider\Soap\gsoap\src\EDLProviderInterface.h
   Generated by wsdl2h 2.8.18 from D:\Sandbox\EdlProvider\Soap\gsoap\..\Wsdl\EDLProvider.wsdl and D:\Sandbox\EdlProvider\Soap\gsoap\typemapcustom.dat
   2014-09-27 20:47:45 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2014 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on D:\Sandbox\EdlProvider\Soap\gsoap\src\EDLProviderInterface.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://temp/edlprovider                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

edlprovider = "http://temp/edlprovider"
fims = "http://base.fims.tv"
fimstime = "http://baseTime.fims.tv"
fimsdescription = "http://description.fims.tv"

*/

#define SOAP_NAMESPACE_OF_edlprovider	"http://temp/edlprovider"
//gsoap edlprovider schema namespace:	http://temp/edlprovider
//gsoap edlprovider schema form:	unqualified

#define SOAP_NAMESPACE_OF_fims	"http://base.fims.tv"
//gsoap fims  schema namespace:	http://base.fims.tv
//gsoap fims  schema elementForm:	qualified
//gsoap fims  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_fimstime	"http://baseTime.fims.tv"
//gsoap fimstime schema namespace:	http://baseTime.fims.tv
//gsoap fimstime schema elementForm:	qualified
//gsoap fimstime schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_fimsdescription	"http://description.fims.tv"
//gsoap fimsdescription schema namespace:	http://description.fims.tv
//gsoap fimsdescription schema elementForm:	qualified
//gsoap fimsdescription schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIMEM/MIME/MTOM XOP attachments only
	struct soap *soap;
};

/// Built-in XSD type "xs:duration".
#import "custom/duration.h"

/// Built-in XSD type "xs:hexBinary".
class xsd__hexBinary { unsigned char *__ptr; int __size; };

/// Primitive built-in type "xs:NMTOKEN".
typedef std::wstring xsd__NMTOKEN;

/// Primitive built-in type "xs:anyURI".
typedef std::wstring xsd__anyURI;

/// Primitive built-in type "xs:date".
typedef std::wstring xsd__date;

/// Primitive built-in type "xs:decimal".
typedef std::wstring xsd__decimal;

/// Primitive built-in type "xs:gYear".
typedef std::wstring xsd__gYear;

/// Primitive built-in type "xs:integer".
typedef std::wstring xsd__integer;

/// Primitive built-in type "xs:language".
typedef std::wstring xsd__language;

/// Primitive built-in type "xs:nonNegativeInteger".
typedef std::wstring xsd__nonNegativeInteger;

/// Primitive built-in type "xs:positiveInteger".
typedef std::wstring xsd__positiveInteger;

/// Primitive built-in type "xs:time".
typedef std::wstring xsd__time;

/// Built-in attribute "xml:lang".
typedef std::wstring _xml__lang;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class edlprovider__ArrayOfstring.
class edlprovider__ArrayOfstring;

//  Forward declaration of class edlprovider__ArrayOfClips.
class edlprovider__ArrayOfClips;

//  Forward declaration of class edlprovider__ClipType.
class edlprovider__ClipType;

//  Forward declaration of class edlprovider__MapItemType.
class edlprovider__MapItemType;

//  Forward declaration of class edlprovider__EdlCreateRequestBaseType.
class edlprovider__EdlCreateRequestBaseType;

//  Forward declaration of class edlprovider__EdlCreateRequestType.
class edlprovider__EdlCreateRequestType;

//  Forward declaration of class edlprovider__EdlCreateRequestDoubleType.
class edlprovider__EdlCreateRequestDoubleType;

//  Forward declaration of class edlprovider__EdlCreateResponseType.
class edlprovider__EdlCreateResponseType;

//  Forward declaration of class edlprovider__InstalledEdlsResponseType.
class edlprovider__InstalledEdlsResponseType;

//  Forward declaration of class edlprovider__EdlProviderFaultType.
class edlprovider__EdlProviderFaultType;

//  Forward declaration of class _edlprovider__Map.
class _edlprovider__Map;

//  Forward declaration of class fims__ExtensionGroup.
class fims__ExtensionGroup;

//  Forward declaration of class fims__ExtensionAttributes.
class fims__ExtensionAttributes;

//  Forward declaration of class fims__ResourceReferenceType.
class fims__ResourceReferenceType;

//  Forward declaration of class fims__ResourceType.
class fims__ResourceType;

//  Forward declaration of class fims__ExtensionBaseType.
class fims__ExtensionBaseType;

//  Forward declaration of class fims__AsyncEndpointType.
class fims__AsyncEndpointType;

//  Forward declaration of class fims__ServiceType.
class fims__ServiceType;

//  Forward declaration of class fims__ProfileType.
class fims__ProfileType;

//  Forward declaration of class fims__QueueType.
class fims__QueueType;

//  Forward declaration of class fims__JobType.
class fims__JobType;

//  Forward declaration of class fims__FormatType.
class fims__FormatType;

//  Forward declaration of class fims__VideoFormatType.
class fims__VideoFormatType;

//  Forward declaration of class fims__AudioFormatType.
class fims__AudioFormatType;

//  Forward declaration of class fims__DataFormatType.
class fims__DataFormatType;

//  Forward declaration of class fims__CaptioningFormatType.
class fims__CaptioningFormatType;

//  Forward declaration of class fims__AncillaryDataFormatType.
class fims__AncillaryDataFormatType;

//  Forward declaration of class fims__ContainerFormatType.
class fims__ContainerFormatType;

//  Forward declaration of class fims__BMTrackType.
class fims__BMTrackType;

//  Forward declaration of class fims__CodecType.
class fims__CodecType;

//  Forward declaration of class fims__BMObjectType.
class fims__BMObjectType;

//  Forward declaration of class fims__BMContentType.
class fims__BMContentType;

//  Forward declaration of class fims__DescriptionType.
class fims__DescriptionType;

//  Forward declaration of class fims__BMContentFormatType.
class fims__BMContentFormatType;

//  Forward declaration of class fims__BMEssenceLocatorType.
class fims__BMEssenceLocatorType;

//  Forward declaration of class fims__SimpleFileLocatorType.
class fims__SimpleFileLocatorType;

//  Forward declaration of class fims__ListFileLocatorType.
class fims__ListFileLocatorType;

//  Forward declaration of class fims__FolderLocatorType.
class fims__FolderLocatorType;

//  Forward declaration of class fims__EssencePlaceholderLocatorType.
class fims__EssencePlaceholderLocatorType;

//  Forward declaration of class fims__TransferAtomType.
class fims__TransferAtomType;

//  Forward declaration of class fims__TransformAtomType.
class fims__TransformAtomType;

//  Forward declaration of class fims__TechnicalAttributeType.
class fims__TechnicalAttributeType;

//  Forward declaration of class fims__LengthType.
class fims__LengthType;

//  Forward declaration of class fims__RationalType.
class fims__RationalType;

//  Forward declaration of class fims__HashType.
class fims__HashType;

//  Forward declaration of class fims__ProcessedInfoType.
class fims__ProcessedInfoType;

//  Forward declaration of class fims__ProcessedInfoByBytesType.
class fims__ProcessedInfoByBytesType;

//  Forward declaration of class fims__ProcessedInfoByFramesType.
class fims__ProcessedInfoByFramesType;

//  Forward declaration of class fims__StorageType.
class fims__StorageType;

//  Forward declaration of class fims__HashFunctionType.
class fims__HashFunctionType;

//  Forward declaration of class fims__StartProcessType.
class fims__StartProcessType;

//  Forward declaration of class fims__StartProcessByNoWaitType.
class fims__StartProcessByNoWaitType;

//  Forward declaration of class fims__StartProcessByTimeType.
class fims__StartProcessByTimeType;

//  Forward declaration of class fims__StartProcessByTimeMarkType.
class fims__StartProcessByTimeMarkType;

//  Forward declaration of class fims__StartProcessByServiceDefinedTimeType.
class fims__StartProcessByServiceDefinedTimeType;

//  Forward declaration of class fims__StopProcessType.
class fims__StopProcessType;

//  Forward declaration of class fims__StopProcessByTimeType.
class fims__StopProcessByTimeType;

//  Forward declaration of class fims__StopProcessByDurationType.
class fims__StopProcessByDurationType;

//  Forward declaration of class fims__StopProcessByTimeMarkType.
class fims__StopProcessByTimeMarkType;

//  Forward declaration of class fims__StopProcessByServiceDefinedTimeType.
class fims__StopProcessByServiceDefinedTimeType;

//  Forward declaration of class fims__StopProcessByOpenEndType.
class fims__StopProcessByOpenEndType;

//  Forward declaration of class fims__StartJobType.
class fims__StartJobType;

//  Forward declaration of class fims__StartJobByNoWaitType.
class fims__StartJobByNoWaitType;

//  Forward declaration of class fims__StartJobByTimeType.
class fims__StartJobByTimeType;

//  Forward declaration of class fims__StartJobByLatestType.
class fims__StartJobByLatestType;

//  Forward declaration of class fims__ManageJobRequestType.
class fims__ManageJobRequestType;

//  Forward declaration of class fims__ManageJobResponseType.
class fims__ManageJobResponseType;

//  Forward declaration of class fims__ManageQueueRequestType.
class fims__ManageQueueRequestType;

//  Forward declaration of class fims__ManageQueueResponseType.
class fims__ManageQueueResponseType;

//  Forward declaration of class fims__QueryJobRequestType.
class fims__QueryJobRequestType;

//  Forward declaration of class fims__QueryJobRequestByIDType.
class fims__QueryJobRequestByIDType;

//  Forward declaration of class fims__QueryJobRequestByFilterType.
class fims__QueryJobRequestByFilterType;

//  Forward declaration of class fims__QueryJobResponseType.
class fims__QueryJobResponseType;

//  Forward declaration of class fims__QueryServiceDescriptionRequestType.
class fims__QueryServiceDescriptionRequestType;

//  Forward declaration of class fims__QueryServiceDescriptionResponseType.
class fims__QueryServiceDescriptionResponseType;

//  Forward declaration of class fims__ListFilterType.
class fims__ListFilterType;

//  Forward declaration of class fims__FaultType.
class fims__FaultType;

//  Forward declaration of class fims__InnerFaultType.
class fims__InnerFaultType;

//  Forward declaration of class fims__ResourcesType.
class fims__ResourcesType;

//  Forward declaration of class fims__ProfilesType.
class fims__ProfilesType;

//  Forward declaration of class fims__ServicesType.
class fims__ServicesType;

//  Forward declaration of class fims__QueuesType.
class fims__QueuesType;

//  Forward declaration of class fims__JobsType.
class fims__JobsType;

//  Forward declaration of class fims__VideoFormatsType.
class fims__VideoFormatsType;

//  Forward declaration of class fims__AudioFormatsType.
class fims__AudioFormatsType;

//  Forward declaration of class fims__ContainerFormatsType.
class fims__ContainerFormatsType;

//  Forward declaration of class fims__DataFormatsType.
class fims__DataFormatsType;

//  Forward declaration of class fims__BMObjectsType.
class fims__BMObjectsType;

//  Forward declaration of class fims__BMContentsType.
class fims__BMContentsType;

//  Forward declaration of class fims__BMContentFormatsType.
class fims__BMContentFormatsType;

//  Forward declaration of class fims__BMEssenceLocatorsType.
class fims__BMEssenceLocatorsType;

//  Forward declaration of class fims__DescriptionsType.
class fims__DescriptionsType;

//  Forward declaration of class fims__ResourceReferencesType.
class fims__ResourceReferencesType;

//  Forward declaration of class fims__CustomValueType.
class fims__CustomValueType;

//  Forward declaration of class fims__CustomValuesType.
class fims__CustomValuesType;

//  Forward declaration of class fims__BMCustomStatusExtensionType.
class fims__BMCustomStatusExtensionType;

//  Forward declaration of class fims__BMCustomStatusExtensionsType.
class fims__BMCustomStatusExtensionsType;

//  Forward declaration of class fims__BMContentStatusType.
class fims__BMContentStatusType;

//  Forward declaration of class fims__BMContentStatusesType.
class fims__BMContentStatusesType;

//  Forward declaration of class fims__BMEssenceLocatorStatusType.
class fims__BMEssenceLocatorStatusType;

//  Forward declaration of class fims__BMEssenceLocatorStatusesType.
class fims__BMEssenceLocatorStatusesType;

//  Forward declaration of class fims__CredentialType.
class fims__CredentialType;

//  Forward declaration of class fims__CredentialsType.
class fims__CredentialsType;

//  Forward declaration of class fims__LockTokenType.
class fims__LockTokenType;

//  Forward declaration of class fims__LockTokensType.
class fims__LockTokensType;

//  Forward declaration of class fims__SuperLockTokenType.
class fims__SuperLockTokenType;

//  Forward declaration of class fims__SuperLockTokensType.
class fims__SuperLockTokensType;

//  Forward declaration of class fims__QueryExpressionType.
class fims__QueryExpressionType;

//  Forward declaration of class fims__QueryExpressionsType.
class fims__QueryExpressionsType;

//  Forward declaration of class fims__CustomQueryParameterOperatorType.
class fims__CustomQueryParameterOperatorType;

//  Forward declaration of class fims__CustomQueryParameterOperatorsType.
class fims__CustomQueryParameterOperatorsType;

//  Forward declaration of class fims__QueryParameterType.
class fims__QueryParameterType;

//  Forward declaration of class fims__QueryParametersType.
class fims__QueryParametersType;

//  Forward declaration of class fims__CustomQueryGroupOperatorType.
class fims__CustomQueryGroupOperatorType;

//  Forward declaration of class fims__CustomQueryGroupOperatorsType.
class fims__CustomQueryGroupOperatorsType;

//  Forward declaration of class fims__QueryGroupType.
class fims__QueryGroupType;

//  Forward declaration of class fims__QueryGroupsType.
class fims__QueryGroupsType;

//  Forward declaration of class fims__CustomEventTemplateType.
class fims__CustomEventTemplateType;

//  Forward declaration of class fims__CustomEventTemplatesType.
class fims__CustomEventTemplatesType;

//  Forward declaration of class fims__EventEnvelopeType.
class fims__EventEnvelopeType;

//  Forward declaration of class fims__EventEnvelopesType.
class fims__EventEnvelopesType;

//  Forward declaration of class fims__EventPayloadType.
class fims__EventPayloadType;

//  Forward declaration of class fims__EventPayloadsType.
class fims__EventPayloadsType;

//  Forward declaration of class fims__ContentEventType.
class fims__ContentEventType;

//  Forward declaration of class fims__ContentEventsType.
class fims__ContentEventsType;

//  Forward declaration of class fims__ContentStatusEventType.
class fims__ContentStatusEventType;

//  Forward declaration of class fims__ContentStatusEventsType.
class fims__ContentStatusEventsType;

//  Forward declaration of class fims__ContentCustomEventType.
class fims__ContentCustomEventType;

//  Forward declaration of class fims__ContentCustomEventsType.
class fims__ContentCustomEventsType;

//  Forward declaration of class fims__SystemEventType.
class fims__SystemEventType;

//  Forward declaration of class fims__SystemEventsType.
class fims__SystemEventsType;

//  Forward declaration of class fims__SystemExceptionEventType.
class fims__SystemExceptionEventType;

//  Forward declaration of class fims__SystemExceptionEventsType.
class fims__SystemExceptionEventsType;

//  Forward declaration of class fims__SystemPerformanceEventType.
class fims__SystemPerformanceEventType;

//  Forward declaration of class fims__SystemPerformanceEventsType.
class fims__SystemPerformanceEventsType;

//  Forward declaration of class _fims__formatCollection.
class _fims__formatCollection;

//  Forward declaration of class fimstime__DurationType.
class fimstime__DurationType;

//  Forward declaration of class fimstime__TimeType.
class fimstime__TimeType;

//  Forward declaration of class fimstime__EditUnitNumberType.
class fimstime__EditUnitNumberType;

//  Forward declaration of class fimsdescription__bmContentDescriptionType.
class fimsdescription__bmContentDescriptionType;

//  Forward declaration of class fimsdescription__titleType.
class fimsdescription__titleType;

//  Forward declaration of class fimsdescription__identifierType.
class fimsdescription__identifierType;

//  Forward declaration of class fimsdescription__subjectType.
class fimsdescription__subjectType;

//  Forward declaration of class fimsdescription__typeType.
class fimsdescription__typeType;

//  Forward declaration of class fimsdescription__descriptionType.
class fimsdescription__descriptionType;

//  Forward declaration of class fimsdescription__coverageType.
class fimsdescription__coverageType;

//  Forward declaration of class fimsdescription__rightsType.
class fimsdescription__rightsType;

//  Forward declaration of class fimsdescription__textElementType.
class fimsdescription__textElementType;

//  Forward declaration of class fimsdescription__dateType.
class fimsdescription__dateType;

//  Forward declaration of class fimsdescription__entityType.
class fimsdescription__entityType;

//  Forward declaration of class fimsdescription__contactDetailsType.
class fimsdescription__contactDetailsType;

//  Forward declaration of class fimsdescription__organisationDetailsType.
class fimsdescription__organisationDetailsType;

//  Forward declaration of class fimsdescription__detailsType.
class fimsdescription__detailsType;

//  Forward declaration of class fimsdescription__addressType.
class fimsdescription__addressType;

//  Forward declaration of class fimsdescription__languageType.
class fimsdescription__languageType;

//  Forward declaration of class fimsdescription__relationType.
class fimsdescription__relationType;

//  Forward declaration of class fimsdescription__partType.
class fimsdescription__partType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://temp/edlprovider                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://base.fims.tv                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://baseTime.fims.tv                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://description.fims.tv                                               *
 *                                                                            *
\******************************************************************************/

/// @brief "http://temp/edlprovider":EdlProviderErrorCodeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Specific error codes for the EDL provider service, possible errors:
///   - INF_S00_xxxx: Infrastructure errors (system, storage, network, memory, processor)
///   - DAT_S00_xxxx: Data errors (validation, missing, duplication)
///   - SVC_S00_xxxx: Operation errors (existence, support, lock, connection, failure)
///   - SEC_S00_xxxx: Security errors (authentication, authorization)
///   - EXT_S00_xxxx: Extended code.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "edlprovider__EdlProviderErrorCodeType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum edlprovider__EdlProviderErrorCodeType
{
/// <PRE><BLOCKQUOTE>
///   EDL type not found.
/// </BLOCKQUOTE></PRE>
	edlprovider__EdlProviderErrorCodeType__EXT_USCORES00_USCORE0001,	///< xs:string value="EXT_S00_0001"
/// <PRE><BLOCKQUOTE>
///   Frame rate not supported.
/// </BLOCKQUOTE></PRE>
	edlprovider__EdlProviderErrorCodeType__EXT_USCORES00_USCORE0002,	///< xs:string value="EXT_S00_0002"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://base.fims.tv                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief "http://base.fims.tv":CurrentVersion is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   This schema type reports the current version of the Base Media Service schema for Clients to use to determine the current feature set.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__CurrentVersion" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__CurrentVersion
{
/// <PRE><BLOCKQUOTE>
///   This is the current FIMS version. Clients should use this value when determining what features are available in this version.
/// </BLOCKQUOTE></PRE>
	fims__CurrentVersion__1_USCORE1_USCORE0,	///< xs:string value="1_1_0"
};

/// @brief "http://base.fims.tv":UID is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Unique identifiers providing a generic representation for UUIDs, ULs and UMIDs.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
/// Content pattern is "(urn:uuid:)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|urn:smpte:umid:([0-9a-fA-F]{8}\\.){7}[0-9a-fA-F]{8}|urn:smpte:ul:([0-9a-fA-F]{8}\\.){3}[0-9a-fA-F]{8}|".
typedef std::wstring fims__UID "(urn:uuid:)?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|urn:smpte:umid:([0-9a-fA-F]{8}\\.){7}[0-9a-fA-F]{8}|urn:smpte:ul:([0-9a-fA-F]{8}\\.){3}[0-9a-fA-F]{8}|";

/// @brief "http://base.fims.tv":RevisionIDType is a simpleType restriction of XSD type xs:NMTOKEN.
///
/// <PRE><BLOCKQUOTE>
///   Identification of a specific revision of a resource.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
typedef xsd__NMTOKEN fims__RevisionIDType;

/// @brief "http://base.fims.tv":QueueStatusType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Current state of a queue.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__QueueStatusType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__QueueStatusType
{
/// <PRE><BLOCKQUOTE>
///   Queue has started successfully.
/// </BLOCKQUOTE></PRE>
	fims__QueueStatusType__started,	///< xs:string value="started"
/// <PRE><BLOCKQUOTE>
///   Queue has been stopped successfully. The queue is not accepting newly submitted jobs.
/// </BLOCKQUOTE></PRE>
	fims__QueueStatusType__stopped,	///< xs:string value="stopped"
/// <PRE><BLOCKQUOTE>
///   Queue has been locked successfully and will not accept any new submitted jobs. The jobs already in the queue will continue to start or run to completion.
/// </BLOCKQUOTE></PRE>
	fims__QueueStatusType__locked,	///< xs:string value="locked"
};

/// @brief "http://base.fims.tv":PriorityType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Acceptable priority values used to determine the execution order of jobs. See specification Part1 "Job Execution Priority".
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__PriorityType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__PriorityType
{
/// <PRE><BLOCKQUOTE>
///   Job initially allocated to the end of the queue.
/// </BLOCKQUOTE></PRE>
	fims__PriorityType__low,	///< xs:string value="low"
/// <PRE><BLOCKQUOTE>
///   Job initially allocated to be executed before any low priority jobs but after any existing medium priority jobs.
/// </BLOCKQUOTE></PRE>
	fims__PriorityType__medium,	///< xs:string value="medium"
/// <PRE><BLOCKQUOTE>
///   Job initially allocated before any medium and low priority jobs but after existing high priority jobs.
/// </BLOCKQUOTE></PRE>
	fims__PriorityType__high,	///< xs:string value="high"
/// <PRE><BLOCKQUOTE>
///   Job initially allocated to be executed before any high, medium and low priority jobs but after existing urgent jobs.
/// </BLOCKQUOTE></PRE>
	fims__PriorityType__urgent,	///< xs:string value="urgent"
/// <PRE><BLOCKQUOTE>
///   Job should be executed as soon as the request is received.
/// </BLOCKQUOTE></PRE>
	fims__PriorityType__immediate,	///< xs:string value="immediate"
};

/// @brief "http://base.fims.tv":StorageTypes is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Different kinds of storage media available (e.g. online on disk).
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__StorageTypes" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__StorageTypes
{

/// </BLOCKQUOTE></PRE>
	fims__StorageTypes__online,	///< xs:string value="online"

/// </BLOCKQUOTE></PRE>
	fims__StorageTypes__offline,	///< xs:string value="offline"

/// </BLOCKQUOTE></PRE>
	fims__StorageTypes__hsm,	///< xs:string value="hsm"

/// </BLOCKQUOTE></PRE>
	fims__StorageTypes__archive,	///< xs:string value="archive"

/// </BLOCKQUOTE></PRE>
	fims__StorageTypes__playout,	///< xs:string value="playout"

/// </BLOCKQUOTE></PRE>
	fims__StorageTypes__other,	///< xs:string value="other"
};

/// @brief "http://base.fims.tv":QueueCommandType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Commands for the control and management of a queue. All commands are optional.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__QueueCommandType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__QueueCommandType
{
/// <PRE><BLOCKQUOTE>
///   Retrieve the current status of the queue.
/// </BLOCKQUOTE></PRE>
	fims__QueueCommandType__status,	///< xs:string value="status"
/// <PRE><BLOCKQUOTE>
///   Delete all remaining jobs in the queue.
/// </BLOCKQUOTE></PRE>
	fims__QueueCommandType__clear,	///< xs:string value="clear"
/// <PRE><BLOCKQUOTE>
///   Stop the queue. Jobs cannot then be en-queued or de-queued.
/// </BLOCKQUOTE></PRE>
	fims__QueueCommandType__stop,	///< xs:string value="stop"
/// <PRE><BLOCKQUOTE>
///   Restart a stopped queue.
/// </BLOCKQUOTE></PRE>
	fims__QueueCommandType__start,	///< xs:string value="start"
/// <PRE><BLOCKQUOTE>
///   Lock the queue. Jobs cannot be en-queued but they are still being processed and can be deleted.
/// </BLOCKQUOTE></PRE>
	fims__QueueCommandType__lock,	///< xs:string value="lock"
/// <PRE><BLOCKQUOTE>
///   Unlock a locked queue.
/// </BLOCKQUOTE></PRE>
	fims__QueueCommandType__unlock,	///< xs:string value="unlock"
};

/// @brief "http://base.fims.tv":JobCommandType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Commands for the control and management of a job. All commands are optional.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__JobCommandType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__JobCommandType
{
/// <PRE><BLOCKQUOTE>
///   Cancel the job.
/// </BLOCKQUOTE></PRE>
	fims__JobCommandType__cancel,	///< xs:string value="cancel"
/// <PRE><BLOCKQUOTE>
///   Pause the job. It can be restarted with resume.
/// </BLOCKQUOTE></PRE>
	fims__JobCommandType__pause,	///< xs:string value="pause"
/// <PRE><BLOCKQUOTE>
///   Resume the job from its paused state.
/// </BLOCKQUOTE></PRE>
	fims__JobCommandType__resume,	///< xs:string value="resume"
/// <PRE><BLOCKQUOTE>
///   Restart the job from the beginning.
/// </BLOCKQUOTE></PRE>
	fims__JobCommandType__restart,	///< xs:string value="restart"
/// <PRE><BLOCKQUOTE>
///   Stop the job.
/// </BLOCKQUOTE></PRE>
	fims__JobCommandType__stop,	///< xs:string value="stop"
/// <PRE><BLOCKQUOTE>
///   Remove all the data associated with the job.
/// </BLOCKQUOTE></PRE>
	fims__JobCommandType__cleanup,	///< xs:string value="cleanup"
/// <PRE><BLOCKQUOTE>
///   Modify the priority of the job.
/// </BLOCKQUOTE></PRE>
	fims__JobCommandType__modifyPriority,	///< xs:string value="modifyPriority"
};

/// @brief "http://base.fims.tv":HashFunctionTypes is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Different hash functions that can be used to hash the content, as defined in SMPTE ST 2032.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__HashFunctionTypes" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__HashFunctionTypes
{
/// <PRE><BLOCKQUOTE>
///   32-bit Cyclic Redundancy Check, as defined in ISO 3309.
/// </BLOCKQUOTE></PRE>
	fims__HashFunctionTypes__CRC32,	///< xs:string value="CRC32"
/// <PRE><BLOCKQUOTE>
///   64-bit Cyclic Redundancy Check, as defined in ISO 3309.
/// </BLOCKQUOTE></PRE>
	fims__HashFunctionTypes__CRC64,	///< xs:string value="CRC64"
/// <PRE><BLOCKQUOTE>
///   128-bit Message Digest Algorithm 5, as defined in RFC 1321.
/// </BLOCKQUOTE></PRE>
	fims__HashFunctionTypes__MD5,	///< xs:string value="MD5"
/// <PRE><BLOCKQUOTE>
///   160-bit Secure Hash Algorithm, as defined in FIPS 180-2.
/// </BLOCKQUOTE></PRE>
	fims__HashFunctionTypes__SHA1,	///< xs:string value="SHA1"
/// <PRE><BLOCKQUOTE>
///   256-bit Secure Hash Algorithm, as defined in FIPS 180-2.
/// </BLOCKQUOTE></PRE>
	fims__HashFunctionTypes__SHA256,	///< xs:string value="SHA256"
/// <PRE><BLOCKQUOTE>
///   84-bit Secure Hash Algorithm, as defined in FIPS 180-2.
/// </BLOCKQUOTE></PRE>
	fims__HashFunctionTypes__SHA384,	///< xs:string value="SHA384"
/// <PRE><BLOCKQUOTE>
///   512-bit Secure Hash Algorithm, as defined in FIPS 180-2.
/// </BLOCKQUOTE></PRE>
	fims__HashFunctionTypes__SHA512,	///< xs:string value="SHA512"
};

/// @brief "http://base.fims.tv":JobStatusType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   All possible states for a job.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__JobStatusType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__JobStatusType
{
/// <PRE><BLOCKQUOTE>
///   Job created and ready to submit to the queue.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__new_,	///< xs:string value="new"
/// <PRE><BLOCKQUOTE>
///   Job is in the queue and is ready to start.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__queued,	///< xs:string value="queued"
/// <PRE><BLOCKQUOTE>
///   Job has been submitted and is scheduled to start in the future.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__scheduled,	///< xs:string value="scheduled"
/// <PRE><BLOCKQUOTE>
///   Job has started successfully and is currently running.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__running,	///< xs:string value="running"
/// <PRE><BLOCKQUOTE>
///   Job has been paused.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__paused,	///< xs:string value="paused"
/// <PRE><BLOCKQUOTE>
///   Job has completed successfully.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__completed,	///< xs:string value="completed"
/// <PRE><BLOCKQUOTE>
///   Job has been canceled.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__canceled,	///< xs:string value="canceled"
/// <PRE><BLOCKQUOTE>
///   Job has been stopped. A partial result may be retrieved.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__stopped,	///< xs:string value="stopped"
/// <PRE><BLOCKQUOTE>
///   Job has ended with an error.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__failed,	///< xs:string value="failed"
/// <PRE><BLOCKQUOTE>
///   A cleanup command was issued for the job. All data related to the job has been removed.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__cleaned,	///< xs:string value="cleaned"
/// <PRE><BLOCKQUOTE>
///   Status for the job is unknown.
/// </BLOCKQUOTE></PRE>
	fims__JobStatusType__unknown,	///< xs:string value="unknown"
};

/// @brief "http://base.fims.tv":AudioSampleType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Audio sample representation: integer or floating point values.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__AudioSampleType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__AudioSampleType
{
/// <PRE><BLOCKQUOTE>
///   Audio Sample Type Float value.
/// </BLOCKQUOTE></PRE>
	fims__AudioSampleType__float_,	///< xs:string value="float"
/// <PRE><BLOCKQUOTE>
///   Audio Sample Type Integer value.
/// </BLOCKQUOTE></PRE>
	fims__AudioSampleType__integer,	///< xs:string value="integer"
};

/// @brief "http://base.fims.tv":ScanningFormatType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Scanning format representation: interlaced or progressive.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__ScanningFormatType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__ScanningFormatType
{
/// <PRE><BLOCKQUOTE>
///   Scanning Format Type Interlaced value.
/// </BLOCKQUOTE></PRE>
	fims__ScanningFormatType__interlaced,	///< xs:string value="interlaced"
/// <PRE><BLOCKQUOTE>
///   Scanning Format Type Progressive value.
/// </BLOCKQUOTE></PRE>
	fims__ScanningFormatType__progressive,	///< xs:string value="progressive"
};

/// @brief "http://base.fims.tv":ScanningOrderType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Scanning order representation: whether the fields are ordered top (upper) or bottom (lower) field first.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__ScanningOrderType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__ScanningOrderType
{
/// <PRE><BLOCKQUOTE>
///   Scanning Order Type Top value.
/// </BLOCKQUOTE></PRE>
	fims__ScanningOrderType__top,	///< xs:string value="top"
/// <PRE><BLOCKQUOTE>
///   Scanning Order Type Bottom value.
/// </BLOCKQUOTE></PRE>
	fims__ScanningOrderType__bottom,	///< xs:string value="bottom"
};

/// @brief "http://base.fims.tv":BitRateModeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Representation of type of bitrate: constant or variable.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__BitRateModeType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__BitRateModeType
{
/// <PRE><BLOCKQUOTE>
///   The bitrate is set to "constant".
/// </BLOCKQUOTE></PRE>
	fims__BitRateModeType__constant,	///< xs:string value="constant"
/// <PRE><BLOCKQUOTE>
///   The bitrate is set to "variable".
/// </BLOCKQUOTE></PRE>
	fims__BitRateModeType__variable,	///< xs:string value="variable"
};

/// @brief "http://base.fims.tv":ErrorCodeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Common error codes which can be shared by different classes of adapters.
///   Error codes are classified in five main categories:
///   INF_S00_xxxx: Infrastructure errors (system, storage, network, memory, processor)
///   DAT_S00_xxxx: Data errors (validation, missing, duplication)
///   SVC_S00_xxxx: Operation errors (existence, support, lock, connection, failure)
///   SEC_S00_xxxx: Security errors (authentication, authorization)
///   EXT_S00_xxxx: Extended code. See extended error code for detail.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__ErrorCodeType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__ErrorCodeType
{
/// <PRE><BLOCKQUOTE>
///   System unavailable.
///   REST Status: 503 Service Unavailable
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__INF_USCORES00_USCORE0001,	///< xs:string value="INF_S00_0001"
/// <PRE><BLOCKQUOTE>
///   System timeout.
///   REST Status: 408 Request Timeout
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__INF_USCORES00_USCORE0002,	///< xs:string value="INF_S00_0002"
/// <PRE><BLOCKQUOTE>
///   System internal error.
///   REST Status: 500 Internal Server Error
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__INF_USCORES00_USCORE0003,	///< xs:string value="INF_S00_0003"
/// <PRE><BLOCKQUOTE>
///   Unable to connect to the database.
///   REST Status: 500 Internal Server Error
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__INF_USCORES00_USCORE0004,	///< xs:string value="INF_S00_0004"
/// <PRE><BLOCKQUOTE>
///   System out of memory.
///   REST Status: 500 Internal Server Error
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__INF_USCORES00_USCORE0005,	///< xs:string value="INF_S00_0005"
/// <PRE><BLOCKQUOTE>
///   System out of disk space.
///   REST Status: 500 Internal Server Error
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__INF_USCORES00_USCORE0006,	///< xs:string value="INF_S00_0006"
/// <PRE><BLOCKQUOTE>
///   Maximum number of connections reached.
///   REST Status: 503 Service Unavailable
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__INF_USCORES00_USCORE0007,	///< xs:string value="INF_S00_0007"
/// <PRE><BLOCKQUOTE>
///   Job command is not currently supported by the service URI specified.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0001,	///< xs:string value="SVC_S00_0001"
/// <PRE><BLOCKQUOTE>
///   Queue command is not currently supported by the service or the device.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0002,	///< xs:string value="SVC_S00_0002"
/// <PRE><BLOCKQUOTE>
///   Operation requested is not currently supported by the service ot the device.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0003,	///< xs:string value="SVC_S00_0003"
/// <PRE><BLOCKQUOTE>
///   Service unable to find/lookup device endpoint.
///   REST Status: 502 Bad Gateway
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0004,	///< xs:string value="SVC_S00_0004"
/// <PRE><BLOCKQUOTE>
///   Job command failed.
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0005,	///< xs:string value="SVC_S00_0005"
/// <PRE><BLOCKQUOTE>
///   Queue command failed.
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0006,	///< xs:string value="SVC_S00_0006"
/// <PRE><BLOCKQUOTE>
///   Service unable to connect to device endpoint.
///   REST Status: 502 Bad Gateway
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0007,	///< xs:string value="SVC_S00_0007"
/// <PRE><BLOCKQUOTE>
///   Job queue is full, locked or stopped. No new jobs are being accepted.
///   REST Status: 503 Service Unavailable
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0008,	///< xs:string value="SVC_S00_0008"
/// <PRE><BLOCKQUOTE>
///   Job ended with a failure.
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0009,	///< xs:string value="SVC_S00_0009"
/// <PRE><BLOCKQUOTE>
///   Service received no response from device.
///   REST Status: 504 Gateway Timeout
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0010,	///< xs:string value="SVC_S00_0010"
/// <PRE><BLOCKQUOTE>
///   Service received an exception from device. See description or exception detail.
///   REST Status: 502 Bad Gateway
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0011,	///< xs:string value="SVC_S00_0011"
/// <PRE><BLOCKQUOTE>
///   Service received an unknown or an internal error from device. See description for error detail.
///   REST Status: 502 Bad Gateway
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0012,	///< xs:string value="SVC_S00_0012"
/// <PRE><BLOCKQUOTE>
///   Unable to connect to client's notification service endpoint (replyTo) to send the asynchronous job result notification response.
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0013,	///< xs:string value="SVC_S00_0013"
/// <PRE><BLOCKQUOTE>
///   Unable to connect to client's service endpoint (faultTo) to send the asynchronous job fault response.
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0014,	///< xs:string value="SVC_S00_0014"
/// <PRE><BLOCKQUOTE>
///   Feature not supported.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0015,	///< xs:string value="SVC_S00_0015"
/// <PRE><BLOCKQUOTE>
///   Deadline passed.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0016,	///< xs:string value="SVC_S00_0016"
/// <PRE><BLOCKQUOTE>
///   Time constraints in request cannot be met.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0017,	///< xs:string value="SVC_S00_0017"
/// <PRE><BLOCKQUOTE>
///   Internal or unknown error encountered. See description for error detail.
///   REST Status: 500 Internal Server Error
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0018,	///< xs:string value="SVC_S00_0018"
/// <PRE><BLOCKQUOTE>
///   Version mismatch.
///   REST Status: 412 Precondition Failed
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0019,	///< xs:string value="SVC_S00_0019"
/// <PRE><BLOCKQUOTE>
///   License expired.
///   REST Status: 502 Bad Gateway
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0020,	///< xs:string value="SVC_S00_0020"
/// <PRE><BLOCKQUOTE>
///   Service state conflict.
///   REST Status: 409 Conflict
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0021,	///< xs:string value="SVC_S00_0021"
/// <PRE><BLOCKQUOTE>
///   Operation not allowed.
///   REST Status: 409 Conflict
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SVC_USCORES00_USCORE0022,	///< xs:string value="SVC_S00_0022"
/// <PRE><BLOCKQUOTE>
///   Invalid request, XML format.
///   REST Status: 400 Bad Request
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0001,	///< xs:string value="DAT_S00_0001"
/// <PRE><BLOCKQUOTE>
///   Invalid input media format.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0002,	///< xs:string value="DAT_S00_0002"
/// <PRE><BLOCKQUOTE>
///   Invalid jobID - the supplied jobID does not exist.
///   REST Status: 404 Not Found
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0003,	///< xs:string value="DAT_S00_0003"
/// <PRE><BLOCKQUOTE>
///   Missing required service metadata in request.
///   REST Status: 400 Bad Request
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0004,	///< xs:string value="DAT_S00_0004"
/// <PRE><BLOCKQUOTE>
///   Duplicate jobID detected for new job. REST Status: 409 Conflict
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0005,	///< xs:string value="DAT_S00_0005"
/// <PRE><BLOCKQUOTE>
///   Invalid request parameters.
///   REST Status: 400 Bad Request
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0006,	///< xs:string value="DAT_S00_0006"
/// <PRE><BLOCKQUOTE>
///   Job command not valid.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0007,	///< xs:string value="DAT_S00_0007"
/// <PRE><BLOCKQUOTE>
///   Queue command not valid.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0008,	///< xs:string value="DAT_S00_0008"
/// <PRE><BLOCKQUOTE>
///   Invalid priority.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0009,	///< xs:string value="DAT_S00_0009"
/// <PRE><BLOCKQUOTE>
///   Input media not found. Invalid resource URI specified.
///   REST Status: 400 Bad Request
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0010,	///< xs:string value="DAT_S00_0010"
/// <PRE><BLOCKQUOTE>
///   Duplicate resource.
///   REST Status: 409 Conflict
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0011,	///< xs:string value="DAT_S00_0011"
/// <PRE><BLOCKQUOTE>
///   Invalid resource.
///   REST Status: 404 Not Found
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0012,	///< xs:string value="DAT_S00_0012"
/// <PRE><BLOCKQUOTE>
///   Invalid identifier.
///   REST Status: 400 Bad Request
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0013,	///< xs:string value="DAT_S00_0013"
/// <PRE><BLOCKQUOTE>
///   Insufficient data.
///   REST Status: 400 Bad Request
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__DAT_USCORES00_USCORE0014,	///< xs:string value="DAT_S00_0014"
/// <PRE><BLOCKQUOTE>
///   Extended code. See extended error code for details.
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__EXT_USCORES00_USCORE0000,	///< xs:string value="EXT_S00_0000"
/// <PRE><BLOCKQUOTE>
///   Invalid credential.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SEC_USCORES00_USCORE0001,	///< xs:string value="SEC_S00_0001"
/// <PRE><BLOCKQUOTE>
///   Credential required.
///   REST Status: 401 Unauthorized
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SEC_USCORES00_USCORE0002,	///< xs:string value="SEC_S00_0002"
/// <PRE><BLOCKQUOTE>
///   Insufficient permission.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SEC_USCORES00_USCORE0003,	///< xs:string value="SEC_S00_0003"
/// <PRE><BLOCKQUOTE>
///   Invalid token.
///   REST Status: 403 Forbidden
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SEC_USCORES00_USCORE0004,	///< xs:string value="SEC_S00_0004"
/// <PRE><BLOCKQUOTE>
///   Missing token.
///   REST Status: 400 Bad Request
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SEC_USCORES00_USCORE0005,	///< xs:string value="SEC_S00_0005"
/// <PRE><BLOCKQUOTE>
///   Resource locked.
///   REST Status: 409 Conflict
/// </BLOCKQUOTE></PRE>
	fims__ErrorCodeType__SEC_USCORES00_USCORE0006,	///< xs:string value="SEC_S00_0006"
};

/// @brief "http://base.fims.tv":JobInfoSelectionType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Whether to return only mandatory elements or all elements.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__JobInfoSelectionType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__JobInfoSelectionType
{

/// </BLOCKQUOTE></PRE>
	fims__JobInfoSelectionType__mandatory,	///< xs:string value="mandatory"

/// </BLOCKQUOTE></PRE>
	fims__JobInfoSelectionType__all,	///< xs:string value="all"
};

/// @brief "http://base.fims.tv":DataTypeType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   This is the simple data type.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__DataTypeType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__DataTypeType
{
/// <PRE><BLOCKQUOTE>
///   Data type indicating length of time either elaspsed or total time of the resource.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__duration,	///< xs:string value="duration"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the use of dateTime format.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__dateTime,	///< xs:string value="dateTime"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the current time.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__time,	///< xs:string value="time"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the current date.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__date,	///< xs:string value="date"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the current month and year.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__gYearMonth,	///< xs:string value="gYearMonth"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the current year.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__gYear,	///< xs:string value="gYear"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the current day and month.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__gMonthDay,	///< xs:string value="gMonthDay"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the current day.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__gDay,	///< xs:string value="gDay"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the current month.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__gMonth,	///< xs:string value="gMonth"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a true (1) or false (0) value.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__boolean,	///< xs:string value="boolean"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the use of Base 64 Binary. Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__base64Binary,	///< xs:string value="base64Binary"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a hex binary data format that uses the radix-16 representation.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__hexBinary,	///< xs:string value="hexBinary"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the use of Float. This is a single precision floating-point type.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__float_,	///< xs:string value="float"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the use of Double. This is a double precision floating-point type.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__double_,	///< xs:string value="double"
/// <PRE><BLOCKQUOTE>
///   Data type indicating the use of a Universal Resource Identifier formatted string.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__anyURI,	///< xs:string value="anyURI"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a decimal format that uses the radix-10 representation.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__decimal,	///< xs:string value="decimal"
/// <PRE><BLOCKQUOTE>
///   Data type indicating an integer which is a number that can be written without a fractional or decimal component.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__integer,	///< xs:string value="integer"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a non-positive integer which is a number that can be written without a fractional or decimal component (less than or equal to 0).
///   The set of integers is a subset of the real numbers, and consists of the whole negatives of natural numbers including zero (0, 1, 2, 3, ...).
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__nonPositiveInteger,	///< xs:string value="nonPositiveInteger"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a non-negative integer which is a number that can be written without a fractional or decimal component (greater than or equal to 0).
///   The set of integers is a subset of the real numbers, and consists of the whole numbers including zero (0, 1, 2, 3, ...).
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__nonNegativeInteger,	///< xs:string value="nonNegativeInteger"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a long signed integer type. At least 32 bits in size.
///   A long integer can represent a whole integer number whose range is greater than or equal to that of a standard integer on the same machine.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__long_,	///< xs:string value="long"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a positive integer which is a number that can be written without a fractional or decimal component. The set of integers is a subset of the real numbers, and consists of the whole numbers (1, 2, 3, ...).
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__positiveInteger,	///< xs:string value="positiveInteger"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a negative integer which is a number that can be written without a fractional or decimal component.
///   The set of integers is a subset of the real numbers, and consists of the whole negatives of the non-zero natural numbers (1, 2, 3, ...).
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__negativeInteger,	///< xs:string value="negativeInteger"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a basic signed integer type. At least 16 bits in size.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__int_,	///< xs:string value="int"
/// <PRE><BLOCKQUOTE>
///   Data type indicating an unsigned long signed integer type, same as long, but unsigned.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__unsignedLong,	///< xs:string value="unsignedLong"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a basic unsigned integer type, same as int, but unsigned.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__unsignedInt,	///< xs:string value="unsignedInt"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a short signed integer type. At least 16 bits in size. A short integer can represent a whole number which may take less storage, while having a smaller range, compared with a standard integer on the same machine.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__short_,	///< xs:string value="short"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a short unsigned integer type, same as short, but unsigned.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__unsignedShort,	///< xs:string value="unsignedShort"
/// <PRE><BLOCKQUOTE>
///   Data type indicating a signed byte as an addressable unit of data storage (usually 8-bits) large enough to hold any member of the basic character set of the execution environment.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__byte,	///< xs:string value="byte"
/// <PRE><BLOCKQUOTE>
///   Data type indicating an unsigned byte type, same as byte, but unsigned.
/// </BLOCKQUOTE></PRE>
	fims__DataTypeType__unsignedByte,	///< xs:string value="unsignedByte"
};

/// @brief "http://base.fims.tv":BMStatusType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   The Status Type representation for either BM Content Status Type and BM Essence Locator Status Type.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__BMStatusType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__BMStatusType
{
/// <PRE><BLOCKQUOTE>
///   This value indicates the current status of the instance resource is "new".
/// </BLOCKQUOTE></PRE>
	fims__BMStatusType__new_,	///< xs:string value="new"
/// <PRE><BLOCKQUOTE>
///   This value indicates the current status of the instance resource is "online" and active.
/// </BLOCKQUOTE></PRE>
	fims__BMStatusType__online,	///< xs:string value="online"
/// <PRE><BLOCKQUOTE>
///   This value indicates the current status of the instance resource is "offline" and inactive.
/// </BLOCKQUOTE></PRE>
	fims__BMStatusType__offline,	///< xs:string value="offline"
/// <PRE><BLOCKQUOTE>
///   This value indicates the current status of the instance resource is "removed" and marked for purge.
/// </BLOCKQUOTE></PRE>
	fims__BMStatusType__removed,	///< xs:string value="removed"
/// <PRE><BLOCKQUOTE>
///   This value indicates the current status of the instance resource has been "purged" and is no longer accessible.
/// </BLOCKQUOTE></PRE>
	fims__BMStatusType__purged,	///< xs:string value="purged"
/// <PRE><BLOCKQUOTE>
///   This value indicates the current status of the instance resource is "invalid" and may be corrupt.
/// </BLOCKQUOTE></PRE>
	fims__BMStatusType__invalid,	///< xs:string value="invalid"
/// <PRE><BLOCKQUOTE>
///   This value indicates the current status of the instance resource is "processing" and currently changing state.
/// </BLOCKQUOTE></PRE>
	fims__BMStatusType__processing,	///< xs:string value="processing"
};

/// @brief "http://base.fims.tv":QueryGroupOperatorType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   The Query Group Operator Type declaration.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__QueryGroupOperatorType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__QueryGroupOperatorType
{
/// <PRE><BLOCKQUOTE>
///   The Query Group Operator "and" operator attribute.
/// </BLOCKQUOTE></PRE>
	fims__QueryGroupOperatorType__and_,	///< xs:string value="and"
/// <PRE><BLOCKQUOTE>
///   The Query Group Operator "or" operator attribute.
/// </BLOCKQUOTE></PRE>
	fims__QueryGroupOperatorType__or_,	///< xs:string value="or"
};

/// @brief "http://base.fims.tv":QueryParameterOperatorType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Operator Type declaration.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__QueryParameterOperatorType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__QueryParameterOperatorType
{
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Operator "equal to" test attribute.
/// </BLOCKQUOTE></PRE>
	fims__QueryParameterOperatorType__equal,	///< xs:string value="equal"
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Operator "not equal to" test attribute.
/// </BLOCKQUOTE></PRE>
	fims__QueryParameterOperatorType__notEqual,	///< xs:string value="notEqual"
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Operator "greater than" test attribute.
/// </BLOCKQUOTE></PRE>
	fims__QueryParameterOperatorType__greater,	///< xs:string value="greater"
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Operator "less than" test attribute.
/// </BLOCKQUOTE></PRE>
	fims__QueryParameterOperatorType__less,	///< xs:string value="less"
};

/// @brief "http://base.fims.tv":EventType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Describes the event type based on the enumeration.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__EventType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__EventType
{
/// <PRE><BLOCKQUOTE>
///   The Event Type System enumeration.
/// </BLOCKQUOTE></PRE>
	fims__EventType__system,	///< xs:string value="system"
/// <PRE><BLOCKQUOTE>
///   The Event Type Content enumeration.
/// </BLOCKQUOTE></PRE>
	fims__EventType__content,	///< xs:string value="content"
};

/// @brief "http://base.fims.tv":EventSubType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Indicates the Event Sub Type enumeration.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__EventSubType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__EventSubType
{
/// <PRE><BLOCKQUOTE>
///   Indicates a "system exception" occurred.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__systemException,	///< xs:string value="systemException"
/// <PRE><BLOCKQUOTE>
///   Indicates a "system performance" event type.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__systemPerformance,	///< xs:string value="systemPerformance"
/// <PRE><BLOCKQUOTE>
///   Indicates a "created" event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__created,	///< xs:string value="created"
/// <PRE><BLOCKQUOTE>
///   Indicates a "removed" and ready to be purged event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__removed,	///< xs:string value="removed"
/// <PRE><BLOCKQUOTE>
///   Indicates a "purged" and is no longer available event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__purged,	///< xs:string value="purged"
/// <PRE><BLOCKQUOTE>
///   Indicates a "relocated" event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__relocated,	///< xs:string value="relocated"
/// <PRE><BLOCKQUOTE>
///   Indicates a "new format available" event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__newFormatAvailable,	///< xs:string value="newFormatAvailable"
/// <PRE><BLOCKQUOTE>
///   Indicates a "copied" event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__copied,	///< xs:string value="copied"
/// <PRE><BLOCKQUOTE>
///   Indicates a "qced" event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__qced,	///< xs:string value="qced"
/// <PRE><BLOCKQUOTE>
///   Indicates a "modified" event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__modified,	///< xs:string value="modified"
/// <PRE><BLOCKQUOTE>
///   Indicates a "custom" event.
/// </BLOCKQUOTE></PRE>
	fims__EventSubType__custom,	///< xs:string value="custom"
};

/// @brief "http://base.fims.tv":EventClassificationType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   The Event Classification Type declaration.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "fims__EventClassificationType" to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum fims__EventClassificationType
{
/// <PRE><BLOCKQUOTE>
///   Indicates the "error" classification level.
/// </BLOCKQUOTE></PRE>
	fims__EventClassificationType__error,	///< xs:string value="error"
/// <PRE><BLOCKQUOTE>
///   Indicates the "warning" classification level.
/// </BLOCKQUOTE></PRE>
	fims__EventClassificationType__warning,	///< xs:string value="warning"
/// <PRE><BLOCKQUOTE>
///   Indicates the "information" classification level.
/// </BLOCKQUOTE></PRE>
	fims__EventClassificationType__information,	///< xs:string value="information"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://baseTime.fims.tv                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://baseTime.fims.tv":Timecode is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   A SMPTE ST 12-1 timecode value formatted
///   according to the edit decision list grammar specified in SMPTE ST 258. In this grammar,
///   the punctuation character between the seconds and frames of the timecode indicates whether
///   the timecode is a drop frame or non drop frame timecode, e.g. 10:11:12;13 is a drop frame
///   timecode value and 10:11:12:13 is a non-drop frame timecode value.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
/// Content pattern is "(([0-1][0-9])|([2][0-3])):[0-5][0-9]:[0-5][0-9](([.,])|([:;]))[0-2][0-9]".
typedef std::wstring fimstime__Timecode "(([0-1][0-9])|([2][0-3])):[0-5][0-9]:[0-5][0-9](([.,])|([:;]))[0-2][0-9]";

/// @brief "http://baseTime.fims.tv":TimecodeDuration is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   A representation of AV duration as a
///   SMPTE timecode-like value, with an upper bound of 99 hours rather than 23 hours.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
/// Content pattern is "[0-9][0-9]:[0-5][0-9]:[0-5][0-9](([.,])|([:;]))[0-2][0-9]".
typedef std::wstring fimstime__TimecodeDuration "[0-9][0-9]:[0-5][0-9]:[0-5][0-9](([.,])|([:;]))[0-2][0-9]";


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://description.fims.tv                                               *
 *                                                                            *
\******************************************************************************/

/// @brief "http://base.fims.tv":ResourceIDType is a simpleType restriction of XSD type "http://base.fims.tv":UID.
///
/// <PRE><BLOCKQUOTE>
///   This type provides a unique way to identify a resource.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
typedef fims__UID fims__ResourceIDType;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://baseTime.fims.tv                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://description.fims.tv                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://baseTime.fims.tv                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://description.fims.tv                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://temp/edlprovider                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://temp/edlprovider":ArrayOfstring is a complexType.
///
/// class edlprovider__ArrayOfstring operations:
/// - soap_new_edlprovider__ArrayOfstring(soap*) allocate
/// - soap_new_edlprovider__ArrayOfstring(soap*, int num) allocate array
/// - soap_new_req_edlprovider__ArrayOfstring(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__ArrayOfstring(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__ArrayOfstring(soap*, edlprovider__ArrayOfstring*) deserialize from a stream
/// - int soap_write_edlprovider__ArrayOfstring(soap, edlprovider__ArrayOfstring*) serialize to a stream
class edlprovider__ArrayOfstring
{ public:
/// Vector of std::wstring of length 0..unbounded.
    std::vector<std::wstring           > string                         0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://temp/edlprovider":ArrayOfClips is a complexType.
///
/// class edlprovider__ArrayOfClips operations:
/// - soap_new_edlprovider__ArrayOfClips(soap*) allocate
/// - soap_new_edlprovider__ArrayOfClips(soap*, int num) allocate array
/// - soap_new_req_edlprovider__ArrayOfClips(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__ArrayOfClips(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__ArrayOfClips(soap*, edlprovider__ArrayOfClips*) deserialize from a stream
/// - int soap_write_edlprovider__ArrayOfClips(soap, edlprovider__ArrayOfClips*) serialize to a stream
class edlprovider__ArrayOfClips
{ public:
/// Vector of edlprovider__ClipType* of length 0..unbounded.
    std::vector<edlprovider__ClipType* > clips                          0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://temp/edlprovider":ClipType is a complexType.
///
/// class edlprovider__ClipType operations:
/// - soap_new_edlprovider__ClipType(soap*) allocate
/// - soap_new_edlprovider__ClipType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__ClipType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__ClipType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__ClipType(soap*, edlprovider__ClipType*) deserialize from a stream
/// - int soap_write_edlprovider__ClipType(soap, edlprovider__ClipType*) serialize to a stream
class edlprovider__ClipType
{ public:
/// Element "markIn" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  markIn                         1;	///< Required element.
/// Element "markOut" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  markOut                        1;	///< Required element.
/// Element "clipInfo" of XSD type "http://base.fims.tv":BMObjectType.
    fims__BMObjectType*                  clipInfo                       1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://temp/edlprovider":MapItemType is a complexType.
///
/// class edlprovider__MapItemType operations:
/// - soap_new_edlprovider__MapItemType(soap*) allocate
/// - soap_new_edlprovider__MapItemType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__MapItemType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__MapItemType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__MapItemType(soap*, edlprovider__MapItemType*) deserialize from a stream
/// - int soap_write_edlprovider__MapItemType(soap, edlprovider__MapItemType*) serialize to a stream
class edlprovider__MapItemType
{ public:
/// Element "edlType" of XSD type xs:string.
    std::wstring                         edlType                        1;	///< Required element.
/// Element "edlExtension" of XSD type xs:string.
    std::wstring                         edlExtension                   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://temp/edlprovider":EdlCreateRequestBaseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the request to create a EDL for the specified type.
/// </BLOCKQUOTE></PRE>
/// class edlprovider__EdlCreateRequestBaseType operations:
/// - soap_new_edlprovider__EdlCreateRequestBaseType(soap*) allocate
/// - soap_new_edlprovider__EdlCreateRequestBaseType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__EdlCreateRequestBaseType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__EdlCreateRequestBaseType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__EdlCreateRequestBaseType(soap*, edlprovider__EdlCreateRequestBaseType*) deserialize from a stream
/// - int soap_write_edlprovider__EdlCreateRequestBaseType(soap, edlprovider__EdlCreateRequestBaseType*) serialize to a stream
class edlprovider__EdlCreateRequestBaseType
{ public:
/// <PRE><BLOCKQUOTE>
///   The EDL type to generate, the types available can be obtained using getInstalledEdls.
/// </BLOCKQUOTE></PRE>
/// Element "edlType" of XSD type xs:string.
    std::wstring                         edlType                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of clips to include in the created EDL.
/// </BLOCKQUOTE></PRE>
/// Element "clips" of XSD type "http://temp/edlprovider":ArrayOfClips.
    edlprovider__ArrayOfClips*           clips                          0;	///< Nillable pointer.
/// <PRE><BLOCKQUOTE>
///   The EDL sequence name. This might mean something different in different EDL's.
/// </BLOCKQUOTE></PRE>
/// Element "edlSequenceName" of XSD type xs:string.
    std::wstring*                        edlSequenceName                0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://temp/edlprovider":EdlCreateResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the response when an EDL is created.
/// </BLOCKQUOTE></PRE>
/// class edlprovider__EdlCreateResponseType operations:
/// - soap_new_edlprovider__EdlCreateResponseType(soap*) allocate
/// - soap_new_edlprovider__EdlCreateResponseType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__EdlCreateResponseType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__EdlCreateResponseType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__EdlCreateResponseType(soap*, edlprovider__EdlCreateResponseType*) deserialize from a stream
/// - int soap_write_edlprovider__EdlCreateResponseType(soap, edlprovider__EdlCreateResponseType*) serialize to a stream
class edlprovider__EdlCreateResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   The EDL data contents.
/// </BLOCKQUOTE></PRE>
/// Element "getEdlResult" of XSD type xs:base64Binary.
    xsd__base64Binary*                   getEdlResult                   0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://temp/edlprovider":InstalledEdlsResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the response when checking which EDL types are available in the service.
/// </BLOCKQUOTE></PRE>
/// class edlprovider__InstalledEdlsResponseType operations:
/// - soap_new_edlprovider__InstalledEdlsResponseType(soap*) allocate
/// - soap_new_edlprovider__InstalledEdlsResponseType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__InstalledEdlsResponseType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__InstalledEdlsResponseType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__InstalledEdlsResponseType(soap*, edlprovider__InstalledEdlsResponseType*) deserialize from a stream
/// - int soap_write_edlprovider__InstalledEdlsResponseType(soap, edlprovider__InstalledEdlsResponseType*) serialize to a stream
class edlprovider__InstalledEdlsResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   A key/pair value of EDL types together with their recommended file extension.
///   The extensions can be different than the recommended, but some programs will not be able to import the files.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://temp/edlprovider:""http://temp/edlprovider":Map.
    _edlprovider__Map*                   edlprovider__Map               1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://temp/edlprovider":Map
/// @brief "http://temp/edlprovider":Map is a complexType.
///
/// class _edlprovider__Map operations:
/// - soap_new__edlprovider__Map(soap*) allocate
/// - soap_new__edlprovider__Map(soap*, int num) allocate array
/// - soap_new_req__edlprovider__Map(soap*, ...) allocate, set required members
/// - soap_new_set__edlprovider__Map(soap*, ...) allocate, set all public members
/// - int soap_read__edlprovider__Map(soap*, _edlprovider__Map*) deserialize from a stream
/// - int soap_write__edlprovider__Map(soap, _edlprovider__Map*) serialize to a stream
class _edlprovider__Map
{ public:
/// Vector of edlprovider__MapItemType* of length 0..unbounded.
    std::vector<edlprovider__MapItemType*> item                           0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://base.fims.tv                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief "http://base.fims.tv":ExtensionGroup is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Each Type includes an ExtensionGroup to allow for vendor-specific extensions, but the definition is out of scope of the FIMS specification.
/// </BLOCKQUOTE></PRE>
/// class fims__ExtensionGroup operations:
/// - soap_new_fims__ExtensionGroup(soap*) allocate
/// - soap_new_fims__ExtensionGroup(soap*, int num) allocate array
/// - soap_new_req_fims__ExtensionGroup(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ExtensionGroup(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ExtensionGroup(soap*, fims__ExtensionGroup*) deserialize from a stream
/// - int soap_write_fims__ExtensionGroup(soap, fims__ExtensionGroup*) serialize to a stream
class fims__ExtensionGroup
{ public:
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ExtensionAttributes is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Each Type includes an ExtensionAttributes to allow for vendor-specific extensions, but the definition is out of scope of the FIMS specification.
/// </BLOCKQUOTE></PRE>
/// class fims__ExtensionAttributes operations:
/// - soap_new_fims__ExtensionAttributes(soap*) allocate
/// - soap_new_fims__ExtensionAttributes(soap*, int num) allocate array
/// - soap_new_req_fims__ExtensionAttributes(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ExtensionAttributes(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ExtensionAttributes(soap*, fims__ExtensionAttributes*) deserialize from a stream
/// - int soap_write_fims__ExtensionAttributes(soap, fims__ExtensionAttributes*) serialize to a stream
class fims__ExtensionAttributes
{ public:
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ResourceReferenceType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The source or target of a reference to a distinct resource. Resources include queues, jobs, assets, descriptions, formats, and profiles.
/// </BLOCKQUOTE></PRE>
/// class fims__ResourceReferenceType operations:
/// - soap_new_fims__ResourceReferenceType(soap*) allocate
/// - soap_new_fims__ResourceReferenceType(soap*, int num) allocate array
/// - soap_new_req_fims__ResourceReferenceType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ResourceReferenceType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ResourceReferenceType(soap*, fims__ResourceReferenceType*) deserialize from a stream
/// - int soap_write_fims__ResourceReferenceType(soap, fims__ResourceReferenceType*) serialize to a stream
class fims__ResourceReferenceType
{ public:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ExtensionBaseType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Abstract type containing the extension group and extension attributes concepts.
/// </BLOCKQUOTE></PRE>
/// class fims__ExtensionBaseType operations:
/// - soap_new_fims__ExtensionBaseType(soap*) allocate
/// - soap_new_fims__ExtensionBaseType(soap*, int num) allocate array
/// - soap_new_req_fims__ExtensionBaseType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ExtensionBaseType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ExtensionBaseType(soap*, fims__ExtensionBaseType*) deserialize from a stream
/// - int soap_write_fims__ExtensionBaseType(soap, fims__ExtensionBaseType*) serialize to a stream
class fims__ExtensionBaseType
{ public:
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":AsyncEndpointType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Provides endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// class fims__AsyncEndpointType operations:
/// - soap_new_fims__AsyncEndpointType(soap*) allocate
/// - soap_new_fims__AsyncEndpointType(soap*, int num) allocate array
/// - soap_new_req_fims__AsyncEndpointType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__AsyncEndpointType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__AsyncEndpointType(soap*, fims__AsyncEndpointType*) deserialize from a stream
/// - int soap_write_fims__AsyncEndpointType(soap, fims__AsyncEndpointType*) serialize to a stream
class fims__AsyncEndpointType
{ public:
/// <PRE><BLOCKQUOTE>
///   Endpoint where the service sends notifications indicating the successful termination or cancellation of a job. Depending on the invoking client or business process, the endpoint for "faultTo" can be the same as the "replyTo" or it can be different.
/// </BLOCKQUOTE></PRE>
/// Element "replyTo" of XSD type xs:anyURI.
    xsd__anyURI                          replyTo                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Endpoint where the service sends the fault notification indicating the failure of a job. Depending on the invoking client or business process, the endpoint for "faultTo" can be the
///   same as the "replyTo" or it can be different.
/// </BLOCKQUOTE></PRE>
/// Element "faultTo" of XSD type xs:anyURI.
    xsd__anyURI                          faultTo                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":AncillaryDataFormatType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Ancillary data packet type. See SMPTE ST 291 and SMPTE ST 436.
/// </BLOCKQUOTE></PRE>
/// class fims__AncillaryDataFormatType operations:
/// - soap_new_fims__AncillaryDataFormatType(soap*) allocate
/// - soap_new_fims__AncillaryDataFormatType(soap*, int num) allocate array
/// - soap_new_req_fims__AncillaryDataFormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__AncillaryDataFormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__AncillaryDataFormatType(soap*, fims__AncillaryDataFormatType*) deserialize from a stream
/// - int soap_write_fims__AncillaryDataFormatType(soap, fims__AncillaryDataFormatType*) serialize to a stream
class fims__AncillaryDataFormatType
{ public:
/// <PRE><BLOCKQUOTE>
///   ANC DID value.
/// </BLOCKQUOTE></PRE>
/// Element "DID" of XSD type xs:integer.
    xsd__integer*                        DID                            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   ANC SDID value.
/// </BLOCKQUOTE></PRE>
/// Element "SDID" of XSD type xs:integer.
    xsd__integer*                        SDID                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Video line number containing the ANC packets of this type.
/// </BLOCKQUOTE></PRE>
/// Element "lineNumber" of XSD type xs:integer.
    xsd__integer*                        lineNumber                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates HANC or VANC, and what field in which packets should be stored. See SMPTE ST 436 for legal values.
/// </BLOCKQUOTE></PRE>
/// Element "wrappingType" of XSD type xs:integer.
    xsd__integer*                        wrappingType                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMTrackType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Tracks expose the underlying structural metadata of the content streams embedded inside a physical content essence. Examples of tracks are the separate audio and video streams inside an audiovisual content essence. Tracks have a category, for example "main" (videoTrack), "audioDescription" (audioTrack), "closed captioning" (dataTrack). Tracks have also an identifier and a description.
/// </BLOCKQUOTE></PRE>
/// class fims__BMTrackType operations:
/// - soap_new_fims__BMTrackType(soap*) allocate
/// - soap_new_fims__BMTrackType(soap*, int num) allocate array
/// - soap_new_req_fims__BMTrackType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMTrackType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMTrackType(soap*, fims__BMTrackType*) deserialize from a stream
/// - int soap_write_fims__BMTrackType(soap, fims__BMTrackType*) serialize to a stream
class fims__BMTrackType
{ public:
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Identifier of the track.
/// </BLOCKQUOTE></PRE>
/// Attribute "trackID" of XSD type "http://base.fims.tv":UID.
   @fims__UID*                           trackID                        0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Name for the track.
/// </BLOCKQUOTE></PRE>
/// Attribute "trackName" of XSD type xs:string.
   @std::wstring*                        trackName                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Language of the track, such as the primary spoken language for an audio track.
/// </BLOCKQUOTE></PRE>
/// Attribute "language" of XSD type xs:language.
   @xsd__language*                       language                       0;	///< Optional attribute.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CodecType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes a codec used for video or audio encoding.
/// </BLOCKQUOTE></PRE>
/// class fims__CodecType operations:
/// - soap_new_fims__CodecType(soap*) allocate
/// - soap_new_fims__CodecType(soap*, int num) allocate array
/// - soap_new_req_fims__CodecType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CodecType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CodecType(soap*, fims__CodecType*) deserialize from a stream
/// - int soap_write_fims__CodecType(soap, fims__CodecType*) serialize to a stream
class fims__CodecType
{ public:
/// <PRE><BLOCKQUOTE>
///   Name of the hardware or software codec.
/// </BLOCKQUOTE></PRE>
/// Element "name" of XSD type xs:string.
    std::wstring*                        name                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The vendor/organization that produced the codec.
/// </BLOCKQUOTE></PRE>
/// Element "vendor" of XSD type xs:string.
    std::wstring*                        vendor                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Version of the specific release of the codec.
/// </BLOCKQUOTE></PRE>
/// Element "version" of XSD type xs:string.
    std::wstring*                        version                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Codec family, e.g. MPEG-2, H.264, etc.
/// </BLOCKQUOTE></PRE>
/// Element "family" of XSD type xs:string.
    std::wstring*                        family                         0;	///< Optional element.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":TransferAtomType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Parameters specific to transfer media services that can be re-used for other services. Note: Some parameters might be added to the atom in future version to specify network resource utilization, a list of acceptable transfer mechanisms, or additional security options including whether the received files should be checked against a fingerprint and whether they are encrypted.
/// </BLOCKQUOTE></PRE>
/// class fims__TransferAtomType operations:
/// - soap_new_fims__TransferAtomType(soap*) allocate
/// - soap_new_fims__TransferAtomType(soap*, int num) allocate array
/// - soap_new_req_fims__TransferAtomType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__TransferAtomType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__TransferAtomType(soap*, fims__TransferAtomType*) deserialize from a stream
/// - int soap_write_fims__TransferAtomType(soap, fims__TransferAtomType*) serialize to a stream
class fims__TransferAtomType
{ public:
/// <PRE><BLOCKQUOTE>
///   Destination path for the target.
/// </BLOCKQUOTE></PRE>
/// Element "destination" of XSD type xs:anyURI.
    xsd__anyURI                          destination                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":TransformAtomType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Parameters specific to the transform media service that can be re-used by other services. Note: Some parameters might be added to this type in future version of this specification to specify AV Process, etc.
/// </BLOCKQUOTE></PRE>
/// class fims__TransformAtomType operations:
/// - soap_new_fims__TransformAtomType(soap*) allocate
/// - soap_new_fims__TransformAtomType(soap*, int num) allocate array
/// - soap_new_req_fims__TransformAtomType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__TransformAtomType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__TransformAtomType(soap*, fims__TransformAtomType*) deserialize from a stream
/// - int soap_write_fims__TransformAtomType(soap, fims__TransformAtomType*) serialize to a stream
class fims__TransformAtomType
{ public:
/// <PRE><BLOCKQUOTE>
///   Specifies the output video format. See 'videoFormat' in EBU tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Element "videoFormat" of XSD type "http://base.fims.tv":VideoFormatType.
    fims__VideoFormatType*               videoFormat                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specifies the output audio format. See 'audioFormat' in EBU tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Element "audioFormat" of XSD type "http://base.fims.tv":AudioFormatType.
    fims__AudioFormatType*               audioFormat                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Container/wrapper format of the output file. See "fileFormat" in EBU tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Element "containerFormat" of XSD type "http://base.fims.tv":ContainerFormatType.
    fims__ContainerFormatType*           containerFormat                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":HashType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Provides information on the algorithm used in an integrity check process. It is based on the 'hash' type defined in SMPTE ST 2032.
/// </BLOCKQUOTE></PRE>
/// class fims__HashType operations:
/// - soap_new_fims__HashType(soap*) allocate
/// - soap_new_fims__HashType(soap*, int num) allocate array
/// - soap_new_req_fims__HashType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__HashType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__HashType(soap*, fims__HashType*) deserialize from a stream
/// - int soap_write_fims__HashType(soap, fims__HashType*) serialize to a stream
class fims__HashType
{ public:
/// <PRE><BLOCKQUOTE>
///   The hash function used to hash the content (e.g. CRC32).
/// </BLOCKQUOTE></PRE>
/// Element "hashFunction" of XSD type "http://base.fims.tv":HashFunctionType.
    fims__HashFunctionType*              hashFunction                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Hash (digest) value as a hexadecimal string.
/// </BLOCKQUOTE></PRE>
/// Element "value" of XSD type xs:hexBinary.
    xsd__hexBinary                       value                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ProcessedInfoType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Statistics on the amount of information processed so far. For example in terms of bytes or frames processed.
/// </BLOCKQUOTE></PRE>
/// class fims__ProcessedInfoType operations:
/// - soap_new_fims__ProcessedInfoType(soap*) allocate
/// - soap_new_fims__ProcessedInfoType(soap*, int num) allocate array
/// - soap_new_req_fims__ProcessedInfoType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ProcessedInfoType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ProcessedInfoType(soap*, fims__ProcessedInfoType*) deserialize from a stream
/// - int soap_write_fims__ProcessedInfoType(soap, fims__ProcessedInfoType*) serialize to a stream
class fims__ProcessedInfoType
{ public:
/// <PRE><BLOCKQUOTE>
///   The percentage of job completed. The percentage can be based on one of two metrics: number of bytes processed, or number of frames processed (e.g. for transcoding video files). If the "processedBytesCount" metric is provided, then the percentage is based on number of bytes processed. If the "processedFramesCount" metric is provided, then the percentage is based on the number of processed frames.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
/// Value range is [0..100].
    xsd__nonNegativeInteger                                            
                                         percentageProcessedCompleted   1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":StartProcessType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Kinds of time, time code, or event based information used to start a real-time process such as a capture process.
/// </BLOCKQUOTE></PRE>
/// class fims__StartProcessType operations:
/// - soap_new_fims__StartProcessType(soap*) allocate
/// - soap_new_fims__StartProcessType(soap*, int num) allocate array
/// - soap_new_req_fims__StartProcessType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartProcessType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartProcessType(soap*, fims__StartProcessType*) deserialize from a stream
/// - int soap_write_fims__StartProcessType(soap, fims__StartProcessType*) serialize to a stream
class fims__StartProcessType
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":StopProcessType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Kind of time, time code, or event information used to stop a real-time process, such as a capture process.
/// </BLOCKQUOTE></PRE>
/// class fims__StopProcessType operations:
/// - soap_new_fims__StopProcessType(soap*) allocate
/// - soap_new_fims__StopProcessType(soap*, int num) allocate array
/// - soap_new_req_fims__StopProcessType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StopProcessType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StopProcessType(soap*, fims__StopProcessType*) deserialize from a stream
/// - int soap_write_fims__StopProcessType(soap, fims__StopProcessType*) serialize to a stream
class fims__StopProcessType
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":StartJobType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   Kinds of time when a job is required to start.
/// </BLOCKQUOTE></PRE>
/// class fims__StartJobType operations:
/// - soap_new_fims__StartJobType(soap*) allocate
/// - soap_new_fims__StartJobType(soap*, int num) allocate array
/// - soap_new_req_fims__StartJobType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartJobType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartJobType(soap*, fims__StartJobType*) deserialize from a stream
/// - int soap_write_fims__StartJobType(soap, fims__StartJobType*) serialize to a stream
class fims__StartJobType
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ManageJobRequestType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   FIMS service common mechanism to manage jobs and update jobs properties, including job priority. The manage job request uses
///   the jobCommand to set the intent of the command (acting on the job state).
/// </BLOCKQUOTE></PRE>
/// class fims__ManageJobRequestType operations:
/// - soap_new_fims__ManageJobRequestType(soap*) allocate
/// - soap_new_fims__ManageJobRequestType(soap*, int num) allocate array
/// - soap_new_req_fims__ManageJobRequestType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ManageJobRequestType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ManageJobRequestType(soap*, fims__ManageJobRequestType*) deserialize from a stream
/// - int soap_write_fims__ManageJobRequestType(soap, fims__ManageJobRequestType*) serialize to a stream
class fims__ManageJobRequestType
{ public:
/// <PRE><BLOCKQUOTE>
///   Resource identifier of the job to be managed.
/// </BLOCKQUOTE></PRE>
/// Element "jobID" of XSD type "http://base.fims.tv":UID.
    fims__UID                            jobID                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Action to perform on the job.
/// </BLOCKQUOTE></PRE>
/// Element "jobCommand" of XSD type "http://base.fims.tv":JobCommandType.
    enum fims__JobCommandType            jobCommand                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   New priority for the job.
/// </BLOCKQUOTE></PRE>
/// Element "priority" of XSD type "http://base.fims.tv":PriorityType.
    enum fims__PriorityType*             priority                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ManageJobResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This type provides job status as a response to a job management request (e.g. pausing a job).
/// </BLOCKQUOTE></PRE>
/// class fims__ManageJobResponseType operations:
/// - soap_new_fims__ManageJobResponseType(soap*) allocate
/// - soap_new_fims__ManageJobResponseType(soap*, int num) allocate array
/// - soap_new_req_fims__ManageJobResponseType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ManageJobResponseType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ManageJobResponseType(soap*, fims__ManageJobResponseType*) deserialize from a stream
/// - int soap_write_fims__ManageJobResponseType(soap, fims__ManageJobResponseType*) serialize to a stream
class fims__ManageJobResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   Job status as a response to a job management request.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://base.fims.tv:""http://base.fims.tv":job.
    fims__JobType*                       job                            1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ManageQueueRequestType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This type provides a mechanism to manage a queue, for example checking the status of the queue, stopping and starting the queue and locking the queue. The queue management request uses the queueCommand to set the intent of the command (requesting status or acting on the queue state).
/// </BLOCKQUOTE></PRE>
/// class fims__ManageQueueRequestType operations:
/// - soap_new_fims__ManageQueueRequestType(soap*) allocate
/// - soap_new_fims__ManageQueueRequestType(soap*, int num) allocate array
/// - soap_new_req_fims__ManageQueueRequestType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ManageQueueRequestType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ManageQueueRequestType(soap*, fims__ManageQueueRequestType*) deserialize from a stream
/// - int soap_write_fims__ManageQueueRequestType(soap, fims__ManageQueueRequestType*) serialize to a stream
class fims__ManageQueueRequestType
{ public:
/// <PRE><BLOCKQUOTE>
///   Identifier for the queue, required for services with more than one queue. Note: FIMS 1.0 does not
///   allow more than one queue per service.
/// </BLOCKQUOTE></PRE>
/// Element "queueID" of XSD type "http://base.fims.tv":UID.
    fims__UID*                           queueID                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This element specifies the intent of the command. Possible values for the command are listed in QueueCommandType.
/// </BLOCKQUOTE></PRE>
/// Element "queueCommand" of XSD type "http://base.fims.tv":QueueCommandType.
    enum fims__QueueCommandType          queueCommand                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ManageQueueResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This type represents a response to a queue management request. It provides information such as the status and the length of queue.
/// </BLOCKQUOTE></PRE>
/// class fims__ManageQueueResponseType operations:
/// - soap_new_fims__ManageQueueResponseType(soap*) allocate
/// - soap_new_fims__ManageQueueResponseType(soap*, int num) allocate array
/// - soap_new_req_fims__ManageQueueResponseType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ManageQueueResponseType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ManageQueueResponseType(soap*, fims__ManageQueueResponseType*) deserialize from a stream
/// - int soap_write_fims__ManageQueueResponseType(soap, fims__ManageQueueResponseType*) serialize to a stream
class fims__ManageQueueResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   Queue information such as the status and the length of queue.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://base.fims.tv:""http://base.fims.tv":queue.
    fims__QueueType*                     queue                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryJobRequestType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is an abstract type to be extended to create types to request status of multiple identified jobs or to list the status of jobs that meet requirements specified by a filter object.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryJobRequestType operations:
/// - soap_new_fims__QueryJobRequestType(soap*) allocate
/// - soap_new_fims__QueryJobRequestType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryJobRequestType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryJobRequestType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryJobRequestType(soap*, fims__QueryJobRequestType*) deserialize from a stream
/// - int soap_write_fims__QueryJobRequestType(soap, fims__QueryJobRequestType*) serialize to a stream
class fims__QueryJobRequestType
{ public:
/// <PRE><BLOCKQUOTE>
///   Level of status details to be returned for the jobs.
/// </BLOCKQUOTE></PRE>
/// Element "jobInfoSelection" of XSD type "http://base.fims.tv":JobInfoSelectionType.
    enum fims__JobInfoSelectionType      jobInfoSelection               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryJobResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This type provides a response to QueryJobRequestType. It contains a list of queryJobInfo elements. Furthermore, the response message provided by this type supports a polling interaction pattern for retrieving the status and the response of an asynchronous job request.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryJobResponseType operations:
/// - soap_new_fims__QueryJobResponseType(soap*) allocate
/// - soap_new_fims__QueryJobResponseType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryJobResponseType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryJobResponseType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryJobResponseType(soap*, fims__QueryJobResponseType*) deserialize from a stream
/// - int soap_write_fims__QueryJobResponseType(soap, fims__QueryJobResponseType*) serialize to a stream
class fims__QueryJobResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   List of jobs matching the query parameters.
/// </BLOCKQUOTE></PRE>
/// Element "jobs" of XSD type "http://base.fims.tv":JobsType.
    fims__JobsType*                      jobs                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This optional element indicates the number of results that were not reported due to the restriction imposed by the maximum number of results specified in the request.
/// </BLOCKQUOTE></PRE>
/// Element "notReportedResultsNumber" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             notReportedResultsNumber       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryServiceDescriptionRequestType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Provides a mechanism to query Service Description.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryServiceDescriptionRequestType operations:
/// - soap_new_fims__QueryServiceDescriptionRequestType(soap*) allocate
/// - soap_new_fims__QueryServiceDescriptionRequestType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryServiceDescriptionRequestType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryServiceDescriptionRequestType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryServiceDescriptionRequestType(soap*, fims__QueryServiceDescriptionRequestType*) deserialize from a stream
/// - int soap_write_fims__QueryServiceDescriptionRequestType(soap, fims__QueryServiceDescriptionRequestType*) serialize to a stream
class fims__QueryServiceDescriptionRequestType
{ public:
/// <PRE><BLOCKQUOTE>
///   Whether the response is required as an embedded description or as a reference.
/// </BLOCKQUOTE></PRE>
@    enum _fims__QueryServiceDescriptionRequestType_responseType
    {
/// <PRE><BLOCKQUOTE>
///   Response is required as a reference to the Service Description.
/// </BLOCKQUOTE></PRE>
	_fims__QueryServiceDescriptionRequestType_responseType__ref,	///< xs:string value="ref"
/// <PRE><BLOCKQUOTE>
///   Response is required as an embedded value with the complete Service Description.
/// </BLOCKQUOTE></PRE>
	_fims__QueryServiceDescriptionRequestType_responseType__value,	///< xs:string value="value"
    }
                                         responseType                   0 = _fims__QueryServiceDescriptionRequestType_responseType__value;	///< Default value="value".
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryServiceDescriptionResponseType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Response to the Service Description query.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryServiceDescriptionResponseType operations:
/// - soap_new_fims__QueryServiceDescriptionResponseType(soap*) allocate
/// - soap_new_fims__QueryServiceDescriptionResponseType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryServiceDescriptionResponseType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryServiceDescriptionResponseType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryServiceDescriptionResponseType(soap*, fims__QueryServiceDescriptionResponseType*) deserialize from a stream
/// - int soap_write_fims__QueryServiceDescriptionResponseType(soap, fims__QueryServiceDescriptionResponseType*) serialize to a stream
class fims__QueryServiceDescriptionResponseType
{ public:
/// <PRE><BLOCKQUOTE>
///   Service Description, embedded or by reference.
/// </BLOCKQUOTE></PRE>
/// Element "service" of XSD type "http://base.fims.tv":ServiceType.
    fims__ServiceType*                   service                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ListFilterType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Specifies a list of jobs to be retrieved. The list includes only jobs that fall in the period of time specified (if provided) and in the specified category (queued, active, completed, or failed).
/// </BLOCKQUOTE></PRE>
/// class fims__ListFilterType operations:
/// - soap_new_fims__ListFilterType(soap*) allocate
/// - soap_new_fims__ListFilterType(soap*, int num) allocate array
/// - soap_new_req_fims__ListFilterType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ListFilterType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ListFilterType(soap*, fims__ListFilterType*) deserialize from a stream
/// - int soap_write_fims__ListFilterType(soap, fims__ListFilterType*) serialize to a stream
class fims__ListFilterType
{ public:
/// <PRE><BLOCKQUOTE>
///   A 'from' date filter. If this element is not specified, the list includes jobs that started at any point in time (that still complies with the 'toDate' field).
/// </BLOCKQUOTE></PRE>
/// Element "fromDate" of XSD type xs:dateTime.
    time_t*                              fromDate                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A 'to' date filter. If this element is not specified, the list includes jobs that started at any point in time (that still complies with the 'fromDate' field).
/// </BLOCKQUOTE></PRE>
/// Element "toDate" of XSD type xs:dateTime.
    time_t*                              toDate                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A flag to indicate job or jobs in the queue.
/// </BLOCKQUOTE></PRE>
/// Element "includeQueued" of XSD type xs:boolean.
    bool                                 includeQueued                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A flag to indicate job or jobs in the 'Running', 'Paused' or 'Unknown' state.
/// </BLOCKQUOTE></PRE>
/// Element "includeActive" of XSD type xs:boolean.
    bool                                 includeActive                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A flag to indicate job or jobs in the 'Completed', 'Stopped' or 'Cleaned' state.
/// </BLOCKQUOTE></PRE>
/// Element "includeFinished" of XSD type xs:boolean.
    bool                                 includeFinished                1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A flag to indicate job or jobs in the 'Failed' state.
/// </BLOCKQUOTE></PRE>
/// Element "includeFailed" of XSD type xs:boolean.
    bool                                 includeFailed                  1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Maximum number of results to be listed.
/// </BLOCKQUOTE></PRE>
/// Element "maxNumberResults" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             maxNumberResults               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":FaultType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Details of a fault. This type can be extended by each service to provide additional error codes.
/// </BLOCKQUOTE></PRE>
/// class fims__FaultType operations:
/// - soap_new_fims__FaultType(soap*) allocate
/// - soap_new_fims__FaultType(soap*, int num) allocate array
/// - soap_new_req_fims__FaultType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__FaultType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__FaultType(soap*, fims__FaultType*) deserialize from a stream
/// - int soap_write_fims__FaultType(soap, fims__FaultType*) serialize to a stream
class fims__FaultType
{ public:
/// <PRE><BLOCKQUOTE>
///   The error code specified in ErrorCodeType.
/// </BLOCKQUOTE></PRE>
/// Element "code" of XSD type "http://base.fims.tv":ErrorCodeType.
    enum fims__ErrorCodeType             code                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An optional description of the error.
/// </BLOCKQUOTE></PRE>
/// Element "description" of XSD type xs:string.
    std::wstring*                        description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This optional field can provide a detailed description of the error.
/// </BLOCKQUOTE></PRE>
/// Element "detail" of XSD type xs:string.
    std::wstring*                        detail                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Additional description of the lower-level errors.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__InnerFaultType* of length 0..unbounded.
    std::vector<fims__InnerFaultType*  > innerFault                     0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":InnerFaultType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Additional description of the lower-level errors.
/// </BLOCKQUOTE></PRE>
/// class fims__InnerFaultType operations:
/// - soap_new_fims__InnerFaultType(soap*) allocate
/// - soap_new_fims__InnerFaultType(soap*, int num) allocate array
/// - soap_new_req_fims__InnerFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__InnerFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__InnerFaultType(soap*, fims__InnerFaultType*) deserialize from a stream
/// - int soap_write_fims__InnerFaultType(soap, fims__InnerFaultType*) serialize to a stream
class fims__InnerFaultType
{ public:
/// <PRE><BLOCKQUOTE>
///   Lower-level error code. This can be any value that is relevant to the appropriate subsystem
/// </BLOCKQUOTE></PRE>
/// Element "code" of XSD type xs:string.
    std::wstring                         code                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Description of lower-level error code.
/// </BLOCKQUOTE></PRE>
/// Element "description" of XSD type xs:string.
    std::wstring*                        description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This optional field can provide a detailed description of the lower-level error.
/// </BLOCKQUOTE></PRE>
/// Element "detail" of XSD type xs:string.
    std::wstring*                        detail                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ResourcesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Resource of the Resource Type.
/// </BLOCKQUOTE></PRE>
/// class fims__ResourcesType operations:
/// - soap_new_fims__ResourcesType(soap*) allocate
/// - soap_new_fims__ResourcesType(soap*, int num) allocate array
/// - soap_new_req_fims__ResourcesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ResourcesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ResourcesType(soap*, fims__ResourcesType*) deserialize from a stream
/// - int soap_write_fims__ResourcesType(soap, fims__ResourcesType*) serialize to a stream
class fims__ResourcesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Resource of the Resource Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ResourceType* element refs of length 1..unbounded.
    std::vector<fims__ResourceType*    > resource                       1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ProfilesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Profile of the Profile Type.
/// </BLOCKQUOTE></PRE>
/// class fims__ProfilesType operations:
/// - soap_new_fims__ProfilesType(soap*) allocate
/// - soap_new_fims__ProfilesType(soap*, int num) allocate array
/// - soap_new_req_fims__ProfilesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ProfilesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ProfilesType(soap*, fims__ProfilesType*) deserialize from a stream
/// - int soap_write_fims__ProfilesType(soap, fims__ProfilesType*) serialize to a stream
class fims__ProfilesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Profile of the Profile Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ProfileType* element refs of length 1..unbounded.
    std::vector<fims__ProfileType*     > profile                        1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ServicesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Service of the Service Type.
/// </BLOCKQUOTE></PRE>
/// class fims__ServicesType operations:
/// - soap_new_fims__ServicesType(soap*) allocate
/// - soap_new_fims__ServicesType(soap*, int num) allocate array
/// - soap_new_req_fims__ServicesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ServicesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ServicesType(soap*, fims__ServicesType*) deserialize from a stream
/// - int soap_write_fims__ServicesType(soap, fims__ServicesType*) serialize to a stream
class fims__ServicesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Service of the Service Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ServiceType* element refs of length 1..unbounded.
    std::vector<fims__ServiceType*     > service                        1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueuesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Queue of the Queue Type.
/// </BLOCKQUOTE></PRE>
/// class fims__QueuesType operations:
/// - soap_new_fims__QueuesType(soap*) allocate
/// - soap_new_fims__QueuesType(soap*, int num) allocate array
/// - soap_new_req_fims__QueuesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueuesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueuesType(soap*, fims__QueuesType*) deserialize from a stream
/// - int soap_write_fims__QueuesType(soap, fims__QueuesType*) serialize to a stream
class fims__QueuesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Queue of the Queue Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__QueueType* element refs of length 1..unbounded.
    std::vector<fims__QueueType*       > queue                          1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":JobsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Job of the Job Type.
/// </BLOCKQUOTE></PRE>
/// class fims__JobsType operations:
/// - soap_new_fims__JobsType(soap*) allocate
/// - soap_new_fims__JobsType(soap*, int num) allocate array
/// - soap_new_req_fims__JobsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__JobsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__JobsType(soap*, fims__JobsType*) deserialize from a stream
/// - int soap_write_fims__JobsType(soap, fims__JobsType*) serialize to a stream
class fims__JobsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Job of the Job Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__JobType* element refs of length 1..unbounded.
    std::vector<fims__JobType*         > job                            1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":VideoFormatsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Video Format of the Video Format Type.
/// </BLOCKQUOTE></PRE>
/// class fims__VideoFormatsType operations:
/// - soap_new_fims__VideoFormatsType(soap*) allocate
/// - soap_new_fims__VideoFormatsType(soap*, int num) allocate array
/// - soap_new_req_fims__VideoFormatsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__VideoFormatsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__VideoFormatsType(soap*, fims__VideoFormatsType*) deserialize from a stream
/// - int soap_write_fims__VideoFormatsType(soap, fims__VideoFormatsType*) serialize to a stream
class fims__VideoFormatsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Video Format of the Video Format Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__VideoFormatType* element refs of length 1..unbounded.
    std::vector<fims__VideoFormatType* > videoFormat                    1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":AudioFormatsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Audio Format of the Audio Format Type.
/// </BLOCKQUOTE></PRE>
/// class fims__AudioFormatsType operations:
/// - soap_new_fims__AudioFormatsType(soap*) allocate
/// - soap_new_fims__AudioFormatsType(soap*, int num) allocate array
/// - soap_new_req_fims__AudioFormatsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__AudioFormatsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__AudioFormatsType(soap*, fims__AudioFormatsType*) deserialize from a stream
/// - int soap_write_fims__AudioFormatsType(soap, fims__AudioFormatsType*) serialize to a stream
class fims__AudioFormatsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Audio Format of the Audio Format Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__AudioFormatType* element refs of length 1..unbounded.
    std::vector<fims__AudioFormatType* > audioFormat                    1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ContainerFormatsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Container Format of the Container Format Type.
/// </BLOCKQUOTE></PRE>
/// class fims__ContainerFormatsType operations:
/// - soap_new_fims__ContainerFormatsType(soap*) allocate
/// - soap_new_fims__ContainerFormatsType(soap*, int num) allocate array
/// - soap_new_req_fims__ContainerFormatsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContainerFormatsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContainerFormatsType(soap*, fims__ContainerFormatsType*) deserialize from a stream
/// - int soap_write_fims__ContainerFormatsType(soap, fims__ContainerFormatsType*) serialize to a stream
class fims__ContainerFormatsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Container Format of the Container Format Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ContainerFormatType* element refs of length 1..unbounded.
    std::vector<fims__ContainerFormatType*> containerFormat                1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":DataFormatsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Data Format of the Data Format Type.
/// </BLOCKQUOTE></PRE>
/// class fims__DataFormatsType operations:
/// - soap_new_fims__DataFormatsType(soap*) allocate
/// - soap_new_fims__DataFormatsType(soap*, int num) allocate array
/// - soap_new_req_fims__DataFormatsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__DataFormatsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__DataFormatsType(soap*, fims__DataFormatsType*) deserialize from a stream
/// - int soap_write_fims__DataFormatsType(soap, fims__DataFormatsType*) serialize to a stream
class fims__DataFormatsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Data Format of the Data Format Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__DataFormatType* element refs of length 1..unbounded.
    std::vector<fims__DataFormatType*  > dataFormat                     1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMObjectsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a BM Object of the BM Object Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMObjectsType operations:
/// - soap_new_fims__BMObjectsType(soap*) allocate
/// - soap_new_fims__BMObjectsType(soap*, int num) allocate array
/// - soap_new_req_fims__BMObjectsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMObjectsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMObjectsType(soap*, fims__BMObjectsType*) deserialize from a stream
/// - int soap_write_fims__BMObjectsType(soap, fims__BMObjectsType*) serialize to a stream
class fims__BMObjectsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a BM Object of the BM Object Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMObjectType* element refs of length 1..unbounded.
    std::vector<fims__BMObjectType*    > bmObject                       1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMContentsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a BM Content of the BM Content Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMContentsType operations:
/// - soap_new_fims__BMContentsType(soap*) allocate
/// - soap_new_fims__BMContentsType(soap*, int num) allocate array
/// - soap_new_req_fims__BMContentsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMContentsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMContentsType(soap*, fims__BMContentsType*) deserialize from a stream
/// - int soap_write_fims__BMContentsType(soap, fims__BMContentsType*) serialize to a stream
class fims__BMContentsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a BM Content of the BM Content Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMContentType* element refs of length 1..unbounded.
    std::vector<fims__BMContentType*   > bmContent                      1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMContentFormatsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a BM Content Format of the BM Content Format Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMContentFormatsType operations:
/// - soap_new_fims__BMContentFormatsType(soap*) allocate
/// - soap_new_fims__BMContentFormatsType(soap*, int num) allocate array
/// - soap_new_req_fims__BMContentFormatsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMContentFormatsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMContentFormatsType(soap*, fims__BMContentFormatsType*) deserialize from a stream
/// - int soap_write_fims__BMContentFormatsType(soap, fims__BMContentFormatsType*) serialize to a stream
class fims__BMContentFormatsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a BM Content Format of the BM Content Format Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMContentFormatType* element refs of length 1..unbounded.
    std::vector<fims__BMContentFormatType*> bmContentFormat                1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMEssenceLocatorsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Essence Locator of the Essence Locator Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMEssenceLocatorsType operations:
/// - soap_new_fims__BMEssenceLocatorsType(soap*) allocate
/// - soap_new_fims__BMEssenceLocatorsType(soap*, int num) allocate array
/// - soap_new_req_fims__BMEssenceLocatorsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMEssenceLocatorsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMEssenceLocatorsType(soap*, fims__BMEssenceLocatorsType*) deserialize from a stream
/// - int soap_write_fims__BMEssenceLocatorsType(soap, fims__BMEssenceLocatorsType*) serialize to a stream
class fims__BMEssenceLocatorsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Essence Locator of the Essence Locator Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMEssenceLocatorType* element refs of length 1..unbounded.
    std::vector<fims__BMEssenceLocatorType*> bmEssenceLocator               1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":DescriptionsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of a Description of the Description Type.
/// </BLOCKQUOTE></PRE>
/// class fims__DescriptionsType operations:
/// - soap_new_fims__DescriptionsType(soap*) allocate
/// - soap_new_fims__DescriptionsType(soap*, int num) allocate array
/// - soap_new_req_fims__DescriptionsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__DescriptionsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__DescriptionsType(soap*, fims__DescriptionsType*) deserialize from a stream
/// - int soap_write_fims__DescriptionsType(soap, fims__DescriptionsType*) serialize to a stream
class fims__DescriptionsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Description of the Description Type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__DescriptionType* element refs of length 1..unbounded.
    std::vector<fims__DescriptionType* > description                    1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ResourceReferencesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the ResourceReferencesType.
/// </BLOCKQUOTE></PRE>
/// class fims__ResourceReferencesType operations:
/// - soap_new_fims__ResourceReferencesType(soap*) allocate
/// - soap_new_fims__ResourceReferencesType(soap*, int num) allocate array
/// - soap_new_req_fims__ResourceReferencesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ResourceReferencesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ResourceReferencesType(soap*, fims__ResourceReferencesType*) deserialize from a stream
/// - int soap_write_fims__ResourceReferencesType(soap, fims__ResourceReferencesType*) serialize to a stream
class fims__ResourceReferencesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is an instance of the Resource Reference.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   This is an instance of a Resource Reference.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ResourceReferenceType* element refs of length 1..unbounded.
    std::vector<fims__ResourceReferenceType*> resourceReference              1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomValueType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   This represents the custom value type.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomValueType operations:
/// - soap_new_fims__CustomValueType(soap*) allocate
/// - soap_new_fims__CustomValueType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomValueType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomValueType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomValueType(soap*, fims__CustomValueType*) deserialize from a stream
/// - int soap_write_fims__CustomValueType(soap, fims__CustomValueType*) serialize to a stream
class fims__CustomValueType
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomValuesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The declaration of the CustomValuesType.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomValuesType operations:
/// - soap_new_fims__CustomValuesType(soap*) allocate
/// - soap_new_fims__CustomValuesType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomValuesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomValuesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomValuesType(soap*, fims__CustomValuesType*) deserialize from a stream
/// - int soap_write_fims__CustomValuesType(soap, fims__CustomValuesType*) serialize to a stream
class fims__CustomValuesType
{ public:
/// <PRE><BLOCKQUOTE>
///   The instance of the Custom Value.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   This is an instance of a custom value.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__CustomValueType* element refs of length 1..unbounded.
    std::vector<fims__CustomValueType* > customValue                    1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMCustomStatusExtensionsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of Custom Status Extensions Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMCustomStatusExtensionsType operations:
/// - soap_new_fims__BMCustomStatusExtensionsType(soap*) allocate
/// - soap_new_fims__BMCustomStatusExtensionsType(soap*, int num) allocate array
/// - soap_new_req_fims__BMCustomStatusExtensionsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMCustomStatusExtensionsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMCustomStatusExtensionsType(soap*, fims__BMCustomStatusExtensionsType*) deserialize from a stream
/// - int soap_write_fims__BMCustomStatusExtensionsType(soap, fims__BMCustomStatusExtensionsType*) serialize to a stream
class fims__BMCustomStatusExtensionsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Custom Status Extension.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a custom status extension type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMCustomStatusExtensionType* element refs of length 1..unbounded.
    std::vector<fims__BMCustomStatusExtensionType*> bmCustomStatusExtension        1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMContentStatusesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Content Statuses Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMContentStatusesType operations:
/// - soap_new_fims__BMContentStatusesType(soap*) allocate
/// - soap_new_fims__BMContentStatusesType(soap*, int num) allocate array
/// - soap_new_req_fims__BMContentStatusesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMContentStatusesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMContentStatusesType(soap*, fims__BMContentStatusesType*) deserialize from a stream
/// - int soap_write_fims__BMContentStatusesType(soap, fims__BMContentStatusesType*) serialize to a stream
class fims__BMContentStatusesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Content Status.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of Content Status.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMContentStatusType* element refs of length 1..unbounded.
    std::vector<fims__BMContentStatusType*> bmContentStatus                1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMEssenceLocatorStatusesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Essence Locator Statuses Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMEssenceLocatorStatusesType operations:
/// - soap_new_fims__BMEssenceLocatorStatusesType(soap*) allocate
/// - soap_new_fims__BMEssenceLocatorStatusesType(soap*, int num) allocate array
/// - soap_new_req_fims__BMEssenceLocatorStatusesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMEssenceLocatorStatusesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMEssenceLocatorStatusesType(soap*, fims__BMEssenceLocatorStatusesType*) deserialize from a stream
/// - int soap_write_fims__BMEssenceLocatorStatusesType(soap, fims__BMEssenceLocatorStatusesType*) serialize to a stream
class fims__BMEssenceLocatorStatusesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Content Status.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of Essence Locator Status.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMEssenceLocatorStatusType* element refs of length 1..unbounded.
    std::vector<fims__BMEssenceLocatorStatusType*> bmEssenceLocatorStatus         1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CredentialType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the credential object that has several attributes to allow access to an instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// class fims__CredentialType operations:
/// - soap_new_fims__CredentialType(soap*) allocate
/// - soap_new_fims__CredentialType(soap*, int num) allocate array
/// - soap_new_req_fims__CredentialType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CredentialType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CredentialType(soap*, fims__CredentialType*) deserialize from a stream
/// - int soap_write_fims__CredentialType(soap, fims__CredentialType*) serialize to a stream
class fims__CredentialType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Username representing the user account for gaining access to a media resource.
/// </BLOCKQUOTE></PRE>
/// Element "userName" of XSD type xs:string.
    std::wstring*                        userName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A secret word or string of characters that is used for user authentication to prove identity for gaining access to a media resource. WARNING: Using this field may allow unencrypted (plain text) passwords to be sent across the network when authenticating. This can lessen the overall security of an environment and should only be done after careful consideration of the consequences of plain text passwords in your specific environment. HTTPS encryption is highly recommended when using this field. It is recommended to leverage security and authentication mechanisms available at HTTP protocol level if supported by service interface implementation until FIMS provide a fully SASL compliant security framework.
/// </BLOCKQUOTE></PRE>
/// Element "password" of XSD type xs:string.
    std::wstring*                        password                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The session token is a piece of data that is used to keep communication state between the user and the instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// Element "sessionToken" of XSD type xs:string.
    std::wstring*                        sessionToken                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CredentialsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Credentials Type.
/// </BLOCKQUOTE></PRE>
/// class fims__CredentialsType operations:
/// - soap_new_fims__CredentialsType(soap*) allocate
/// - soap_new_fims__CredentialsType(soap*, int num) allocate array
/// - soap_new_req_fims__CredentialsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CredentialsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CredentialsType(soap*, fims__CredentialsType*) deserialize from a stream
/// - int soap_write_fims__CredentialsType(soap, fims__CredentialsType*) serialize to a stream
class fims__CredentialsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Credential.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a credential type.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__CredentialType* element refs of length 1..unbounded.
    std::vector<fims__CredentialType*  > credential                     1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":LockTokensType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Lock Tokens Type.
/// </BLOCKQUOTE></PRE>
/// class fims__LockTokensType operations:
/// - soap_new_fims__LockTokensType(soap*) allocate
/// - soap_new_fims__LockTokensType(soap*, int num) allocate array
/// - soap_new_req_fims__LockTokensType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__LockTokensType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__LockTokensType(soap*, fims__LockTokensType*) deserialize from a stream
/// - int soap_write_fims__LockTokensType(soap, fims__LockTokensType*) serialize to a stream
class fims__LockTokensType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Lock Token.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a lock token bound to an instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__LockTokenType* element refs of length 1..unbounded.
    std::vector<fims__LockTokenType*   > lockToken                      1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":SuperLockTokensType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Super Lock Tokens Type.
/// </BLOCKQUOTE></PRE>
/// class fims__SuperLockTokensType operations:
/// - soap_new_fims__SuperLockTokensType(soap*) allocate
/// - soap_new_fims__SuperLockTokensType(soap*, int num) allocate array
/// - soap_new_req_fims__SuperLockTokensType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SuperLockTokensType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SuperLockTokensType(soap*, fims__SuperLockTokensType*) deserialize from a stream
/// - int soap_write_fims__SuperLockTokensType(soap, fims__SuperLockTokensType*) serialize to a stream
class fims__SuperLockTokensType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Super Lock Token.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a Super Lock Token Type that has super locking access to a currently locked instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__SuperLockTokenType* element refs of length 1..unbounded.
    std::vector<fims__SuperLockTokenType*> superLockToken                 1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryExpressionType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Query Expression Type.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryExpressionType operations:
/// - soap_new_fims__QueryExpressionType(soap*) allocate
/// - soap_new_fims__QueryExpressionType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryExpressionType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryExpressionType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryExpressionType(soap*, fims__QueryExpressionType*) deserialize from a stream
/// - int soap_write_fims__QueryExpressionType(soap, fims__QueryExpressionType*) serialize to a stream
class fims__QueryExpressionType
{ public:
//  BEGIN CHOICE <xs:choice minOccurs="1" maxOccurs="1">
   $int                                  __union_QueryExpressionType    1;	///< Union _fims__union_QueryExpressionType selector: set to SOAP_UNION__fims__union_QueryExpressionType_<fieldname>
/// Union for choice in fims__QueryExpressionType.
    union _fims__union_QueryExpressionType
    {
/// <PRE><BLOCKQUOTE>
///   The Query Expression Parameter Type value.
/// </BLOCKQUOTE></PRE>
/// Element "parameter" of XSD type "http://base.fims.tv":QueryParameterType.
    fims__QueryParameterType*            parameter                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Query Expression Group Type value.
/// </BLOCKQUOTE></PRE>
/// Element "group" of XSD type "http://base.fims.tv":QueryGroupType.
    fims__QueryGroupType*                group                          1;	///< Required element.
    }                                    union_QueryExpressionType     ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryExpressionsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Query Expressions Type.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryExpressionsType operations:
/// - soap_new_fims__QueryExpressionsType(soap*) allocate
/// - soap_new_fims__QueryExpressionsType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryExpressionsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryExpressionsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryExpressionsType(soap*, fims__QueryExpressionsType*) deserialize from a stream
/// - int soap_write_fims__QueryExpressionsType(soap, fims__QueryExpressionsType*) serialize to a stream
class fims__QueryExpressionsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Query Expression.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a Query Expression resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__QueryExpressionType* element refs of length 1..unbounded.
    std::vector<fims__QueryExpressionType*> queryExpression                1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomQueryParameterOperatorType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Custom Query Parameter Operator Type.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomQueryParameterOperatorType operations:
/// - soap_new_fims__CustomQueryParameterOperatorType(soap*) allocate
/// - soap_new_fims__CustomQueryParameterOperatorType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomQueryParameterOperatorType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomQueryParameterOperatorType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomQueryParameterOperatorType(soap*, fims__CustomQueryParameterOperatorType*) deserialize from a stream
/// - int soap_write_fims__CustomQueryParameterOperatorType(soap, fims__CustomQueryParameterOperatorType*) serialize to a stream
class fims__CustomQueryParameterOperatorType
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomQueryParameterOperatorsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Custom Query Parameter Operators Type.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomQueryParameterOperatorsType operations:
/// - soap_new_fims__CustomQueryParameterOperatorsType(soap*) allocate
/// - soap_new_fims__CustomQueryParameterOperatorsType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomQueryParameterOperatorsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomQueryParameterOperatorsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomQueryParameterOperatorsType(soap*, fims__CustomQueryParameterOperatorsType*) deserialize from a stream
/// - int soap_write_fims__CustomQueryParameterOperatorsType(soap, fims__CustomQueryParameterOperatorsType*) serialize to a stream
class fims__CustomQueryParameterOperatorsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Custom Query Parameter Operator.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a Custom Query Parameter Operator resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__CustomQueryParameterOperatorType* element refs of length 1..unbounded.
    std::vector<fims__CustomQueryParameterOperatorType*> customQueryParameterOperator   1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryParameterType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Type resource.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryParameterType operations:
/// - soap_new_fims__QueryParameterType(soap*) allocate
/// - soap_new_fims__QueryParameterType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryParameterType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryParameterType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryParameterType(soap*, fims__QueryParameterType*) deserialize from a stream
/// - int soap_write_fims__QueryParameterType(soap, fims__QueryParameterType*) serialize to a stream
class fims__QueryParameterType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Name attribute.
/// </BLOCKQUOTE></PRE>
/// Element "name" of XSD type xs:string.
    std::wstring                         name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Case Sensitive attribute (1=true; 0=false).
/// </BLOCKQUOTE></PRE>
/// Element "caseSensitive" of XSD type xs:boolean.
    bool*                                caseSensitive                  0;	///< Optional element.
//  BEGIN CHOICE <xs:choice minOccurs="0" maxOccurs="1">
   $int                                  __union_QueryParameterType     0;	///< Union _fims__union_QueryParameterType selector: set to SOAP_UNION__fims__union_QueryParameterType_<fieldname> or 0
    union _fims__union_QueryParameterType
    {
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Value attribute.
/// </BLOCKQUOTE></PRE>
/// Element "value" of XSD type xs:string.
    std::wstring*                        value                          1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Custom Value attribute.
/// </BLOCKQUOTE></PRE>
/// Element "customValue" of XSD type "http://base.fims.tv":CustomValueType.
    fims__CustomValueType*               customValue                    1;	///< Required element.
    }                                    union_QueryParameterType      ;
//  END OF CHOICE
//  BEGIN CHOICE <xs:choice minOccurs="1" maxOccurs="1">
   $int                                  __union_QueryParameterType_    1;	///< Union _fims__union_QueryParameterType_ selector: set to SOAP_UNION__fims__union_QueryParameterType__<fieldname>
    union _fims__union_QueryParameterType_
    {
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Operator attribute.
/// </BLOCKQUOTE></PRE>
/// Element "operator" of XSD type "http://base.fims.tv":QueryParameterOperatorType.
    enum fims__QueryParameterOperatorType  operator_                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Query Parameter Custom Operator attribute.
/// </BLOCKQUOTE></PRE>
/// Element "customOperator" of XSD type "http://base.fims.tv":CustomQueryParameterOperatorType.
    fims__CustomQueryParameterOperatorType*  customOperator                 1;	///< Required element.
    }                                    union_QueryParameterType_     ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryParametersType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Query Parameters Type.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryParametersType operations:
/// - soap_new_fims__QueryParametersType(soap*) allocate
/// - soap_new_fims__QueryParametersType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryParametersType(soap*, fims__QueryParametersType*) deserialize from a stream
/// - int soap_write_fims__QueryParametersType(soap, fims__QueryParametersType*) serialize to a stream
class fims__QueryParametersType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Query Parameter.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the Query Parameter Type representation with several parameter attributes.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__QueryParameterType* element refs of length 1..unbounded.
    std::vector<fims__QueryParameterType*> queryParameter                 1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomQueryGroupOperatorType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Custom Query Group Operator Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomQueryGroupOperatorType operations:
/// - soap_new_fims__CustomQueryGroupOperatorType(soap*) allocate
/// - soap_new_fims__CustomQueryGroupOperatorType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomQueryGroupOperatorType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomQueryGroupOperatorType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomQueryGroupOperatorType(soap*, fims__CustomQueryGroupOperatorType*) deserialize from a stream
/// - int soap_write_fims__CustomQueryGroupOperatorType(soap, fims__CustomQueryGroupOperatorType*) serialize to a stream
class fims__CustomQueryGroupOperatorType
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomQueryGroupOperatorsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Custom Query Group Operators Type.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomQueryGroupOperatorsType operations:
/// - soap_new_fims__CustomQueryGroupOperatorsType(soap*) allocate
/// - soap_new_fims__CustomQueryGroupOperatorsType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomQueryGroupOperatorsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomQueryGroupOperatorsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomQueryGroupOperatorsType(soap*, fims__CustomQueryGroupOperatorsType*) deserialize from a stream
/// - int soap_write_fims__CustomQueryGroupOperatorsType(soap, fims__CustomQueryGroupOperatorsType*) serialize to a stream
class fims__CustomQueryGroupOperatorsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Custom Query Group Operator.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance a Custom Query Group Operator representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__CustomQueryGroupOperatorType* element refs of length 1..unbounded.
    std::vector<fims__CustomQueryGroupOperatorType*> customQueryGroupOperator       1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryGroupType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Query Group Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryGroupType operations:
/// - soap_new_fims__QueryGroupType(soap*) allocate
/// - soap_new_fims__QueryGroupType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryGroupType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryGroupType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryGroupType(soap*, fims__QueryGroupType*) deserialize from a stream
/// - int soap_write_fims__QueryGroupType(soap, fims__QueryGroupType*) serialize to a stream
class fims__QueryGroupType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Query Group Type Parameters attribute.
/// </BLOCKQUOTE></PRE>
/// Element "parameters" of XSD type "http://base.fims.tv":QueryParametersType.
    fims__QueryParametersType*           parameters                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Query Group Type Groups attribute.
/// </BLOCKQUOTE></PRE>
/// Element "groups" of XSD type "http://base.fims.tv":QueryGroupsType.
    fims__QueryGroupsType*               groups                         0;	///< Optional element.
//  BEGIN CHOICE <xs:choice minOccurs="0" maxOccurs="1">
   $int                                  __union_QueryGroupType         0;	///< Union _fims__union_QueryGroupType selector: set to SOAP_UNION__fims__union_QueryGroupType_<fieldname> or 0
    union _fims__union_QueryGroupType
    {
/// <PRE><BLOCKQUOTE>
///   The Query Group Type Operator attribute.
/// </BLOCKQUOTE></PRE>
/// Element "operator" of XSD type "http://base.fims.tv":QueryGroupOperatorType.
    enum fims__QueryGroupOperatorType    operator_                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Query Group Type Custom Operator attribute.
/// </BLOCKQUOTE></PRE>
/// Element "customOperator" of XSD type "http://base.fims.tv":CustomQueryGroupOperatorType.
    fims__CustomQueryGroupOperatorType*  customOperator                 1;	///< Required element.
    }                                    union_QueryGroupType          ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":QueryGroupsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Query Groups Type.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryGroupsType operations:
/// - soap_new_fims__QueryGroupsType(soap*) allocate
/// - soap_new_fims__QueryGroupsType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryGroupsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryGroupsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryGroupsType(soap*, fims__QueryGroupsType*) deserialize from a stream
/// - int soap_write_fims__QueryGroupsType(soap, fims__QueryGroupsType*) serialize to a stream
class fims__QueryGroupsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Query Group.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a Query Group representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__QueryGroupType* element refs of length 1..unbounded.
    std::vector<fims__QueryGroupType*  > queryGroup                     1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomEventTemplateType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Custom Event Template Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomEventTemplateType operations:
/// - soap_new_fims__CustomEventTemplateType(soap*) allocate
/// - soap_new_fims__CustomEventTemplateType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomEventTemplateType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomEventTemplateType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomEventTemplateType(soap*, fims__CustomEventTemplateType*) deserialize from a stream
/// - int soap_write_fims__CustomEventTemplateType(soap, fims__CustomEventTemplateType*) serialize to a stream
class fims__CustomEventTemplateType
{ public:
/// <PRE><BLOCKQUOTE>
///   The Template ID indicating the unique instance of a Custom Event Template.
/// </BLOCKQUOTE></PRE>
/// Element "templateID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType*                templateID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Template Name.
/// </BLOCKQUOTE></PRE>
/// Element "name" of XSD type xs:string.
    std::wstring                         name                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Template Query Expressions Type Parameters attribute.
/// </BLOCKQUOTE></PRE>
/// Element "parameters" of XSD type "http://base.fims.tv":QueryExpressionsType.
    fims__QueryExpressionsType*          parameters                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":CustomEventTemplatesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Custom Event Templates Type.
/// </BLOCKQUOTE></PRE>
/// class fims__CustomEventTemplatesType operations:
/// - soap_new_fims__CustomEventTemplatesType(soap*) allocate
/// - soap_new_fims__CustomEventTemplatesType(soap*, int num) allocate array
/// - soap_new_req_fims__CustomEventTemplatesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CustomEventTemplatesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CustomEventTemplatesType(soap*, fims__CustomEventTemplatesType*) deserialize from a stream
/// - int soap_write_fims__CustomEventTemplatesType(soap, fims__CustomEventTemplatesType*) serialize to a stream
class fims__CustomEventTemplatesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Custom Event Template.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of a Custom Event Template representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__CustomEventTemplateType* element refs of length 1..unbounded.
    std::vector<fims__CustomEventTemplateType*> customEventTemplate            1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":EventEnvelopeType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Event Envelope Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__EventEnvelopeType operations:
/// - soap_new_fims__EventEnvelopeType(soap*) allocate
/// - soap_new_fims__EventEnvelopeType(soap*, int num) allocate array
/// - soap_new_req_fims__EventEnvelopeType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__EventEnvelopeType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__EventEnvelopeType(soap*, fims__EventEnvelopeType*) deserialize from a stream
/// - int soap_write_fims__EventEnvelopeType(soap, fims__EventEnvelopeType*) serialize to a stream
class fims__EventEnvelopeType
{ public:
/// <PRE><BLOCKQUOTE>
///   The TimeStamp attribute of the Event Envelope using the dateTime format.
/// </BLOCKQUOTE></PRE>
/// Element "timestamp" of XSD type xs:dateTime.
    time_t*                              timestamp                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Event Type attribute of the Event Envelope: either "system" or "content".
/// </BLOCKQUOTE></PRE>
/// Element "eventType" of XSD type "http://base.fims.tv":EventType.
    enum fims__EventType*                eventType                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Event SubType attribute of the Event Envelope. Subtypes include:
///   "systemException"; "systemPerformance", "created", "removed", "purged", "relocated",
///   "newFormatAvailable", "copied", "qued", "modified", and "custom".
/// </BLOCKQUOTE></PRE>
/// Element "eventSubType" of XSD type "http://base.fims.tv":EventSubType.
    enum fims__EventSubType*             eventSubType                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Event Classification attribute of the Event Envelope: "error", "warning", and "information".
/// </BLOCKQUOTE></PRE>
/// Element "eventClassification" of XSD type "http://base.fims.tv":EventClassificationType.
    enum fims__EventClassificationType*  eventClassification            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Event Payload attribute of the Event Envelope.
/// </BLOCKQUOTE></PRE>
/// Element "eventPayload" of XSD type "http://base.fims.tv":EventPayloadType.
    fims__EventPayloadType*              eventPayload                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":EventEnvelopesType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Event Envelopes Type.
/// </BLOCKQUOTE></PRE>
/// class fims__EventEnvelopesType operations:
/// - soap_new_fims__EventEnvelopesType(soap*) allocate
/// - soap_new_fims__EventEnvelopesType(soap*, int num) allocate array
/// - soap_new_req_fims__EventEnvelopesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__EventEnvelopesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__EventEnvelopesType(soap*, fims__EventEnvelopesType*) deserialize from a stream
/// - int soap_write_fims__EventEnvelopesType(soap, fims__EventEnvelopesType*) serialize to a stream
class fims__EventEnvelopesType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Event Envelope.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of an Event Envelope representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__EventEnvelopeType* element refs of length 1..unbounded.
    std::vector<fims__EventEnvelopeType*> eventEnvelope                  1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":EventPayloadType is an abstract complexType.
///
/// <PRE><BLOCKQUOTE>
///   The Event Payload Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__EventPayloadType operations:
/// - soap_new_fims__EventPayloadType(soap*) allocate
/// - soap_new_fims__EventPayloadType(soap*, int num) allocate array
/// - soap_new_req_fims__EventPayloadType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__EventPayloadType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__EventPayloadType(soap*, fims__EventPayloadType*) deserialize from a stream
/// - int soap_write_fims__EventPayloadType(soap, fims__EventPayloadType*) serialize to a stream
class fims__EventPayloadType
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":EventPayloadsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Event Payloads Type.
/// </BLOCKQUOTE></PRE>
/// class fims__EventPayloadsType operations:
/// - soap_new_fims__EventPayloadsType(soap*) allocate
/// - soap_new_fims__EventPayloadsType(soap*, int num) allocate array
/// - soap_new_req_fims__EventPayloadsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__EventPayloadsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__EventPayloadsType(soap*, fims__EventPayloadsType*) deserialize from a stream
/// - int soap_write_fims__EventPayloadsType(soap, fims__EventPayloadsType*) serialize to a stream
class fims__EventPayloadsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Event Payload.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the Event Payload representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__EventPayloadType* element refs of length 1..unbounded.
    std::vector<fims__EventPayloadType*> eventPayload                   1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ContentEventsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Content Events Type.
/// </BLOCKQUOTE></PRE>
/// class fims__ContentEventsType operations:
/// - soap_new_fims__ContentEventsType(soap*) allocate
/// - soap_new_fims__ContentEventsType(soap*, int num) allocate array
/// - soap_new_req_fims__ContentEventsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContentEventsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContentEventsType(soap*, fims__ContentEventsType*) deserialize from a stream
/// - int soap_write_fims__ContentEventsType(soap, fims__ContentEventsType*) serialize to a stream
class fims__ContentEventsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Content Event.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the Content Event representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ContentEventType* element refs of length 1..unbounded.
    std::vector<fims__ContentEventType*> contentEvent                   1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ContentStatusEventsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Content Status Events Type.
/// </BLOCKQUOTE></PRE>
/// class fims__ContentStatusEventsType operations:
/// - soap_new_fims__ContentStatusEventsType(soap*) allocate
/// - soap_new_fims__ContentStatusEventsType(soap*, int num) allocate array
/// - soap_new_req_fims__ContentStatusEventsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContentStatusEventsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContentStatusEventsType(soap*, fims__ContentStatusEventsType*) deserialize from a stream
/// - int soap_write_fims__ContentStatusEventsType(soap, fims__ContentStatusEventsType*) serialize to a stream
class fims__ContentStatusEventsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Content Status Event.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the Content Status Event representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ContentStatusEventType* element refs of length 1..unbounded.
    std::vector<fims__ContentStatusEventType*> contentStatusEvent             1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ContentCustomEventsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the Content Custom Events Type.
/// </BLOCKQUOTE></PRE>
/// class fims__ContentCustomEventsType operations:
/// - soap_new_fims__ContentCustomEventsType(soap*) allocate
/// - soap_new_fims__ContentCustomEventsType(soap*, int num) allocate array
/// - soap_new_req_fims__ContentCustomEventsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContentCustomEventsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContentCustomEventsType(soap*, fims__ContentCustomEventsType*) deserialize from a stream
/// - int soap_write_fims__ContentCustomEventsType(soap, fims__ContentCustomEventsType*) serialize to a stream
class fims__ContentCustomEventsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a Content Custom Event.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the Content Custom Event representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__ContentCustomEventType* element refs of length 1..unbounded.
    std::vector<fims__ContentCustomEventType*> contentCustomEvent             1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":SystemEventsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the System Events Type.
/// </BLOCKQUOTE></PRE>
/// class fims__SystemEventsType operations:
/// - soap_new_fims__SystemEventsType(soap*) allocate
/// - soap_new_fims__SystemEventsType(soap*, int num) allocate array
/// - soap_new_req_fims__SystemEventsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SystemEventsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SystemEventsType(soap*, fims__SystemEventsType*) deserialize from a stream
/// - int soap_write_fims__SystemEventsType(soap, fims__SystemEventsType*) serialize to a stream
class fims__SystemEventsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a System Event.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the System Event representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__SystemEventType* element refs of length 1..unbounded.
    std::vector<fims__SystemEventType* > systemEvent                    1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":SystemExceptionEventsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the System Exception Events Type.
/// </BLOCKQUOTE></PRE>
/// class fims__SystemExceptionEventsType operations:
/// - soap_new_fims__SystemExceptionEventsType(soap*) allocate
/// - soap_new_fims__SystemExceptionEventsType(soap*, int num) allocate array
/// - soap_new_req_fims__SystemExceptionEventsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SystemExceptionEventsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SystemExceptionEventsType(soap*, fims__SystemExceptionEventsType*) deserialize from a stream
/// - int soap_write_fims__SystemExceptionEventsType(soap, fims__SystemExceptionEventsType*) serialize to a stream
class fims__SystemExceptionEventsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a System Exception Event.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the System Exception Event representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__SystemExceptionEventType* element refs of length 1..unbounded.
    std::vector<fims__SystemExceptionEventType*> systemExceptionEvent           1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":SystemPerformanceEventsType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   This is the declaration of the System Performance Events Type.
/// </BLOCKQUOTE></PRE>
/// class fims__SystemPerformanceEventsType operations:
/// - soap_new_fims__SystemPerformanceEventsType(soap*) allocate
/// - soap_new_fims__SystemPerformanceEventsType(soap*, int num) allocate array
/// - soap_new_req_fims__SystemPerformanceEventsType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SystemPerformanceEventsType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SystemPerformanceEventsType(soap*, fims__SystemPerformanceEventsType*) deserialize from a stream
/// - int soap_write_fims__SystemPerformanceEventsType(soap, fims__SystemPerformanceEventsType*) serialize to a stream
class fims__SystemPerformanceEventsType
{ public:
/// <PRE><BLOCKQUOTE>
///   This is the instance of a System Performance Event.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   An instance of the System Performance Event representation.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__SystemPerformanceEventType* element refs of length 1..unbounded.
    std::vector<fims__SystemPerformanceEventType*> systemPerformanceEvent         1;
/// @todo <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://base.fims.tv":formatCollection
/// <PRE><BLOCKQUOTE>
///   Element used to carry a collection of media formats including video, audio, data, and container.
/// </BLOCKQUOTE></PRE>
/// @brief "http://base.fims.tv":formatCollection is a complexType.
///
/// class _fims__formatCollection operations:
/// - soap_new__fims__formatCollection(soap*) allocate
/// - soap_new__fims__formatCollection(soap*, int num) allocate array
/// - soap_new_req__fims__formatCollection(soap*, ...) allocate, set required members
/// - soap_new_set__fims__formatCollection(soap*, ...) allocate, set all public members
/// - int soap_read__fims__formatCollection(soap*, _fims__formatCollection*) deserialize from a stream
/// - int soap_write__fims__formatCollection(soap, _fims__formatCollection*) serialize to a stream
class _fims__formatCollection
{ public:
/// Element reference "http://base.fims.tv:""http://base.fims.tv":videoFormat.
    fims__VideoFormatType*               videoFormat                    0;	///< Optional element.
/// Element reference "http://base.fims.tv:""http://base.fims.tv":audioFormat.
    fims__AudioFormatType*               audioFormat                    0;	///< Optional element.
/// Element reference "http://base.fims.tv:""http://base.fims.tv":dataFormat.
    fims__DataFormatType*                dataFormat                     0;	///< Optional element.
/// Element reference "http://base.fims.tv:""http://base.fims.tv":containerFormat.
    fims__ContainerFormatType*           containerFormat                0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://baseTime.fims.tv                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://baseTime.fims.tv":DurationType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Measure of the duration of an operation
///   or item of content.
/// </BLOCKQUOTE></PRE>
/// class fimstime__DurationType operations:
/// - soap_new_fimstime__DurationType(soap*) allocate
/// - soap_new_fimstime__DurationType(soap*, int num) allocate array
/// - soap_new_req_fimstime__DurationType(soap*, ...) allocate, set required members
/// - soap_new_set_fimstime__DurationType(soap*, ...) allocate, set all public members
/// - int soap_read_fimstime__DurationType(soap*, fimstime__DurationType*) deserialize from a stream
/// - int soap_write_fimstime__DurationType(soap, fimstime__DurationType*) serialize to a stream
class fimstime__DurationType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_DurationType          ;	///< Union _fimstime__union_DurationType selector: set to SOAP_UNION__fimstime__union_DurationType_<fieldname>
/// Union for choice in fimstime__DurationType.
    union _fimstime__union_DurationType
    {
/// <PRE><BLOCKQUOTE>
///   Duration of AV content in a
///   timecode-like format (e.g. SMPTE ST 12-1) as defined in EBU Tech 3293.
/// </BLOCKQUOTE></PRE>
/// Element "timecode" of XSD type "http://baseTime.fims.tv":TimecodeDuration.
    fimstime__TimecodeDuration*          timecode                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A duration expressed using usual
///   time representation as in RFC 2326 and ISO 8601 (e.g.:PT1H31M25.152S)
/// </BLOCKQUOTE></PRE>
/// Element "normalPlayTime" of XSD type xs:duration.
    xsd__duration*                       normalPlayTime                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A duration expressed as a number
///   of edit units, as defined in EBU Tech 3293.
/// </BLOCKQUOTE></PRE>
/// Element "editUnitNumber" of XSD type "http://baseTime.fims.tv":EditUnitNumberType.
    fimstime__EditUnitNumberType*        editUnitNumber                 1;	///< Required element.
    }                                    union_DurationType            ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://baseTime.fims.tv":TimeType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Value used to represent a point in time,
///   such as at what time to start an operation.
/// </BLOCKQUOTE></PRE>
/// class fimstime__TimeType operations:
/// - soap_new_fimstime__TimeType(soap*) allocate
/// - soap_new_fimstime__TimeType(soap*, int num) allocate array
/// - soap_new_req_fimstime__TimeType(soap*, ...) allocate, set required members
/// - soap_new_set_fimstime__TimeType(soap*, ...) allocate, set all public members
/// - int soap_read_fimstime__TimeType(soap*, fimstime__TimeType*) deserialize from a stream
/// - int soap_write_fimstime__TimeType(soap, fimstime__TimeType*) serialize to a stream
class fimstime__TimeType
{ public:
//  BEGIN CHOICE <xs:choice>
   $int                                  __union_TimeType              ;	///< Union _fimstime__union_TimeType selector: set to SOAP_UNION__fimstime__union_TimeType_<fieldname>
/// Union for choice in fimstime__TimeType.
    union _fimstime__union_TimeType
    {
/// <PRE><BLOCKQUOTE>
///   Start time expressed using
///   timecode values compliant with SMPTE ST 12-1.
/// </BLOCKQUOTE></PRE>
/// Element "timecode" of XSD type "http://baseTime.fims.tv":Timecode.
    fimstime__Timecode*                  timecode                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Start time expressed by time of day in the format
///   hh:mm:ss.sss with an optional following time zone indicator.
/// </BLOCKQUOTE></PRE>
/// Element "normalPlayTime" of XSD type xs:time.
    xsd__time*                           normalPlayTime                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Start time expressed as a number
///   of edit units.
/// </BLOCKQUOTE></PRE>
/// Element "editUnitNumber" of XSD type "http://baseTime.fims.tv":EditUnitNumberType.
    fimstime__EditUnitNumberType*        editUnitNumber                 1;	///< Required element.
    }                                    union_TimeType                ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://description.fims.tv                                               *
 *                                                                            *
\******************************************************************************/

/// @brief "http://description.fims.tv":bmContentDescriptionType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   The body of descriptive metadata
/// </BLOCKQUOTE></PRE>
/// class fimsdescription__bmContentDescriptionType operations:
/// - soap_new_fimsdescription__bmContentDescriptionType(soap*) allocate
/// - soap_new_fimsdescription__bmContentDescriptionType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__bmContentDescriptionType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__bmContentDescriptionType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__bmContentDescriptionType(soap*, fimsdescription__bmContentDescriptionType*) deserialize from a stream
/// - int soap_write_fimsdescription__bmContentDescriptionType(soap, fimsdescription__bmContentDescriptionType*) serialize to a stream
class fimsdescription__bmContentDescriptionType
{ public:
/// <PRE><BLOCKQUOTE>
///   A Title is the main name given to a resource e.g. an editorial object. It corresponds for a series to the series title, for programme to the programme title, for an item to the item title, etc. Titles are recorded as they appear. The Title is the name by which a resource is formally known and that everyone should use to refer to or search for that particular resource. The Title may be provided in several languages.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> title                          0;
/// <PRE><BLOCKQUOTE>
///   An Alternative Title is the name other than the main Title given to a resource. The type of title is defined by the typeGroup of attributes. Alternative Titles are recorded as they appear. An Alternative Title may be attributed to a resource for several reasons described using the type (e.g. series title) attributes.
///   The alternativeTitle may be provided in several languages.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__titleType* of length 0..unbounded.
    std::vector<fimsdescription__titleType*> alternativeTitle               0;
/// <PRE><BLOCKQUOTE>
///   The descriptor creator identifies an entity (a person, group of persons or organisation) primarily responsible for creating the content of the resource - behind the camera. Different roles may be considered as representing a creator, e.g. a producer, an author, etc. Creator is a sub-class of Contributor.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> creator                        0;
/// <PRE><BLOCKQUOTE>
///   The generalised topic that represents the intellectual content of the resource. Typically, a subject is expressed by keywords, key phrases.
///   Free text, controlled vocabularies, authorities, or formal classification schemes (codes) may be employed when selecting descriptive subject terms. Persons as subjects are also placed here.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__subjectType* of length 0..unbounded.
    std::vector<fimsdescription__subjectType*> subject                        0;
/// <PRE><BLOCKQUOTE>
///   Free-form text or a narrative to report general notes, abstracts, or summaries about the intellectual content of a resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__descriptionType* of length 0..unbounded.
    std::vector<fimsdescription__descriptionType*> description                    0;
/// <PRE><BLOCKQUOTE>
///   A publisher is a person, an organization, or a service. Typically, the name of a Publisher should be used to indicate the entity primarily responsible for distributing or making a resource available to others e.g. by broadcasting, selling, leasing, renting and other modes of distribution.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> publisher                      0;
/// <PRE><BLOCKQUOTE>
///   The descriptor contributor identifies a person or organization that has made substantial creative contributions to the content of a resource. Refers particularly (but not only) to participation in front of the camera. If in doubt whether an entity is a creator or contributor use the element contributor.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> contributor                    0;
/// <PRE><BLOCKQUOTE>
///   Dates associated with events occurring during the life of the resource. Typically, Date will be associated with the creation, modification or availability of the resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__dateType* of length 0..unbounded.
    std::vector<fimsdescription__dateType*> date                           0;
/// <PRE><BLOCKQUOTE>
///   The nature or genre of the editorial object. Type includes terms describing general categories, functions, genres, or aggregation levels for content. Recommended best practice is to select a value from a controlled vocabulary.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__typeType* of length 0..unbounded.
    std::vector<fimsdescription__typeType*> type                           0;
/// <PRE><BLOCKQUOTE>
///   A unique, unambiguous reference or identifier for a resource within a given context. Best practice is to identify the resource (whether analogue or digital) by means of a string or number corresponding to an established or formal identification system if one exists. Otherwise, use an identification method that is in use within your agency, station, production company, office, or institution. It is also possible to enter more than one, different but still unique, identifier for the same resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__identifierType* of length 0..unbounded.
    std::vector<fimsdescription__identifierType*> identifier                     0;
/// <PRE><BLOCKQUOTE>
///   Identifies languages and their use in the intellectual content of the resource. Recommended best practice for the values of the Language element is defined by RFC 5646. It is recommended to use a two-letter Language Code (taken from the ISO Standard 639), followed optionally, by a two-letter Country Code (taken from the ISO Standard 3166) preferably expressed using capitals letters. For example, 'en' for English, 'fr' for French, or 'en-UK' for English used in the United Kingdom. More contextual information can be provided using the note attribute.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__languageType* of length 0..unbounded.
    std::vector<fimsdescription__languageType*> language                       0;
/// <PRE><BLOCKQUOTE>
///   Recommended best practice is to reference the resource (to which the current resource under description is related) by means of a string or number conforming to a formal identification system. Relation is used to show the relation in content to another resource. For example, "IsPartOf" is used to show the relation between a part of a radio programme and the whole programme or between a track and a record album.
///   A resource can be identified by its title, or an identifier (possibly a URI). The related item has its own separate metadata record. Relation is used to provide a name, an identification number or ID, or a locator where the related item can be found.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> relation                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to the resource that the current resource is a version of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isVersionOf                    0;
/// <PRE><BLOCKQUOTE>
///   A reference to another version of the resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasVersion                     0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource replacing the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isReplacedBy                   0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource replaces
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> replaces                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource requiring the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isRequiredBy                   0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource requires
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> requires                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource is a part of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isPartOf                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that forms part of the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasPart                        0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that references the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isReferencedBy                 0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource references
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> references                     0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource with which the current resource shares a format
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isFormatOf                     0;
/// <PRE><BLOCKQUOTE>
///   A format in which the resource is also available
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasFormat                      0;
/// <PRE><BLOCKQUOTE>
///   A reference to a series the current resource is an episode of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isEpisodeOf                    0;
/// <PRE><BLOCKQUOTE>
///   A reference to a group e.g. a brand, the current resource is an member of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isMemberOf                     0;
/// <PRE><BLOCKQUOTE>
///   A reference to members of a group
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasMembers                     0;
/// <PRE><BLOCKQUOTE>
///   Coverage is used to show various time and place aspects of the subject of the content. Coverage will typically include spatial location (a place name or geographic coordinates), temporal period (a period label, date, or date range) or jurisdiction (such as a named administrative entity). Recommended best practice is to select a value from a controlled vocabulary (for example, the Thesaurus of Geographic Names) and that, where appropriate, named places or time periods be used in preference to numeric identifiers such as sets of coordinates or date ranges.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__coverageType* of length 0..unbounded.
    std::vector<fimsdescription__coverageType*> coverage                       0;
/// <PRE><BLOCKQUOTE>
///   An all-purpose field to identify information (rights management statement or reference to a service providing such information e.g. via a URL) about copyright, intellectual property rights or other property rights held in and over a resource, stating whether access is open or restricted in some way.
///   If dates, times, territories and availability periods are associated with a right, they should be included. If the Rights element is absent, no assumptions can be made about the status of these and other rights with respect to the resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__rightsType* of length 0..unbounded.
    std::vector<fimsdescription__rightsType*> rights                         0;
/// <PRE><BLOCKQUOTE>
///   UK Version, US Version, home video version, etc. Mapping to Dublin Core would be made using a description element. There can be mutiple type of version references.
/// </BLOCKQUOTE></PRE>
/// Element "version" of XSD type xs:string.
    std::wstring*                        version                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   To identify parts or segments within the editorial object, such as changes in the topic of a magasine programme
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__partType* of length 0..unbounded.
    std::vector<fimsdescription__partType*> part                           0;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":typeType is a complexType.
///
/// class fimsdescription__typeType operations:
/// - soap_new_fimsdescription__typeType(soap*) allocate
/// - soap_new_fimsdescription__typeType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__typeType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__typeType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__typeType(soap*, fimsdescription__typeType*) deserialize from a stream
/// - int soap_write_fimsdescription__typeType(soap, fimsdescription__typeType*) serialize to a stream
class fimsdescription__typeType
{ public:
/// Vector of genre of length 0..unbounded.
    std::vector<
/// class _fimsdescription__typeType_genre operations:
/// - soap_new__fimsdescription__typeType_genre(soap*) allocate
/// - soap_new__fimsdescription__typeType_genre(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__typeType_genre(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__typeType_genre(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__typeType_genre(soap*, _fimsdescription__typeType_genre*) deserialize from a stream
/// - int soap_write__fimsdescription__typeType_genre(soap, _fimsdescription__typeType_genre*) serialize to a stream
    class _fimsdescription__typeType_genre
    {
/// INHERITED FROM fimsdescription__textElementType:
//  END OF INHERITED FROM fimsdescription__textElementType
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }>                                  *genre                          0;
/// Vector of objectType of length 0..unbounded.
    std::vector<
/// class _fimsdescription__typeType_objectType operations:
/// - soap_new__fimsdescription__typeType_objectType(soap*) allocate
/// - soap_new__fimsdescription__typeType_objectType(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__typeType_objectType(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__typeType_objectType(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__typeType_objectType(soap*, _fimsdescription__typeType_objectType*) deserialize from a stream
/// - int soap_write__fimsdescription__typeType_objectType(soap, _fimsdescription__typeType_objectType*) serialize to a stream
    class _fimsdescription__typeType_objectType
    {
/// INHERITED FROM fimsdescription__textElementType:
//  END OF INHERITED FROM fimsdescription__textElementType
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }>                                  *objectType                     0;
/// Vector of targetAudience of length 0..unbounded.
    std::vector<
/// class _fimsdescription__typeType_targetAudience operations:
/// - soap_new__fimsdescription__typeType_targetAudience(soap*) allocate
/// - soap_new__fimsdescription__typeType_targetAudience(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__typeType_targetAudience(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__typeType_targetAudience(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__typeType_targetAudience(soap*, _fimsdescription__typeType_targetAudience*) deserialize from a stream
/// - int soap_write__fimsdescription__typeType_targetAudience(soap, _fimsdescription__typeType_targetAudience*) serialize to a stream
    class _fimsdescription__typeType_targetAudience
    {
/// INHERITED FROM fimsdescription__textElementType:
//  END OF INHERITED FROM fimsdescription__textElementType
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }>                                  *targetAudience                 0;
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":coverageType is a complexType.
///
/// class fimsdescription__coverageType operations:
/// - soap_new_fimsdescription__coverageType(soap*) allocate
/// - soap_new_fimsdescription__coverageType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__coverageType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__coverageType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__coverageType(soap*, fimsdescription__coverageType*) deserialize from a stream
/// - int soap_write_fimsdescription__coverageType(soap, fimsdescription__coverageType*) serialize to a stream
class fimsdescription__coverageType
{ public:
/// class _fimsdescription__coverageType_temporal operations:
/// - soap_new__fimsdescription__coverageType_temporal(soap*) allocate
/// - soap_new__fimsdescription__coverageType_temporal(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__coverageType_temporal(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__coverageType_temporal(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__coverageType_temporal(soap*, _fimsdescription__coverageType_temporal*) deserialize from a stream
/// - int soap_write__fimsdescription__coverageType_temporal(soap, _fimsdescription__coverageType_temporal*) serialize to a stream
    class _fimsdescription__coverageType_temporal
    {
/// INHERITED FROM fimsdescription__textElementType:
//  END OF INHERITED FROM fimsdescription__textElementType
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *temporal                       0;	///< Optional element.
/// class _fimsdescription__coverageType_spatial operations:
/// - soap_new__fimsdescription__coverageType_spatial(soap*) allocate
/// - soap_new__fimsdescription__coverageType_spatial(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__coverageType_spatial(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__coverageType_spatial(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__coverageType_spatial(soap*, _fimsdescription__coverageType_spatial*) deserialize from a stream
/// - int soap_write__fimsdescription__coverageType_spatial(soap, _fimsdescription__coverageType_spatial*) serialize to a stream
    class _fimsdescription__coverageType_spatial
    {
/// class _fimsdescription__coverageType_spatial_locationName operations:
/// - soap_new__fimsdescription__coverageType_spatial_locationName(soap*) allocate
/// - soap_new__fimsdescription__coverageType_spatial_locationName(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__coverageType_spatial_locationName(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__coverageType_spatial_locationName(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__coverageType_spatial_locationName(soap*, _fimsdescription__coverageType_spatial_locationName*) deserialize from a stream
/// - int soap_write__fimsdescription__coverageType_spatial_locationName(soap, _fimsdescription__coverageType_spatial_locationName*) serialize to a stream
    class _fimsdescription__coverageType_spatial_locationName
    {
/// INHERITED FROM fimsdescription__textElementType:
//  END OF INHERITED FROM fimsdescription__textElementType
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                    locationName                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Optional geospatial coordinates. 'posy'
///   is the latitude. 'posx' is the longitude. Both are
///   expressed in digital degrees
/// </BLOCKQUOTE></PRE>
/// class _fimsdescription__coverageType_spatial_coordinates operations:
/// - soap_new__fimsdescription__coverageType_spatial_coordinates(soap*) allocate
/// - soap_new__fimsdescription__coverageType_spatial_coordinates(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__coverageType_spatial_coordinates(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__coverageType_spatial_coordinates(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__coverageType_spatial_coordinates(soap*, _fimsdescription__coverageType_spatial_coordinates*) deserialize from a stream
/// - int soap_write__fimsdescription__coverageType_spatial_coordinates(soap, _fimsdescription__coverageType_spatial_coordinates*) serialize to a stream
    class _fimsdescription__coverageType_spatial_coordinates
    {
/// Element "posy" of XSD type xs:float.
    float                                posy                           1;	///< Required element.
/// Element "posx" of XSD type xs:float.
    float                                posx                           1;	///< Required element.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="formatGroup">.
/// Attribute "formatLabel" of XSD type xs:string.
   @std::wstring*                        formatLabel                    0;	///< Optional attribute.
/// Attribute "formatDefinition" of XSD type xs:string.
   @std::wstring*                        formatDefinition               0;	///< Optional attribute.
/// Attribute "formatLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         formatLink                     0;	///< Optional attribute.
/// Attribute "formatLanguage" of XSD type xs:language.
   @xsd__language*                       formatLanguage                 0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *coordinates                    0;	///< Optional element.
    }                                   *spatial                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":rightsType is a complexType.
///
/// class fimsdescription__rightsType operations:
/// - soap_new_fimsdescription__rightsType(soap*) allocate
/// - soap_new_fimsdescription__rightsType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__rightsType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__rightsType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__rightsType(soap*, fimsdescription__rightsType*) deserialize from a stream
/// - int soap_write_fimsdescription__rightsType(soap, fimsdescription__rightsType*) serialize to a stream
class fimsdescription__rightsType
{ public:
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> rightsExpression               0;
/// Element "rightsLink" of XSD type xs:anyURI.
    xsd__anyURI*                         rightsLink                     0;	///< Optional element.
/// Element "rightsHolder" of XSD type "http://description.fims.tv":entityType.
    fimsdescription__entityType*         rightsHolder                   0;	///< Optional element.
/// Element "exploitationIssues" of XSD type "http://description.fims.tv":textElementType.
    fimsdescription__textElementType*    exploitationIssues             0;	///< Optional element.
/// Element "coverage" of XSD type "http://description.fims.tv":coverageType.
    fimsdescription__coverageType*       coverage                       0;	///< Optional element.
/// Element "rightsClearanceFlag" of XSD type xs:boolean.
    bool*                                rightsClearanceFlag            0;	///< Optional element.
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> disclaimer                     0;
/// Vector of fimsdescription__identifierType* of length 0..unbounded.
    std::vector<fimsdescription__identifierType*> rightsId                       0;
/// Vector of fimsdescription__contactDetailsType* of length 0..unbounded.
    std::vector<fimsdescription__contactDetailsType*> contactDetails                 0;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":dateType is a complexType.
///
/// class fimsdescription__dateType operations:
/// - soap_new_fimsdescription__dateType(soap*) allocate
/// - soap_new_fimsdescription__dateType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__dateType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__dateType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__dateType(soap*, fimsdescription__dateType*) deserialize from a stream
/// - int soap_write_fimsdescription__dateType(soap, fimsdescription__dateType*) serialize to a stream
class fimsdescription__dateType
{ public:
/// class _fimsdescription__dateType_created operations:
/// - soap_new__fimsdescription__dateType_created(soap*) allocate
/// - soap_new__fimsdescription__dateType_created(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__dateType_created(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__dateType_created(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__dateType_created(soap*, _fimsdescription__dateType_created*) deserialize from a stream
/// - int soap_write__fimsdescription__dateType_created(soap, _fimsdescription__dateType_created*) serialize to a stream
    class _fimsdescription__dateType_created
    {
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="dateGroup">.
/// Attribute "startYear" of XSD type xs:gYear.
   @xsd__gYear*                          startYear                      0;	///< Optional attribute.
/// Attribute "startDate" of XSD type xs:date.
   @xsd__date*                           startDate                      0;	///< Optional attribute.
/// Attribute "startTime" of XSD type xs:time.
   @xsd__time*                           startTime                      0;	///< Optional attribute.
/// Attribute "endYear" of XSD type xs:gYear.
   @xsd__gYear*                          endYear                        0;	///< Optional attribute.
/// Attribute "endDate" of XSD type xs:date.
   @xsd__date*                           endDate                        0;	///< Optional attribute.
/// Attribute "endTime" of XSD type xs:time.
   @xsd__time*                           endTime                        0;	///< Optional attribute.
/// Attribute "period" of XSD type xs:string.
   @std::wstring*                        period                         0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *created                        0;	///< Optional element.
/// class _fimsdescription__dateType_modified operations:
/// - soap_new__fimsdescription__dateType_modified(soap*) allocate
/// - soap_new__fimsdescription__dateType_modified(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__dateType_modified(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__dateType_modified(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__dateType_modified(soap*, _fimsdescription__dateType_modified*) deserialize from a stream
/// - int soap_write__fimsdescription__dateType_modified(soap, _fimsdescription__dateType_modified*) serialize to a stream
    class _fimsdescription__dateType_modified
    {
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="dateGroup">.
/// Attribute "startYear" of XSD type xs:gYear.
   @xsd__gYear*                          startYear                      0;	///< Optional attribute.
/// Attribute "startDate" of XSD type xs:date.
   @xsd__date*                           startDate                      0;	///< Optional attribute.
/// Attribute "startTime" of XSD type xs:time.
   @xsd__time*                           startTime                      0;	///< Optional attribute.
/// Attribute "endYear" of XSD type xs:gYear.
   @xsd__gYear*                          endYear                        0;	///< Optional attribute.
/// Attribute "endDate" of XSD type xs:date.
   @xsd__date*                           endDate                        0;	///< Optional attribute.
/// Attribute "endTime" of XSD type xs:time.
   @xsd__time*                           endTime                        0;	///< Optional attribute.
/// Attribute "period" of XSD type xs:string.
   @std::wstring*                        period                         0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *modified                       0;	///< Optional element.
/// class _fimsdescription__dateType_issued operations:
/// - soap_new__fimsdescription__dateType_issued(soap*) allocate
/// - soap_new__fimsdescription__dateType_issued(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__dateType_issued(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__dateType_issued(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__dateType_issued(soap*, _fimsdescription__dateType_issued*) deserialize from a stream
/// - int soap_write__fimsdescription__dateType_issued(soap, _fimsdescription__dateType_issued*) serialize to a stream
    class _fimsdescription__dateType_issued
    {
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="dateGroup">.
/// Attribute "startYear" of XSD type xs:gYear.
   @xsd__gYear*                          startYear                      0;	///< Optional attribute.
/// Attribute "startDate" of XSD type xs:date.
   @xsd__date*                           startDate                      0;	///< Optional attribute.
/// Attribute "startTime" of XSD type xs:time.
   @xsd__time*                           startTime                      0;	///< Optional attribute.
/// Attribute "endYear" of XSD type xs:gYear.
   @xsd__gYear*                          endYear                        0;	///< Optional attribute.
/// Attribute "endDate" of XSD type xs:date.
   @xsd__date*                           endDate                        0;	///< Optional attribute.
/// Attribute "endTime" of XSD type xs:time.
   @xsd__time*                           endTime                        0;	///< Optional attribute.
/// Attribute "period" of XSD type xs:string.
   @std::wstring*                        period                         0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *issued                         0;	///< Optional element.
/// class _fimsdescription__dateType_alternative operations:
/// - soap_new__fimsdescription__dateType_alternative(soap*) allocate
/// - soap_new__fimsdescription__dateType_alternative(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__dateType_alternative(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__dateType_alternative(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__dateType_alternative(soap*, _fimsdescription__dateType_alternative*) deserialize from a stream
/// - int soap_write__fimsdescription__dateType_alternative(soap, _fimsdescription__dateType_alternative*) serialize to a stream
    class _fimsdescription__dateType_alternative
    {
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="dateGroup">.
/// Attribute "startYear" of XSD type xs:gYear.
   @xsd__gYear*                          startYear                      0;	///< Optional attribute.
/// Attribute "startDate" of XSD type xs:date.
   @xsd__date*                           startDate                      0;	///< Optional attribute.
/// Attribute "startTime" of XSD type xs:time.
   @xsd__time*                           startTime                      0;	///< Optional attribute.
/// Attribute "endYear" of XSD type xs:gYear.
   @xsd__gYear*                          endYear                        0;	///< Optional attribute.
/// Attribute "endDate" of XSD type xs:date.
   @xsd__date*                           endDate                        0;	///< Optional attribute.
/// Attribute "endTime" of XSD type xs:time.
   @xsd__time*                           endTime                        0;	///< Optional attribute.
/// Attribute "period" of XSD type xs:string.
   @std::wstring*                        period                         0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *alternative                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":entityType is a complexType.
///
/// class fimsdescription__entityType operations:
/// - soap_new_fimsdescription__entityType(soap*) allocate
/// - soap_new_fimsdescription__entityType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__entityType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__entityType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__entityType(soap*, fimsdescription__entityType*) deserialize from a stream
/// - int soap_write_fimsdescription__entityType(soap, fimsdescription__entityType*) serialize to a stream
class fimsdescription__entityType
{ public:
/// Vector of fimsdescription__contactDetailsType* of length 0..unbounded.
    std::vector<fimsdescription__contactDetailsType*> contactDetails                 0;
/// Vector of fimsdescription__organisationDetailsType* of length 0..unbounded.
    std::vector<fimsdescription__organisationDetailsType*> organisationDetails            0;
/// Vector of role of length 0..unbounded.
    std::vector<
/// class _fimsdescription__entityType_role operations:
/// - soap_new__fimsdescription__entityType_role(soap*) allocate
/// - soap_new__fimsdescription__entityType_role(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__entityType_role(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__entityType_role(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__entityType_role(soap*, _fimsdescription__entityType_role*) deserialize from a stream
/// - int soap_write__fimsdescription__entityType_role(soap, _fimsdescription__entityType_role*) serialize to a stream
    class _fimsdescription__entityType_role
    {
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }>                                  *role                           0;
/// Attribute "entityId" of XSD type xs:anyURI.
   @xsd__anyURI*                         entityId                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":contactDetailsType is a complexType.
///
/// class fimsdescription__contactDetailsType operations:
/// - soap_new_fimsdescription__contactDetailsType(soap*) allocate
/// - soap_new_fimsdescription__contactDetailsType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__contactDetailsType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__contactDetailsType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__contactDetailsType(soap*, fimsdescription__contactDetailsType*) deserialize from a stream
/// - int soap_write_fimsdescription__contactDetailsType(soap, fimsdescription__contactDetailsType*) serialize to a stream
class fimsdescription__contactDetailsType
{ public:
//  BEGIN CHOICE <xs:choice>
/// @note <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union for <xs:choice>. Instead of being members of a union, the following members are declared optional. Only one member should be non-NULL by choice.
/// Element "name" of XSD type xs:string.
    std::wstring*                        name                          ;
//  BEGIN SEQUENCE <xs:sequence>
/// Element "givenName" of XSD type xs:string.
    std::wstring*                        givenName                     ;
/// Element "familyName" of XSD type xs:string.
    std::wstring*                        familyName                    ;
/// Vector of std::wstring of length 0..unbounded.
    std::vector<std::wstring           > otherGivenName                ;
/// Element "suffix" of XSD type xs:string.
    std::wstring*                        suffix                        ;
/// Element "salutation" of XSD type xs:string.
    std::wstring*                        salutation                    ;
//  END OF SEQUENCE
;
//  END OF CHOICE
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> username                       0;
/// Element "occupation" of XSD type "http://description.fims.tv":textElementType.
    fimsdescription__textElementType*    occupation                     0;	///< Optional element.
/// Vector of fimsdescription__detailsType* of length 0..unbounded.
    std::vector<fimsdescription__detailsType*> details                        0;
/// <PRE><BLOCKQUOTE>
///   For example, in the case the contact is a performing
///   actor/actress, the stage name will be the fictitious character's
///   name
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> stageName                      0;
/// <PRE><BLOCKQUOTE>
///   This is used to identify contacts related to the contact being
///   described
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> relatedContacts                0;
/// Attribute "contactId" of XSD type xs:anyURI.
   @xsd__anyURI*                         contactId                      0;	///< Optional attribute.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":organisationDetailsType is a complexType.
///
/// class fimsdescription__organisationDetailsType operations:
/// - soap_new_fimsdescription__organisationDetailsType(soap*) allocate
/// - soap_new_fimsdescription__organisationDetailsType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__organisationDetailsType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__organisationDetailsType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__organisationDetailsType(soap*, fimsdescription__organisationDetailsType*) deserialize from a stream
/// - int soap_write_fimsdescription__organisationDetailsType(soap, fimsdescription__organisationDetailsType*) serialize to a stream
class fimsdescription__organisationDetailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The organisation name is optional as an organisation maybe
///   identified by its OrganisationId
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> organisationName               0;
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > organisationCode               0;
/// <PRE><BLOCKQUOTE>
///   To identify one or more production area / department / service
///   where the resource was created/originated, in free text
/// </BLOCKQUOTE></PRE>
/// class _fimsdescription__organisationDetailsType_organisationDepartment operations:
/// - soap_new__fimsdescription__organisationDetailsType_organisationDepartment(soap*) allocate
/// - soap_new__fimsdescription__organisationDetailsType_organisationDepartment(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__organisationDetailsType_organisationDepartment(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__organisationDetailsType_organisationDepartment(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__organisationDetailsType_organisationDepartment(soap*, _fimsdescription__organisationDetailsType_organisationDepartment*) deserialize from a stream
/// - int soap_write__fimsdescription__organisationDetailsType_organisationDepartment(soap, _fimsdescription__organisationDetailsType_organisationDepartment*) serialize to a stream
    class _fimsdescription__organisationDetailsType_organisationDepartment
    {
/// INHERITED FROM fimsdescription__textElementType:
//  END OF INHERITED FROM fimsdescription__textElementType
/// Attribute "departmentId" of XSD type xs:anyURI.
   @xsd__anyURI*                         departmentId                   0;	///< Optional attribute.
    }                                   *organisationDepartment         0;	///< Optional element.
/// Vector of fimsdescription__detailsType* of length 0..unbounded.
    std::vector<fimsdescription__detailsType*> details                        0;
/// <PRE><BLOCKQUOTE>
///   Useful to provide contact information particularly is no other
///   person information is otherwise provided.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> contacts                       0;
/// Attribute "organisationId" of XSD type xs:anyURI.
   @xsd__anyURI*                         organisationId                 0;	///< Optional attribute.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":detailsType is a complexType.
///
/// class fimsdescription__detailsType operations:
/// - soap_new_fimsdescription__detailsType(soap*) allocate
/// - soap_new_fimsdescription__detailsType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__detailsType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__detailsType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__detailsType(soap*, fimsdescription__detailsType*) deserialize from a stream
/// - int soap_write_fimsdescription__detailsType(soap, fimsdescription__detailsType*) serialize to a stream
class fimsdescription__detailsType
{ public:
/// <PRE><BLOCKQUOTE>
///   The e-mail address through which the contact can be directly
///   accessed
/// </BLOCKQUOTE></PRE>
/// Vector of std::wstring of length 0..unbounded.
    std::vector<std::wstring           > emailAddress                   0;
/// <PRE><BLOCKQUOTE>
///   The web address where additional information can be found
///   regarding the company
/// </BLOCKQUOTE></PRE>
/// Element "webAddress" of XSD type xs:string.
    std::wstring*                        webAddress                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The organisation address is also the professional address of the
///   contact in the context of the content being described and in relation to the
///   contact occupation provided in the contact details
/// </BLOCKQUOTE></PRE>
/// Element "address" of XSD type "http://description.fims.tv":addressType.
    fimsdescription__addressType*        address                        0;	///< Optional element.
/// Element "telephoneNumber" of XSD type xs:string.
    std::wstring*                        telephoneNumber                0;	///< Optional element.
/// Element "mobileTelephoneNumber" of XSD type xs:string.
    std::wstring*                        mobileTelephoneNumber          0;	///< Optional element.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":addressType is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Provides address details for an organisation
/// </BLOCKQUOTE></PRE>
/// class fimsdescription__addressType operations:
/// - soap_new_fimsdescription__addressType(soap*) allocate
/// - soap_new_fimsdescription__addressType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__addressType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__addressType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__addressType(soap*, fimsdescription__addressType*) deserialize from a stream
/// - int soap_write_fimsdescription__addressType(soap, fimsdescription__addressType*) serialize to a stream
class fimsdescription__addressType
{ public:
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> addressLine                    0;
/// Element "addressTownCity" of XSD type "http://description.fims.tv":textElementType.
    fimsdescription__textElementType*    addressTownCity                0;	///< Optional element.
/// Element "addressCountyState" of XSD type "http://description.fims.tv":textElementType.
    fimsdescription__textElementType*    addressCountyState             0;	///< Optional element.
/// Element "addressDeliveryCode" of XSD type xs:string.
    std::wstring*                        addressDeliveryCode            0;	///< Optional element.
/// class _fimsdescription__addressType_country operations:
/// - soap_new__fimsdescription__addressType_country(soap*) allocate
/// - soap_new__fimsdescription__addressType_country(soap*, int num) allocate array
/// - soap_new_req__fimsdescription__addressType_country(soap*, ...) allocate, set required members
/// - soap_new_set__fimsdescription__addressType_country(soap*, ...) allocate, set all public members
/// - int soap_read__fimsdescription__addressType_country(soap*, _fimsdescription__addressType_country*) deserialize from a stream
/// - int soap_write__fimsdescription__addressType_country(soap, _fimsdescription__addressType_country*) serialize to a stream
    class _fimsdescription__addressType_country
    {
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *country                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":languageType is a complexType.
///
/// class fimsdescription__languageType operations:
/// - soap_new_fimsdescription__languageType(soap*) allocate
/// - soap_new_fimsdescription__languageType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__languageType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__languageType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__languageType(soap*, fimsdescription__languageType*) deserialize from a stream
/// - int soap_write_fimsdescription__languageType(soap, fimsdescription__languageType*) serialize to a stream
class fimsdescription__languageType
{ public:
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":relationType is a complexType.
///
/// class fimsdescription__relationType operations:
/// - soap_new_fimsdescription__relationType(soap*) allocate
/// - soap_new_fimsdescription__relationType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__relationType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__relationType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__relationType(soap*, fimsdescription__relationType*) deserialize from a stream
/// - int soap_write_fimsdescription__relationType(soap, fimsdescription__relationType*) serialize to a stream
class fimsdescription__relationType
{ public:
/// Element "relationIdentifier" of XSD type "http://description.fims.tv":identifierType.
    fimsdescription__identifierType*     relationIdentifier             1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   A link to related material.
/// </BLOCKQUOTE></PRE>
/// Element "relationLink" of XSD type xs:anyURI.
    xsd__anyURI                          relationLink                   1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   If exists, it provides the ranking/running order within an ordered
///   list.
/// </BLOCKQUOTE></PRE>
/// Attribute "runningOrderNumber" of XSD type xs:integer.
   @xsd__integer*                        runningOrderNumber             0;	///< Optional attribute.
/// Attribute "totalNumberOfGroupMembers" of XSD type xs:integer.
   @xsd__integer*                        totalNumberOfGroupMembers      0;	///< Optional attribute.
/// Attribute "orderedGroupFlag" of XSD type xs:boolean.
   @bool*                                orderedGroupFlag               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Optional additional contextual information.
/// </BLOCKQUOTE></PRE>
/// Attribute "note" of XSD type xs:string.
   @std::wstring*                        note                           0;	///< Optional attribute.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://temp/edlprovider":EdlCreateRequestType is a complexType with complexContent extension of XSD type "http://temp/edlprovider":EdlCreateRequestBaseType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the request to create a EDL for the specified type and frame rate.
/// </BLOCKQUOTE></PRE>
/// class edlprovider__EdlCreateRequestType operations:
/// - soap_new_edlprovider__EdlCreateRequestType(soap*) allocate
/// - soap_new_edlprovider__EdlCreateRequestType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__EdlCreateRequestType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__EdlCreateRequestType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__EdlCreateRequestType(soap*, edlprovider__EdlCreateRequestType*) deserialize from a stream
/// - int soap_write_edlprovider__EdlCreateRequestType(soap, edlprovider__EdlCreateRequestType*) serialize to a stream
class edlprovider__EdlCreateRequestType : public edlprovider__EdlCreateRequestBaseType
{ public:
/*  INHERITED FROM edlprovider__EdlCreateRequestBaseType:
/// <PRE><BLOCKQUOTE>
///   The EDL type to generate, the types available can be obtained using getInstalledEdls.
/// </BLOCKQUOTE></PRE>
/// Element "edlType" of XSD type xs:string.
    std::wstring                         edlType                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of clips to include in the created EDL.
/// </BLOCKQUOTE></PRE>
/// Element "clips" of XSD type "http://temp/edlprovider":ArrayOfClips.
    edlprovider__ArrayOfClips*           clips                          0;	///< Nillable pointer.
/// <PRE><BLOCKQUOTE>
///   The EDL sequence name. This might mean something different in different EDL's.
/// </BLOCKQUOTE></PRE>
/// Element "edlSequenceName" of XSD type xs:string.
    std::wstring*                        edlSequenceName                0;	///< Nillable pointer.
    END OF INHERITED FROM edlprovider__EdlCreateRequestBaseType */
/// <PRE><BLOCKQUOTE>
///   The EDL frames per second.
/// </BLOCKQUOTE></PRE>
/// Element "edlFramesPerSecond" of XSD type "http://base.fims.tv":RationalType.
    fims__RationalType*                  edlFramesPerSecond             1;	///< Required element.
};

/// @brief "http://temp/edlprovider":EdlCreateRequestDoubleType is a complexType with complexContent extension of XSD type "http://temp/edlprovider":EdlCreateRequestBaseType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the request to create a EDL for the specified type and frame rate.
/// </BLOCKQUOTE></PRE>
/// class edlprovider__EdlCreateRequestDoubleType operations:
/// - soap_new_edlprovider__EdlCreateRequestDoubleType(soap*) allocate
/// - soap_new_edlprovider__EdlCreateRequestDoubleType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__EdlCreateRequestDoubleType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__EdlCreateRequestDoubleType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__EdlCreateRequestDoubleType(soap*, edlprovider__EdlCreateRequestDoubleType*) deserialize from a stream
/// - int soap_write_edlprovider__EdlCreateRequestDoubleType(soap, edlprovider__EdlCreateRequestDoubleType*) serialize to a stream
class edlprovider__EdlCreateRequestDoubleType : public edlprovider__EdlCreateRequestBaseType
{ public:
/*  INHERITED FROM edlprovider__EdlCreateRequestBaseType:
/// <PRE><BLOCKQUOTE>
///   The EDL type to generate, the types available can be obtained using getInstalledEdls.
/// </BLOCKQUOTE></PRE>
/// Element "edlType" of XSD type xs:string.
    std::wstring                         edlType                        1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of clips to include in the created EDL.
/// </BLOCKQUOTE></PRE>
/// Element "clips" of XSD type "http://temp/edlprovider":ArrayOfClips.
    edlprovider__ArrayOfClips*           clips                          0;	///< Nillable pointer.
/// <PRE><BLOCKQUOTE>
///   The EDL sequence name. This might mean something different in different EDL's.
/// </BLOCKQUOTE></PRE>
/// Element "edlSequenceName" of XSD type xs:string.
    std::wstring*                        edlSequenceName                0;	///< Nillable pointer.
    END OF INHERITED FROM edlprovider__EdlCreateRequestBaseType */
/// <PRE><BLOCKQUOTE>
///   The EDL frames per second.
/// </BLOCKQUOTE></PRE>
/// Element "edlFramesPerSecond" of XSD type xs:double.
    double                               edlFramesPerSecond             1;	///< Required element.
};

/// @brief "http://temp/edlprovider":EdlProviderFaultType is a complexType with complexContent extension of XSD type "http://base.fims.tv":FaultType.
///
/// <PRE><BLOCKQUOTE>
///   Fault information for the EDL provider service.
/// </BLOCKQUOTE></PRE>
/// class edlprovider__EdlProviderFaultType operations:
/// - soap_new_edlprovider__EdlProviderFaultType(soap*) allocate
/// - soap_new_edlprovider__EdlProviderFaultType(soap*, int num) allocate array
/// - soap_new_req_edlprovider__EdlProviderFaultType(soap*, ...) allocate, set required members
/// - soap_new_set_edlprovider__EdlProviderFaultType(soap*, ...) allocate, set all public members
/// - int soap_read_edlprovider__EdlProviderFaultType(soap*, edlprovider__EdlProviderFaultType*) deserialize from a stream
/// - int soap_write_edlprovider__EdlProviderFaultType(soap, edlprovider__EdlProviderFaultType*) serialize to a stream
class edlprovider__EdlProviderFaultType : public fims__FaultType
{ public:
/*  INHERITED FROM fims__FaultType:
/// <PRE><BLOCKQUOTE>
///   The error code specified in ErrorCodeType.
/// </BLOCKQUOTE></PRE>
/// Element "code" of XSD type "http://base.fims.tv":ErrorCodeType.
    enum fims__ErrorCodeType             code                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   An optional description of the error.
/// </BLOCKQUOTE></PRE>
/// Element "description" of XSD type xs:string.
    std::wstring*                        description                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   This optional field can provide a detailed description of the error.
/// </BLOCKQUOTE></PRE>
/// Element "detail" of XSD type xs:string.
    std::wstring*                        detail                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Additional description of the lower-level errors.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__InnerFaultType* of length 0..unbounded.
    std::vector<fims__InnerFaultType*  > innerFault                     0;
    END OF INHERITED FROM fims__FaultType */
/// <PRE><BLOCKQUOTE>
///   EDL provider service-specific error codes as detailed in EdlProviderErrorCodeType.
/// </BLOCKQUOTE></PRE>
/// Element "extendedCode" of XSD type "http://temp/edlprovider":EdlProviderErrorCodeType.
    enum edlprovider__EdlProviderErrorCodeType*  extendedCode                   0;	///< Optional element.
};

/// @brief "http://base.fims.tv":ResourceType is an abstract complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceReferenceType.
///
/// <PRE><BLOCKQUOTE>
///   Resources include queues, jobs, assets, descriptions, formats, and profiles.
/// </BLOCKQUOTE></PRE>
/// class fims__ResourceType operations:
/// - soap_new_fims__ResourceType(soap*) allocate
/// - soap_new_fims__ResourceType(soap*, int num) allocate array
/// - soap_new_req_fims__ResourceType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ResourceType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ResourceType(soap*, fims__ResourceType*) deserialize from a stream
/// - int soap_write_fims__ResourceType(soap, fims__ResourceType*) serialize to a stream
class fims__ResourceType : public fims__ResourceReferenceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
};

/// @brief "http://base.fims.tv":CaptioningFormatType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Describes a captioning format and its purpose.
/// </BLOCKQUOTE></PRE>
/// class fims__CaptioningFormatType operations:
/// - soap_new_fims__CaptioningFormatType(soap*) allocate
/// - soap_new_fims__CaptioningFormatType(soap*, int num) allocate array
/// - soap_new_req_fims__CaptioningFormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__CaptioningFormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__CaptioningFormatType(soap*, fims__CaptioningFormatType*) deserialize from a stream
/// - int soap_write_fims__CaptioningFormatType(soap, fims__CaptioningFormatType*) serialize to a stream
class fims__CaptioningFormatType
{ public:
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
/// <PRE><BLOCKQUOTE>
///   Location of the file with the captioning/subtitling data. See '@captioningSourceUri' in EBU Tech 3293
///   for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "captioningSourceUri" of XSD type xs:anyURI.
   @xsd__anyURI*                         captioningSourceUri            0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Language of the caption as delivered (e.g., en-UK). See 'captioningFormat - dc:language' in EBU Tech
///   3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "language" of XSD type xs:language.
   @xsd__language*                       language                       0;	///< Optional attribute.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="formatGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text field. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatLabel" of XSD type xs:string.
   @std::wstring*                        formatLabel                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   An optional definition. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatDefinition" of XSD type xs:string.
   @std::wstring*                        formatDefinition               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   A link to a term or identification of a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         formatLink                     0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":TechnicalAttributeType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Allows users / implementers to define their own technical parameters as string for which a format can be defined to restrict the string format. See 'TechnicalAttributeString' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// class fims__TechnicalAttributeType operations:
/// - soap_new_fims__TechnicalAttributeType(soap*) allocate
/// - soap_new_fims__TechnicalAttributeType(soap*, int num) allocate array
/// - soap_new_req_fims__TechnicalAttributeType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__TechnicalAttributeType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__TechnicalAttributeType(soap*, fims__TechnicalAttributeType*) deserialize from a stream
/// - int soap_write_fims__TechnicalAttributeType(soap, fims__TechnicalAttributeType*) serialize to a stream
class fims__TechnicalAttributeType
{ public:
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="formatGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text field. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatLabel" of XSD type xs:string.
   @std::wstring*                        formatLabel                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   An optional definition. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatDefinition" of XSD type xs:string.
   @std::wstring*                        formatDefinition               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   A link to a term or identification of a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         formatLink                     0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":LengthType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   A length value and its unit of measurement.
/// </BLOCKQUOTE></PRE>
/// class fims__LengthType operations:
/// - soap_new_fims__LengthType(soap*) allocate
/// - soap_new_fims__LengthType(soap*, int num) allocate array
/// - soap_new_req_fims__LengthType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__LengthType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__LengthType(soap*, fims__LengthType*) deserialize from a stream
/// - int soap_write_fims__LengthType(soap, fims__LengthType*) serialize to a stream
class fims__LengthType
{ public:
/// __item wraps "xs:nonNegativeInteger" simpleContent.
    xsd__nonNegativeInteger              __item                        ;
/// <PRE><BLOCKQUOTE>
///   Specifies the unit in which the length is expressed. See '@unit' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "unit" of XSD type xs:string.
   @std::wstring*                        unit                           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":RationalType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   A rational value expressed by its fraction of a second numerator and denominator components. Rational values can be used to represent edit rates. For example, a frame rate of 29.97 would be represented as 30 corrected by 1000 (numerator) / 1001 (denominator).
/// </BLOCKQUOTE></PRE>
/// class fims__RationalType operations:
/// - soap_new_fims__RationalType(soap*) allocate
/// - soap_new_fims__RationalType(soap*, int num) allocate array
/// - soap_new_req_fims__RationalType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__RationalType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__RationalType(soap*, fims__RationalType*) deserialize from a stream
/// - int soap_write_fims__RationalType(soap, fims__RationalType*) serialize to a stream
class fims__RationalType
{ public:
/// __item wraps "xs:long" simpleContent.
    LONG64                               __item                        ;
/// <PRE><BLOCKQUOTE>
///   The numerator of the rational value.
/// </BLOCKQUOTE></PRE>
/// Attribute "numerator" of XSD type xs:positiveInteger.
   @xsd__positiveInteger                 numerator                      1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The denominator of the rational value.
/// </BLOCKQUOTE></PRE>
/// Attribute "denominator" of XSD type xs:positiveInteger.
   @xsd__positiveInteger                 denominator                    1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":ProcessedInfoByBytesType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ProcessedInfoType.
///
/// <PRE><BLOCKQUOTE>
///   Statistics on number of bytes processed.
/// </BLOCKQUOTE></PRE>
/// class fims__ProcessedInfoByBytesType operations:
/// - soap_new_fims__ProcessedInfoByBytesType(soap*) allocate
/// - soap_new_fims__ProcessedInfoByBytesType(soap*, int num) allocate array
/// - soap_new_req_fims__ProcessedInfoByBytesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ProcessedInfoByBytesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ProcessedInfoByBytesType(soap*, fims__ProcessedInfoByBytesType*) deserialize from a stream
/// - int soap_write_fims__ProcessedInfoByBytesType(soap, fims__ProcessedInfoByBytesType*) serialize to a stream
class fims__ProcessedInfoByBytesType : public fims__ProcessedInfoType
{ public:
/*  INHERITED FROM fims__ProcessedInfoType:
/// <PRE><BLOCKQUOTE>
///   The percentage of job completed. The percentage can be based on one of two metrics: number of bytes processed, or number of frames processed (e.g. for transcoding video files). If the "processedBytesCount" metric is provided, then the percentage is based on number of bytes processed. If the "processedFramesCount" metric is provided, then the percentage is based on the number of processed frames.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
/// Value range is [0..100].
    xsd__nonNegativeInteger                                            
                                         percentageProcessedCompleted   1;	///< Required element.
    END OF INHERITED FROM fims__ProcessedInfoType */
/// <PRE><BLOCKQUOTE>
///   The number of bytes processed from the start of the job.
/// </BLOCKQUOTE></PRE>
/// Element "processedBytesCount" of XSD type xs:unsignedLong.
    ULONG64                              processedBytesCount            1;	///< Required element.
};

/// @brief "http://base.fims.tv":ProcessedInfoByFramesType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ProcessedInfoType.
///
/// <PRE><BLOCKQUOTE>
///   Statistics on number of frames processed.
/// </BLOCKQUOTE></PRE>
/// class fims__ProcessedInfoByFramesType operations:
/// - soap_new_fims__ProcessedInfoByFramesType(soap*) allocate
/// - soap_new_fims__ProcessedInfoByFramesType(soap*, int num) allocate array
/// - soap_new_req_fims__ProcessedInfoByFramesType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ProcessedInfoByFramesType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ProcessedInfoByFramesType(soap*, fims__ProcessedInfoByFramesType*) deserialize from a stream
/// - int soap_write_fims__ProcessedInfoByFramesType(soap, fims__ProcessedInfoByFramesType*) serialize to a stream
class fims__ProcessedInfoByFramesType : public fims__ProcessedInfoType
{ public:
/*  INHERITED FROM fims__ProcessedInfoType:
/// <PRE><BLOCKQUOTE>
///   The percentage of job completed. The percentage can be based on one of two metrics: number of bytes processed, or number of frames processed (e.g. for transcoding video files). If the "processedBytesCount" metric is provided, then the percentage is based on number of bytes processed. If the "processedFramesCount" metric is provided, then the percentage is based on the number of processed frames.
/// </BLOCKQUOTE></PRE>
/// Length of this string is 0..unbounded.
/// Value range is [0..100].
    xsd__nonNegativeInteger                                            
                                         percentageProcessedCompleted   1;	///< Required element.
    END OF INHERITED FROM fims__ProcessedInfoType */
/// <PRE><BLOCKQUOTE>
///   The number of frames (for audiovisual content only) processed from the beginning of the job.
/// </BLOCKQUOTE></PRE>
/// Element "processedFramesCount" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger              processedFramesCount           1;	///< Required element.
};

/// @brief "http://base.fims.tv":StartProcessByNoWaitType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StartProcessType.
///
/// <PRE><BLOCKQUOTE>
///   Start a real-time process with no initial wait.
/// </BLOCKQUOTE></PRE>
/// class fims__StartProcessByNoWaitType operations:
/// - soap_new_fims__StartProcessByNoWaitType(soap*) allocate
/// - soap_new_fims__StartProcessByNoWaitType(soap*, int num) allocate array
/// - soap_new_req_fims__StartProcessByNoWaitType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartProcessByNoWaitType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartProcessByNoWaitType(soap*, fims__StartProcessByNoWaitType*) deserialize from a stream
/// - int soap_write_fims__StartProcessByNoWaitType(soap, fims__StartProcessByNoWaitType*) serialize to a stream
class fims__StartProcessByNoWaitType : public fims__StartProcessType
{ public:
/*  INHERITED FROM fims__StartProcessType:
    END OF INHERITED FROM fims__StartProcessType */
/// <PRE><BLOCKQUOTE>
///   Actual time that the process started.
/// </BLOCKQUOTE></PRE>
/// Element "actualStartTime" of XSD type xs:dateTime.
    time_t*                              actualStartTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time mark indicating the time that the process started as a value measured along the
///   associated audio and/or video stream.
/// </BLOCKQUOTE></PRE>
/// Element "actualStartMark" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  actualStartMark                0;	///< Optional element.
};

/// @brief "http://base.fims.tv":StartProcessByTimeType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StartProcessType.
///
/// <PRE><BLOCKQUOTE>
///   Provides the time when a real-time process should start.
/// </BLOCKQUOTE></PRE>
/// class fims__StartProcessByTimeType operations:
/// - soap_new_fims__StartProcessByTimeType(soap*) allocate
/// - soap_new_fims__StartProcessByTimeType(soap*, int num) allocate array
/// - soap_new_req_fims__StartProcessByTimeType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartProcessByTimeType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartProcessByTimeType(soap*, fims__StartProcessByTimeType*) deserialize from a stream
/// - int soap_write_fims__StartProcessByTimeType(soap, fims__StartProcessByTimeType*) serialize to a stream
class fims__StartProcessByTimeType : public fims__StartProcessType
{ public:
/*  INHERITED FROM fims__StartProcessType:
    END OF INHERITED FROM fims__StartProcessType */
/// <PRE><BLOCKQUOTE>
///   The time for starting a real-time process.
/// </BLOCKQUOTE></PRE>
/// Element "time" of XSD type xs:dateTime.
    time_t                               time                           1;	///< Required element.
};

/// @brief "http://base.fims.tv":StartProcessByTimeMarkType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StartProcessType.
///
/// <PRE><BLOCKQUOTE>
///   Provides a video or audio stream time mark value to indicate the required start of a real-time process.
/// </BLOCKQUOTE></PRE>
/// class fims__StartProcessByTimeMarkType operations:
/// - soap_new_fims__StartProcessByTimeMarkType(soap*) allocate
/// - soap_new_fims__StartProcessByTimeMarkType(soap*, int num) allocate array
/// - soap_new_req_fims__StartProcessByTimeMarkType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartProcessByTimeMarkType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartProcessByTimeMarkType(soap*, fims__StartProcessByTimeMarkType*) deserialize from a stream
/// - int soap_write_fims__StartProcessByTimeMarkType(soap, fims__StartProcessByTimeMarkType*) serialize to a stream
class fims__StartProcessByTimeMarkType : public fims__StartProcessType
{ public:
/*  INHERITED FROM fims__StartProcessType:
    END OF INHERITED FROM fims__StartProcessType */
/// <PRE><BLOCKQUOTE>
///   A video and audio time point reference.
/// </BLOCKQUOTE></PRE>
/// Element "timeMark" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  timeMark                       1;	///< Required element.
};

/// @brief "http://base.fims.tv":StartProcessByServiceDefinedTimeType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StartProcessType.
///
/// <PRE><BLOCKQUOTE>
///   A service-specific time mechanism specifies when a process is required to start.
/// </BLOCKQUOTE></PRE>
/// class fims__StartProcessByServiceDefinedTimeType operations:
/// - soap_new_fims__StartProcessByServiceDefinedTimeType(soap*) allocate
/// - soap_new_fims__StartProcessByServiceDefinedTimeType(soap*, int num) allocate array
/// - soap_new_req_fims__StartProcessByServiceDefinedTimeType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartProcessByServiceDefinedTimeType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartProcessByServiceDefinedTimeType(soap*, fims__StartProcessByServiceDefinedTimeType*) deserialize from a stream
/// - int soap_write_fims__StartProcessByServiceDefinedTimeType(soap, fims__StartProcessByServiceDefinedTimeType*) serialize to a stream
class fims__StartProcessByServiceDefinedTimeType : public fims__StartProcessType
{ public:
/*  INHERITED FROM fims__StartProcessType:
    END OF INHERITED FROM fims__StartProcessType */
/// <PRE><BLOCKQUOTE>
///   Actual time that the process started.
/// </BLOCKQUOTE></PRE>
/// Element "actualStartTime" of XSD type xs:dateTime.
    time_t*                              actualStartTime                0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time mark indicating the time that the process started as a value measured along the
///   associated audio and/or video stream.
/// </BLOCKQUOTE></PRE>
/// Element "actualStartMark" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  actualStartMark                0;	///< Optional element.
};

/// @brief "http://base.fims.tv":StopProcessByTimeType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StopProcessType.
///
/// <PRE><BLOCKQUOTE>
///   The time when a real-time process should stop.
/// </BLOCKQUOTE></PRE>
/// class fims__StopProcessByTimeType operations:
/// - soap_new_fims__StopProcessByTimeType(soap*) allocate
/// - soap_new_fims__StopProcessByTimeType(soap*, int num) allocate array
/// - soap_new_req_fims__StopProcessByTimeType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StopProcessByTimeType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StopProcessByTimeType(soap*, fims__StopProcessByTimeType*) deserialize from a stream
/// - int soap_write_fims__StopProcessByTimeType(soap, fims__StopProcessByTimeType*) serialize to a stream
class fims__StopProcessByTimeType : public fims__StopProcessType
{ public:
/*  INHERITED FROM fims__StopProcessType:
    END OF INHERITED FROM fims__StopProcessType */
/// <PRE><BLOCKQUOTE>
///   Time to stop a real-time process.
/// </BLOCKQUOTE></PRE>
/// Element "time" of XSD type xs:dateTime.
    time_t                               time                           1;	///< Required element.
};

/// @brief "http://base.fims.tv":StopProcessByDurationType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StopProcessType.
///
/// <PRE><BLOCKQUOTE>
///   Total duration of the real time process.
/// </BLOCKQUOTE></PRE>
/// class fims__StopProcessByDurationType operations:
/// - soap_new_fims__StopProcessByDurationType(soap*) allocate
/// - soap_new_fims__StopProcessByDurationType(soap*, int num) allocate array
/// - soap_new_req_fims__StopProcessByDurationType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StopProcessByDurationType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StopProcessByDurationType(soap*, fims__StopProcessByDurationType*) deserialize from a stream
/// - int soap_write_fims__StopProcessByDurationType(soap, fims__StopProcessByDurationType*) serialize to a stream
class fims__StopProcessByDurationType : public fims__StopProcessType
{ public:
/*  INHERITED FROM fims__StopProcessType:
    END OF INHERITED FROM fims__StopProcessType */
/// <PRE><BLOCKQUOTE>
///   Total required duration of the real-time process.
/// </BLOCKQUOTE></PRE>
/// Element "duration" of XSD type "http://baseTime.fims.tv":DurationType.
    fimstime__DurationType*              duration                       1;	///< Required element.
};

/// @brief "http://base.fims.tv":StopProcessByTimeMarkType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StopProcessType.
///
/// <PRE><BLOCKQUOTE>
///   A video or audio stream time reference when the real-time process stops.
/// </BLOCKQUOTE></PRE>
/// class fims__StopProcessByTimeMarkType operations:
/// - soap_new_fims__StopProcessByTimeMarkType(soap*) allocate
/// - soap_new_fims__StopProcessByTimeMarkType(soap*, int num) allocate array
/// - soap_new_req_fims__StopProcessByTimeMarkType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StopProcessByTimeMarkType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StopProcessByTimeMarkType(soap*, fims__StopProcessByTimeMarkType*) deserialize from a stream
/// - int soap_write_fims__StopProcessByTimeMarkType(soap, fims__StopProcessByTimeMarkType*) serialize to a stream
class fims__StopProcessByTimeMarkType : public fims__StopProcessType
{ public:
/*  INHERITED FROM fims__StopProcessType:
    END OF INHERITED FROM fims__StopProcessType */
/// <PRE><BLOCKQUOTE>
///   A video or audio time point reference.
/// </BLOCKQUOTE></PRE>
/// Element "timeMark" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  timeMark                       1;	///< Required element.
};

/// @brief "http://base.fims.tv":StopProcessByServiceDefinedTimeType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StopProcessType.
///
/// <PRE><BLOCKQUOTE>
///   A service-specific time mechanism specifies when a process is required to stop.
/// </BLOCKQUOTE></PRE>
/// class fims__StopProcessByServiceDefinedTimeType operations:
/// - soap_new_fims__StopProcessByServiceDefinedTimeType(soap*) allocate
/// - soap_new_fims__StopProcessByServiceDefinedTimeType(soap*, int num) allocate array
/// - soap_new_req_fims__StopProcessByServiceDefinedTimeType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StopProcessByServiceDefinedTimeType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StopProcessByServiceDefinedTimeType(soap*, fims__StopProcessByServiceDefinedTimeType*) deserialize from a stream
/// - int soap_write_fims__StopProcessByServiceDefinedTimeType(soap, fims__StopProcessByServiceDefinedTimeType*) serialize to a stream
class fims__StopProcessByServiceDefinedTimeType : public fims__StopProcessType
{ public:
/*  INHERITED FROM fims__StopProcessType:
    END OF INHERITED FROM fims__StopProcessType */
/// <PRE><BLOCKQUOTE>
///   Actual time that the process stopped.
/// </BLOCKQUOTE></PRE>
/// Element "actualStopTime" of XSD type xs:dateTime.
    time_t*                              actualStopTime                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time mark indicating the time that the process stopped as a value measured along the the
///   associated audio and/or video stream.
/// </BLOCKQUOTE></PRE>
/// Element "actualStopMark" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  actualStopMark                 0;	///< Optional element.
};

/// @brief "http://base.fims.tv":StopProcessByOpenEndType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StopProcessType.
///
/// <PRE><BLOCKQUOTE>
///   The real-time process is to continue indefinitely until a stop command (manageJobRequest) is received.
/// </BLOCKQUOTE></PRE>
/// class fims__StopProcessByOpenEndType operations:
/// - soap_new_fims__StopProcessByOpenEndType(soap*) allocate
/// - soap_new_fims__StopProcessByOpenEndType(soap*, int num) allocate array
/// - soap_new_req_fims__StopProcessByOpenEndType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StopProcessByOpenEndType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StopProcessByOpenEndType(soap*, fims__StopProcessByOpenEndType*) deserialize from a stream
/// - int soap_write_fims__StopProcessByOpenEndType(soap, fims__StopProcessByOpenEndType*) serialize to a stream
class fims__StopProcessByOpenEndType : public fims__StopProcessType
{ public:
/*  INHERITED FROM fims__StopProcessType:
    END OF INHERITED FROM fims__StopProcessType */
/// <PRE><BLOCKQUOTE>
///   Actual time that the process stopped.
/// </BLOCKQUOTE></PRE>
/// Element "actualStopTime" of XSD type xs:dateTime.
    time_t*                              actualStopTime                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Time mark indicating the time that the process stopped as a value measured along the the
///   associated audio and/or video stream.
/// </BLOCKQUOTE></PRE>
/// Element "actualStopMark" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  actualStopMark                 0;	///< Optional element.
};

/// @brief "http://base.fims.tv":StartJobByNoWaitType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StartJobType.
///
/// <PRE><BLOCKQUOTE>
///   Start a job as soon as possible.
/// </BLOCKQUOTE></PRE>
/// class fims__StartJobByNoWaitType operations:
/// - soap_new_fims__StartJobByNoWaitType(soap*) allocate
/// - soap_new_fims__StartJobByNoWaitType(soap*, int num) allocate array
/// - soap_new_req_fims__StartJobByNoWaitType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartJobByNoWaitType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartJobByNoWaitType(soap*, fims__StartJobByNoWaitType*) deserialize from a stream
/// - int soap_write_fims__StartJobByNoWaitType(soap, fims__StartJobByNoWaitType*) serialize to a stream
class fims__StartJobByNoWaitType : public fims__StartJobType
{ public:
/*  INHERITED FROM fims__StartJobType:
    END OF INHERITED FROM fims__StartJobType */
};

/// @brief "http://base.fims.tv":StartJobByTimeType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StartJobType.
///
/// <PRE><BLOCKQUOTE>
///   Provides a time when the job should start.
/// </BLOCKQUOTE></PRE>
/// class fims__StartJobByTimeType operations:
/// - soap_new_fims__StartJobByTimeType(soap*) allocate
/// - soap_new_fims__StartJobByTimeType(soap*, int num) allocate array
/// - soap_new_req_fims__StartJobByTimeType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartJobByTimeType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartJobByTimeType(soap*, fims__StartJobByTimeType*) deserialize from a stream
/// - int soap_write_fims__StartJobByTimeType(soap, fims__StartJobByTimeType*) serialize to a stream
class fims__StartJobByTimeType : public fims__StartJobType
{ public:
/*  INHERITED FROM fims__StartJobType:
    END OF INHERITED FROM fims__StartJobType */
/// <PRE><BLOCKQUOTE>
///   Time when the job should start.
/// </BLOCKQUOTE></PRE>
/// Element "time" of XSD type xs:dateTime.
    time_t                               time                           1;	///< Required element.
};

/// @brief "http://base.fims.tv":StartJobByLatestType is a complexType with complexContent extension of XSD type "http://base.fims.tv":StartJobType.
///
/// <PRE><BLOCKQUOTE>
///   Start the job as close as possible to the defined start process time.
/// </BLOCKQUOTE></PRE>
/// class fims__StartJobByLatestType operations:
/// - soap_new_fims__StartJobByLatestType(soap*) allocate
/// - soap_new_fims__StartJobByLatestType(soap*, int num) allocate array
/// - soap_new_req_fims__StartJobByLatestType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StartJobByLatestType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StartJobByLatestType(soap*, fims__StartJobByLatestType*) deserialize from a stream
/// - int soap_write_fims__StartJobByLatestType(soap, fims__StartJobByLatestType*) serialize to a stream
class fims__StartJobByLatestType : public fims__StartJobType
{ public:
/*  INHERITED FROM fims__StartJobType:
    END OF INHERITED FROM fims__StartJobType */
};

/// @brief "http://base.fims.tv":QueryJobRequestByIDType is a complexType with complexContent extension of XSD type "http://base.fims.tv":QueryJobRequestType.
///
/// <PRE><BLOCKQUOTE>
///   This type is part of the FIMS service common status interface and provides a mechanism query jobs and retrieve information associated to them. A client can request the status of multiple identified jobs.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryJobRequestByIDType operations:
/// - soap_new_fims__QueryJobRequestByIDType(soap*) allocate
/// - soap_new_fims__QueryJobRequestByIDType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryJobRequestByIDType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryJobRequestByIDType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryJobRequestByIDType(soap*, fims__QueryJobRequestByIDType*) deserialize from a stream
/// - int soap_write_fims__QueryJobRequestByIDType(soap, fims__QueryJobRequestByIDType*) serialize to a stream
class fims__QueryJobRequestByIDType : public fims__QueryJobRequestType
{ public:
/*  INHERITED FROM fims__QueryJobRequestType:
/// <PRE><BLOCKQUOTE>
///   Level of status details to be returned for the jobs.
/// </BLOCKQUOTE></PRE>
/// Element "jobInfoSelection" of XSD type "http://base.fims.tv":JobInfoSelectionType.
    enum fims__JobInfoSelectionType      jobInfoSelection               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
    END OF INHERITED FROM fims__QueryJobRequestType */
/// <PRE><BLOCKQUOTE>
///   This element carries the IDs of one or more jobs for which status is to be retrieved.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__UID of length 1..unbounded.
    std::vector<fims__UID              > jobID                          1;
};

/// @brief "http://base.fims.tv":QueryJobRequestByFilterType is a complexType with complexContent extension of XSD type "http://base.fims.tv":QueryJobRequestType.
///
/// <PRE><BLOCKQUOTE>
///   This type is part of the FIMS service common status interface and provides a mechanism query jobs and retrieve information associated to them. A client can request the status of jobs that meet requirements specified by a filter object.
/// </BLOCKQUOTE></PRE>
/// class fims__QueryJobRequestByFilterType operations:
/// - soap_new_fims__QueryJobRequestByFilterType(soap*) allocate
/// - soap_new_fims__QueryJobRequestByFilterType(soap*, int num) allocate array
/// - soap_new_req_fims__QueryJobRequestByFilterType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueryJobRequestByFilterType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueryJobRequestByFilterType(soap*, fims__QueryJobRequestByFilterType*) deserialize from a stream
/// - int soap_write_fims__QueryJobRequestByFilterType(soap, fims__QueryJobRequestByFilterType*) serialize to a stream
class fims__QueryJobRequestByFilterType : public fims__QueryJobRequestType
{ public:
/*  INHERITED FROM fims__QueryJobRequestType:
/// <PRE><BLOCKQUOTE>
///   Level of status details to be returned for the jobs.
/// </BLOCKQUOTE></PRE>
/// Element "jobInfoSelection" of XSD type "http://base.fims.tv":JobInfoSelectionType.
    enum fims__JobInfoSelectionType      jobInfoSelection               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The current schema FIMS version.
/// </BLOCKQUOTE></PRE>
/// Attribute "version" of XSD type "http://base.fims.tv":CurrentVersion.
   @enum fims__CurrentVersion            version                        1;	///< Required attribute.
    END OF INHERITED FROM fims__QueryJobRequestType */
/// <PRE><BLOCKQUOTE>
///   This element defines the filtering parameters to list jobs for which status is to be retrieved.
/// </BLOCKQUOTE></PRE>
/// Element "listFilter" of XSD type "http://base.fims.tv":ListFilterType.
    fims__ListFilterType*                listFilter                     1;	///< Required element.
};

/// @brief "http://base.fims.tv":ContentEventType is an abstract complexType with complexContent extension of XSD type "http://base.fims.tv":EventPayloadType.
///
/// <PRE><BLOCKQUOTE>
///   The Content Event Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__ContentEventType operations:
/// - soap_new_fims__ContentEventType(soap*) allocate
/// - soap_new_fims__ContentEventType(soap*, int num) allocate array
/// - soap_new_req_fims__ContentEventType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContentEventType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContentEventType(soap*, fims__ContentEventType*) deserialize from a stream
/// - int soap_write_fims__ContentEventType(soap, fims__ContentEventType*) serialize to a stream
class fims__ContentEventType : public fims__EventPayloadType
{ public:
/*  INHERITED FROM fims__EventPayloadType:
    END OF INHERITED FROM fims__EventPayloadType */
/// <PRE><BLOCKQUOTE>
///   The Target Resource entry for the Content Event.
/// </BLOCKQUOTE></PRE>
/// Element "targetResourceReference" of XSD type "http://base.fims.tv":ResourceReferenceType.
    fims__ResourceReferenceType*         targetResourceReference        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
};

/// @brief "http://base.fims.tv":SystemEventType is an abstract complexType with complexContent extension of XSD type "http://base.fims.tv":EventPayloadType.
///
/// <PRE><BLOCKQUOTE>
///   The System Event Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__SystemEventType operations:
/// - soap_new_fims__SystemEventType(soap*) allocate
/// - soap_new_fims__SystemEventType(soap*, int num) allocate array
/// - soap_new_req_fims__SystemEventType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SystemEventType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SystemEventType(soap*, fims__SystemEventType*) deserialize from a stream
/// - int soap_write_fims__SystemEventType(soap, fims__SystemEventType*) serialize to a stream
class fims__SystemEventType : public fims__EventPayloadType
{ public:
/*  INHERITED FROM fims__EventPayloadType:
    END OF INHERITED FROM fims__EventPayloadType */
};

/// @brief "http://baseTime.fims.tv":EditUnitNumberType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   A number of edit units as defined in EBU Tech 3293. An editUnit is the inverse of the edit rate, or corrected edit rate as the result of
///   editUnit=1/(editrate*(factorNumerator/factorDenominator)). See EBU Tech 3293 for
///   more information.
/// </BLOCKQUOTE></PRE>
/// class fimstime__EditUnitNumberType operations:
/// - soap_new_fimstime__EditUnitNumberType(soap*) allocate
/// - soap_new_fimstime__EditUnitNumberType(soap*, int num) allocate array
/// - soap_new_req_fimstime__EditUnitNumberType(soap*, ...) allocate, set required members
/// - soap_new_set_fimstime__EditUnitNumberType(soap*, ...) allocate, set all public members
/// - int soap_read_fimstime__EditUnitNumberType(soap*, fimstime__EditUnitNumberType*) deserialize from a stream
/// - int soap_write_fimstime__EditUnitNumberType(soap, fimstime__EditUnitNumberType*) serialize to a stream
class fimstime__EditUnitNumberType
{ public:
/// __item wraps "xs:long" simpleContent.
    LONG64                               __item                        ;
/// <PRE><BLOCKQUOTE>
///   The base number of frames or samples per seconds.
///   This base number can be corrected by a factor calculated as the product of the
///   edit rate and 'factorNumerator/factorDenominator'.
/// </BLOCKQUOTE></PRE>
/// Attribute "editRate" of XSD type xs:positiveInteger.
   @xsd__positiveInteger                 editRate                       1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The numerator of the
///   correction factor.
/// </BLOCKQUOTE></PRE>
/// Attribute "factorNumerator" of XSD type xs:positiveInteger.
   @xsd__positiveInteger                 factorNumerator                1;	///< Required attribute.
/// <PRE><BLOCKQUOTE>
///   The denominator of the
///   correction factor.
/// </BLOCKQUOTE></PRE>
/// Attribute "factorDenominator" of XSD type xs:positiveInteger.
   @xsd__positiveInteger                 factorDenominator              1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":identifierType is a complexType with simpleContent.
///
/// class fimsdescription__identifierType operations:
/// - soap_new_fimsdescription__identifierType(soap*) allocate
/// - soap_new_fimsdescription__identifierType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__identifierType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__identifierType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__identifierType(soap*, fimsdescription__identifierType*) deserialize from a stream
/// - int soap_write_fimsdescription__identifierType(soap, fimsdescription__identifierType*) serialize to a stream
class fimsdescription__identifierType
{ public:
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="formatGroup">.
/// Attribute "formatLabel" of XSD type xs:string.
   @std::wstring*                        formatLabel                    0;	///< Optional attribute.
/// Attribute "formatDefinition" of XSD type xs:string.
   @std::wstring*                        formatDefinition               0;	///< Optional attribute.
/// Attribute "formatLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         formatLink                     0;	///< Optional attribute.
/// Attribute "formatLanguage" of XSD type xs:language.
   @xsd__language*                       formatLanguage                 0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":textElementType is a complexType with simpleContent.
///
/// class fimsdescription__textElementType operations:
/// - soap_new_fimsdescription__textElementType(soap*) allocate
/// - soap_new_fimsdescription__textElementType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__textElementType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__textElementType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__textElementType(soap*, fimsdescription__textElementType*) deserialize from a stream
/// - int soap_write_fimsdescription__textElementType(soap, fimsdescription__textElementType*) serialize to a stream
class fimsdescription__textElementType
{ public:
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://description.fims.tv":partType is a complexType with complexContent extension of XSD type "http://description.fims.tv":bmContentDescriptionType.
///
/// class fimsdescription__partType operations:
/// - soap_new_fimsdescription__partType(soap*) allocate
/// - soap_new_fimsdescription__partType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__partType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__partType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__partType(soap*, fimsdescription__partType*) deserialize from a stream
/// - int soap_write_fimsdescription__partType(soap, fimsdescription__partType*) serialize to a stream
class fimsdescription__partType : public fimsdescription__bmContentDescriptionType
{ public:
/*  INHERITED FROM fimsdescription__bmContentDescriptionType:
/// <PRE><BLOCKQUOTE>
///   A Title is the main name given to a resource e.g. an editorial object. It corresponds for a series to the series title, for programme to the programme title, for an item to the item title, etc. Titles are recorded as they appear. The Title is the name by which a resource is formally known and that everyone should use to refer to or search for that particular resource. The Title may be provided in several languages.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__textElementType* of length 0..unbounded.
    std::vector<fimsdescription__textElementType*> title                          0;
/// <PRE><BLOCKQUOTE>
///   An Alternative Title is the name other than the main Title given to a resource. The type of title is defined by the typeGroup of attributes. Alternative Titles are recorded as they appear. An Alternative Title may be attributed to a resource for several reasons described using the type (e.g. series title) attributes.
///   The alternativeTitle may be provided in several languages.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__titleType* of length 0..unbounded.
    std::vector<fimsdescription__titleType*> alternativeTitle               0;
/// <PRE><BLOCKQUOTE>
///   The descriptor creator identifies an entity (a person, group of persons or organisation) primarily responsible for creating the content of the resource - behind the camera. Different roles may be considered as representing a creator, e.g. a producer, an author, etc. Creator is a sub-class of Contributor.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> creator                        0;
/// <PRE><BLOCKQUOTE>
///   The generalised topic that represents the intellectual content of the resource. Typically, a subject is expressed by keywords, key phrases.
///   Free text, controlled vocabularies, authorities, or formal classification schemes (codes) may be employed when selecting descriptive subject terms. Persons as subjects are also placed here.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__subjectType* of length 0..unbounded.
    std::vector<fimsdescription__subjectType*> subject                        0;
/// <PRE><BLOCKQUOTE>
///   Free-form text or a narrative to report general notes, abstracts, or summaries about the intellectual content of a resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__descriptionType* of length 0..unbounded.
    std::vector<fimsdescription__descriptionType*> description                    0;
/// <PRE><BLOCKQUOTE>
///   A publisher is a person, an organization, or a service. Typically, the name of a Publisher should be used to indicate the entity primarily responsible for distributing or making a resource available to others e.g. by broadcasting, selling, leasing, renting and other modes of distribution.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> publisher                      0;
/// <PRE><BLOCKQUOTE>
///   The descriptor contributor identifies a person or organization that has made substantial creative contributions to the content of a resource. Refers particularly (but not only) to participation in front of the camera. If in doubt whether an entity is a creator or contributor use the element contributor.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__entityType* of length 0..unbounded.
    std::vector<fimsdescription__entityType*> contributor                    0;
/// <PRE><BLOCKQUOTE>
///   Dates associated with events occurring during the life of the resource. Typically, Date will be associated with the creation, modification or availability of the resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__dateType* of length 0..unbounded.
    std::vector<fimsdescription__dateType*> date                           0;
/// <PRE><BLOCKQUOTE>
///   The nature or genre of the editorial object. Type includes terms describing general categories, functions, genres, or aggregation levels for content. Recommended best practice is to select a value from a controlled vocabulary.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__typeType* of length 0..unbounded.
    std::vector<fimsdescription__typeType*> type                           0;
/// <PRE><BLOCKQUOTE>
///   A unique, unambiguous reference or identifier for a resource within a given context. Best practice is to identify the resource (whether analogue or digital) by means of a string or number corresponding to an established or formal identification system if one exists. Otherwise, use an identification method that is in use within your agency, station, production company, office, or institution. It is also possible to enter more than one, different but still unique, identifier for the same resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__identifierType* of length 0..unbounded.
    std::vector<fimsdescription__identifierType*> identifier                     0;
/// <PRE><BLOCKQUOTE>
///   Identifies languages and their use in the intellectual content of the resource. Recommended best practice for the values of the Language element is defined by RFC 5646. It is recommended to use a two-letter Language Code (taken from the ISO Standard 639), followed optionally, by a two-letter Country Code (taken from the ISO Standard 3166) preferably expressed using capitals letters. For example, 'en' for English, 'fr' for French, or 'en-UK' for English used in the United Kingdom. More contextual information can be provided using the note attribute.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__languageType* of length 0..unbounded.
    std::vector<fimsdescription__languageType*> language                       0;
/// <PRE><BLOCKQUOTE>
///   Recommended best practice is to reference the resource (to which the current resource under description is related) by means of a string or number conforming to a formal identification system. Relation is used to show the relation in content to another resource. For example, "IsPartOf" is used to show the relation between a part of a radio programme and the whole programme or between a track and a record album.
///   A resource can be identified by its title, or an identifier (possibly a URI). The related item has its own separate metadata record. Relation is used to provide a name, an identification number or ID, or a locator where the related item can be found.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> relation                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to the resource that the current resource is a version of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isVersionOf                    0;
/// <PRE><BLOCKQUOTE>
///   A reference to another version of the resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasVersion                     0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource replacing the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isReplacedBy                   0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource replaces
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> replaces                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource requiring the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isRequiredBy                   0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource requires
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> requires                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource is a part of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isPartOf                       0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that forms part of the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasPart                        0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that references the current resource
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isReferencedBy                 0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource that the current resource references
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> references                     0;
/// <PRE><BLOCKQUOTE>
///   A reference to a resource with which the current resource shares a format
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isFormatOf                     0;
/// <PRE><BLOCKQUOTE>
///   A format in which the resource is also available
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasFormat                      0;
/// <PRE><BLOCKQUOTE>
///   A reference to a series the current resource is an episode of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isEpisodeOf                    0;
/// <PRE><BLOCKQUOTE>
///   A reference to a group e.g. a brand, the current resource is an member of
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> isMemberOf                     0;
/// <PRE><BLOCKQUOTE>
///   A reference to members of a group
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__relationType* of length 0..unbounded.
    std::vector<fimsdescription__relationType*> hasMembers                     0;
/// <PRE><BLOCKQUOTE>
///   Coverage is used to show various time and place aspects of the subject of the content. Coverage will typically include spatial location (a place name or geographic coordinates), temporal period (a period label, date, or date range) or jurisdiction (such as a named administrative entity). Recommended best practice is to select a value from a controlled vocabulary (for example, the Thesaurus of Geographic Names) and that, where appropriate, named places or time periods be used in preference to numeric identifiers such as sets of coordinates or date ranges.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__coverageType* of length 0..unbounded.
    std::vector<fimsdescription__coverageType*> coverage                       0;
/// <PRE><BLOCKQUOTE>
///   An all-purpose field to identify information (rights management statement or reference to a service providing such information e.g. via a URL) about copyright, intellectual property rights or other property rights held in and over a resource, stating whether access is open or restricted in some way.
///   If dates, times, territories and availability periods are associated with a right, they should be included. If the Rights element is absent, no assumptions can be made about the status of these and other rights with respect to the resource.
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__rightsType* of length 0..unbounded.
    std::vector<fimsdescription__rightsType*> rights                         0;
/// <PRE><BLOCKQUOTE>
///   UK Version, US Version, home video version, etc. Mapping to Dublin Core would be made using a description element. There can be mutiple type of version references.
/// </BLOCKQUOTE></PRE>
/// Element "version" of XSD type xs:string.
    std::wstring*                        version                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   To identify parts or segments within the editorial object, such as changes in the topic of a magasine programme
/// </BLOCKQUOTE></PRE>
/// Vector of fimsdescription__partType* of length 0..unbounded.
    std::vector<fimsdescription__partType*> part                           0;
/// Imported attribute reference xml:lang.
   @_xml__lang*                          xml__lang                      0;	///< Optional attribute.
    END OF INHERITED FROM fimsdescription__bmContentDescriptionType */
/// Element "partStartTime" of XSD type "http://baseTime.fims.tv":TimeType.
    fimstime__TimeType*                  partStartTime                  0;	///< Optional element.
/// Element "partDuration" of XSD type "http://baseTime.fims.tv":DurationType.
    fimstime__DurationType*              partDuration                   0;	///< Optional element.
/// Attribute "partId" of XSD type xs:NMTOKEN.
   @xsd__NMTOKEN*                        partId                         0;	///< Optional attribute.
/// Attribute "partName" of XSD type xs:string.
   @std::wstring*                        partName                       0;	///< Optional attribute.
/// Attribute "partDefinition" of XSD type xs:string.
   @std::wstring*                        partDefinition                 0;	///< Optional attribute.
/// Attribute "partNumber" of XSD type xs:integer.
   @xsd__integer*                        partNumber                     0;	///< Optional attribute.
/// Attribute "partTotalNumber" of XSD type xs:integer.
   @xsd__integer*                        partTotalNumber                0;	///< Optional attribute.
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
};

/// @brief "http://base.fims.tv":ServiceType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Describes the location endpoint, provider and Service Description of the service.
/// </BLOCKQUOTE></PRE>
/// class fims__ServiceType operations:
/// - soap_new_fims__ServiceType(soap*) allocate
/// - soap_new_fims__ServiceType(soap*, int num) allocate array
/// - soap_new_req_fims__ServiceType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ServiceType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ServiceType(soap*, fims__ServiceType*) deserialize from a stream
/// - int soap_write_fims__ServiceType(soap, fims__ServiceType*) serialize to a stream
class fims__ServiceType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   Name for the provider of a service.
/// </BLOCKQUOTE></PRE>
/// Element "providerName" of XSD type xs:string.
    std::wstring*                        providerName                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Provider endpoint that uniquely locates the provider servicing the job request.
/// </BLOCKQUOTE></PRE>
/// Element "providerEndPoint" of XSD type xs:anyURI.
    xsd__anyURI*                         providerEndPoint               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Service-specific description of the capabilities offered by the service. The
///   transfer, transcode and capture services defined alongside the
///   original FIMS framework have service descriptions provided and, if
///   used, it is recommended that these are embedded here.
/// </BLOCKQUOTE></PRE>
/// class _fims__ServiceType_serviceDescription operations:
/// - soap_new__fims__ServiceType_serviceDescription(soap*) allocate
/// - soap_new__fims__ServiceType_serviceDescription(soap*, int num) allocate array
/// - soap_new_req__fims__ServiceType_serviceDescription(soap*, ...) allocate, set required members
/// - soap_new_set__fims__ServiceType_serviceDescription(soap*, ...) allocate, set all public members
/// - int soap_read__fims__ServiceType_serviceDescription(soap*, _fims__ServiceType_serviceDescription*) deserialize from a stream
/// - int soap_write__fims__ServiceType_serviceDescription(soap, _fims__ServiceType_serviceDescription*) serialize to a stream
    class _fims__ServiceType_serviceDescription
    {
/// @todo <any namespace="##other" minOccurs="1" maxOccurs="unbounded">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 1..unbounded.
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
    }                                   *serviceDescription             0;	///< Optional element.
};

/// @brief "http://base.fims.tv":ProfileType is an abstract complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   A profile used by a FIMS media service to perform a job on media content. For example, it may represent the profile of a
///   transfer media service for transferring media content and, as such, may specify the
///   media format to be produced in output. The profile provides a mechanism to specify
///   service-provider-specific information for each operation.
/// </BLOCKQUOTE></PRE>
/// class fims__ProfileType operations:
/// - soap_new_fims__ProfileType(soap*) allocate
/// - soap_new_fims__ProfileType(soap*, int num) allocate array
/// - soap_new_req_fims__ProfileType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ProfileType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ProfileType(soap*, fims__ProfileType*) deserialize from a stream
/// - int soap_write_fims__ProfileType(soap, fims__ProfileType*) serialize to a stream
class fims__ProfileType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   Details of the service that has been selected to execute this profile.
/// </BLOCKQUOTE></PRE>
/// Element "service" of XSD type "http://base.fims.tv":ServiceType.
    fims__ServiceType*                   service                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Name of the profile.
/// </BLOCKQUOTE></PRE>
/// Attribute "name" of XSD type xs:string.
   @std::wstring*                        name                           0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Description of the profile.
/// </BLOCKQUOTE></PRE>
/// Attribute "description" of XSD type xs:string.
   @std::wstring*                        description                    0;	///< Optional attribute.
};

/// @brief "http://base.fims.tv":QueueType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Provides basic queue information, such as the status and length of the queue.
/// </BLOCKQUOTE></PRE>
/// class fims__QueueType operations:
/// - soap_new_fims__QueueType(soap*) allocate
/// - soap_new_fims__QueueType(soap*, int num) allocate array
/// - soap_new_req_fims__QueueType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__QueueType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__QueueType(soap*, fims__QueueType*) deserialize from a stream
/// - int soap_write_fims__QueueType(soap, fims__QueueType*) serialize to a stream
class fims__QueueType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   Status information for the queue.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":QueueStatusType.
    enum fims__QueueStatusType*          status                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An optional description for the status.
/// </BLOCKQUOTE></PRE>
/// Element "statusDescription" of XSD type xs:string.
    std::wstring*                        statusDescription              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Length of the queue, measured in the number of jobs currently in this
///   queue.
/// </BLOCKQUOTE></PRE>
/// Element "length" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             length                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Determines if the queue is currently available.
/// </BLOCKQUOTE></PRE>
/// Element "availability" of XSD type xs:boolean.
    bool*                                availability                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Estimate of the time duration required for processing all jobs currently in the
///   queue.
/// </BLOCKQUOTE></PRE>
/// Element "estimatedTotalCompletionDuration" of XSD type xs:duration.
    xsd__duration*                       estimatedTotalCompletionDuration 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional list of jobs currently in the queue.
/// </BLOCKQUOTE></PRE>
/// Element "jobs" of XSD type "http://base.fims.tv":JobsType.
    fims__JobsType*                      jobs                           0;	///< Optional element.
};

/// @brief "http://base.fims.tv":JobType is an abstract complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Describes a job, which is extended in each service schema.
/// </BLOCKQUOTE></PRE>
/// class fims__JobType operations:
/// - soap_new_fims__JobType(soap*) allocate
/// - soap_new_fims__JobType(soap*, int num) allocate array
/// - soap_new_req_fims__JobType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__JobType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__JobType(soap*, fims__JobType*) deserialize from a stream
/// - int soap_write_fims__JobType(soap, fims__JobType*) serialize to a stream
class fims__JobType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   The current status of the job (e.g. running, completed), enumerated in JobStatusType.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":JobStatusType.
    enum fims__JobStatusType*            status                         0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Optional description for job status.
/// </BLOCKQUOTE></PRE>
/// Element "statusDescription" of XSD type xs:string.
    std::wstring*                        statusDescription              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Service-provided local job identifier, such as a job identifier provided locally by an
///   application.
/// </BLOCKQUOTE></PRE>
/// Element "serviceProviderJobID" of XSD type xs:string.
    std::wstring*                        serviceProviderJobID           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The queue that has master control over execution of this job. As a FIMS-compliant device is not required to support queues, this element is optional.
/// </BLOCKQUOTE></PRE>
/// Element "queueReference" of XSD type "http://base.fims.tv":QueueType.
    fims__QueueType*                     queueReference                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A list of sub-tasks that consists of related jobs running in parallel. For information
///   only in FIMS 1.0. Whether the sub-tasks are running in parallel or
///   sequence to one another is not recorded in this model.
/// </BLOCKQUOTE></PRE>
/// Element "tasks" of XSD type "http://base.fims.tv":JobsType.
    fims__JobsType*                      tasks                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Descriptive name of the operation associated with this job.
/// </BLOCKQUOTE></PRE>
/// Element "operationName" of XSD type xs:string.
    std::wstring*                        operationName                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Business media objects produced or consumed by the job. For some services, such as a
///   capture service, no BMObjects are consumed. However, the job will
///   include a BMObject on completion.
/// </BLOCKQUOTE></PRE>
/// Element "bmObjects" of XSD type "http://base.fims.tv":BMObjectsType.
    fims__BMObjectsType*                 bmObjects                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The priority for the job (e.g. "immediate", "high"...) enumerated in PriorityType. Where
///   supported, job priorities describe the relative priority of a job in
///   the owning queue.
/// </BLOCKQUOTE></PRE>
/// Element "priority" of XSD type "http://base.fims.tv":PriorityType.
    enum fims__PriorityType*             priority                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Parameter used to indicate that the job shall be initiated no earlier then the
///   specified time.
/// </BLOCKQUOTE></PRE>
/// Element "startJob" of XSD type "http://base.fims.tv":StartJobType.
    fims__StartJobType*                  startJob                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Specifies the time by which the job shall have been completed. This element also specifies the deadline for job execution. For example, in the case of
///   specifying "TimeMark" type in the "stopProcess", it can be used as a
///   timeout time.
/// </BLOCKQUOTE></PRE>
/// Element "finishBefore" of XSD type xs:dateTime.
    time_t*                              finishBefore                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Before the job has started, an estimate for the expected total duration of the job. Once the job has started, it provides an estimation of time
///   remaining until the end of the job.
/// </BLOCKQUOTE></PRE>
/// Element "estimatedCompletionDuration" of XSD type xs:duration.
    xsd__duration*                       estimatedCompletionDuration    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The position of the job in the queue.
/// </BLOCKQUOTE></PRE>
/// Element "currentQueuePosition" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             currentQueuePosition           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The date and time this job started.
/// </BLOCKQUOTE></PRE>
/// Element "jobStartedTime" of XSD type xs:dateTime.
    time_t*                              jobStartedTime                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The time elapsed since the job started.
/// </BLOCKQUOTE></PRE>
/// Element "jobElapsedTime" of XSD type xs:duration.
    xsd__duration*                       jobElapsedTime                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The time and date that the job completed.
/// </BLOCKQUOTE></PRE>
/// Element "jobCompletedTime" of XSD type xs:dateTime.
    time_t*                              jobCompletedTime               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Provides statistics on number of bytes or frames processed. Note that a time-based
///   percentage value to completion is not directly provided, but can be
///   calculated if the service provides the "estimatedCompletionDuration". The time-based percentage is a ratio between "jobElapsedTime" and
///   "estimatedCompletionDuration".
/// </BLOCKQUOTE></PRE>
/// Element "processed" of XSD type "http://base.fims.tv":ProcessedInfoType.
    fims__ProcessedInfoType*             processed                      0;	///< Optional element.
};

/// @brief "http://base.fims.tv":FormatType is an abstract complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Characteristics of files, video, audio, and ancillary data.
/// </BLOCKQUOTE></PRE>
/// class fims__FormatType operations:
/// - soap_new_fims__FormatType(soap*) allocate
/// - soap_new_fims__FormatType(soap*, int num) allocate array
/// - soap_new_req_fims__FormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__FormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__FormatType(soap*, fims__FormatType*) deserialize from a stream
/// - int soap_write_fims__FormatType(soap, fims__FormatType*) serialize to a stream
class fims__FormatType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   User defined technical attributes. See 'technical attribute' in EBU Tech 3293 for
///   more information.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__TechnicalAttributeType* of length 0..unbounded.
    std::vector<fims__TechnicalAttributeType*> technicalAttribute             0;
};

/// @brief "http://base.fims.tv":BMObjectType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Common representation of the content exchanged by FIMS media services, through reference to logical content objects. Note that although the current BMObject can only reference at most one logical content item, it is intended that future versions of FIMS will extend BMObject to provide different kinds of content collections, such as sequences and edit decision lists.
/// </BLOCKQUOTE></PRE>
/// class fims__BMObjectType operations:
/// - soap_new_fims__BMObjectType(soap*) allocate
/// - soap_new_fims__BMObjectType(soap*, int num) allocate array
/// - soap_new_req_fims__BMObjectType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMObjectType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMObjectType(soap*, fims__BMObjectType*) deserialize from a stream
/// - int soap_write_fims__BMObjectType(soap, fims__BMObjectType*) serialize to a stream
class fims__BMObjectType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   Logical content item that is exchanged by a FIMS media service.
/// </BLOCKQUOTE></PRE>
/// Element "bmContents" of XSD type "http://base.fims.tv":BMContentsType.
    fims__BMContentsType*                bmContents                     0;	///< Optional element.
};

/// @brief "http://base.fims.tv":BMContentType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Logical items of content, representing a sequence of frames and/or samples that have a fixed length and are intended to be played sequentially from end-to-end.
/// </BLOCKQUOTE></PRE>
/// class fims__BMContentType operations:
/// - soap_new_fims__BMContentType(soap*) allocate
/// - soap_new_fims__BMContentType(soap*, int num) allocate array
/// - soap_new_req_fims__BMContentType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMContentType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMContentType(soap*, fims__BMContentType*) deserialize from a stream
/// - int soap_write_fims__BMContentType(soap, fims__BMContentType*) serialize to a stream
class fims__BMContentType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   List of different content formats that provide physical representations of the logical content item. Content formats are different renditions of the same content, differing in the way they are encoded. Content formats have
///   technical metadata.
/// </BLOCKQUOTE></PRE>
/// Element "bmContentFormats" of XSD type "http://base.fims.tv":BMContentFormatsType.
    fims__BMContentFormatsType*          bmContentFormats               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Non-technical descriptions of the logical content. It is recommended that a basic
///   description of the content items is included by making use of the
///   FIMS description metadata schema (http://description.fims.tv), which
///   is based on a subset of descriptive metadata fields from EBUCore
///   and Dublin Core. This will be useful for interoperable monitoring
///   applications by providing a consistent place where, say, a title
///   field can be found for presentation in a GUI. Content items may have
///   many different descriptions for different purposes, such as for
///   archiving, presentation, rights management and contributor
///   management. For this purpose, the use of multiple descriptions in
///   included. Also, a programme may be an episode that is part of a
///   series that is part of a brand and the descriptions of each level in
///   that hierarchy could be included (by reference) here.
/// </BLOCKQUOTE></PRE>
/// Element "descriptions" of XSD type "http://base.fims.tv":DescriptionsType.
    fims__DescriptionsType*              descriptions                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The logical content status may be New, Online, Offine, Removed, Purged, Invalid, or Processing.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMContentStatusType.
    fims__BMContentStatusType*           status                         0;	///< Optional element.
};

/// @brief "http://base.fims.tv":DescriptionType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Description of a logical content, containing descriptive metadata. Descriptive metadata is attached using the proposed core XML description based on EBUCore or using the schema "any" facility supported by all resources.
/// </BLOCKQUOTE></PRE>
/// class fims__DescriptionType operations:
/// - soap_new_fims__DescriptionType(soap*) allocate
/// - soap_new_fims__DescriptionType(soap*, int num) allocate array
/// - soap_new_req_fims__DescriptionType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__DescriptionType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__DescriptionType(soap*, fims__DescriptionType*) deserialize from a stream
/// - int soap_write_fims__DescriptionType(soap, fims__DescriptionType*) serialize to a stream
class fims__DescriptionType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   Description of a logical content, containing core descriptive metadata based on EBUCore.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://base.fims.tv:""http://description.fims.tv":bmContentDescription.
    fimsdescription__bmContentDescriptionType*  fimsdescription__bmContentDescription 0;	///< Optional element.
};

/// @brief "http://base.fims.tv":BMContentFormatType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Description and locations of a phyisical representation of a logical item of content.
/// </BLOCKQUOTE></PRE>
/// class fims__BMContentFormatType operations:
/// - soap_new_fims__BMContentFormatType(soap*) allocate
/// - soap_new_fims__BMContentFormatType(soap*, int num) allocate array
/// - soap_new_req_fims__BMContentFormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMContentFormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMContentFormatType(soap*, fims__BMContentFormatType*) deserialize from a stream
/// - int soap_write_fims__BMContentFormatType(soap, fims__BMContentFormatType*) serialize to a stream
class fims__BMContentFormatType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   Known locations for the content.
/// </BLOCKQUOTE></PRE>
/// Element "bmEssenceLocators" of XSD type "http://base.fims.tv":BMEssenceLocatorsType.
    fims__BMEssenceLocatorsType*         bmEssenceLocators              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Technical metadata describing this specific physical embodiment of the content. The
///   description contains the video, audio, data, and container formats of
///   the content format.
/// </BLOCKQUOTE></PRE>
/// <PRE><BLOCKQUOTE>
///   Element used to carry a collection of media formats including video, audio, data, and container.
/// </BLOCKQUOTE></PRE>
/// Element reference "http://base.fims.tv:""http://base.fims.tv":formatCollection.
    _fims__formatCollection*             formatCollection               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Duration of the audio and/or visual content.
/// </BLOCKQUOTE></PRE>
/// Element "duration" of XSD type "http://baseTime.fims.tv":DurationType.
    fimstime__DurationType*              duration                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Hash code value calculated for the physical essence representation.
/// </BLOCKQUOTE></PRE>
/// Element "hash" of XSD type "http://base.fims.tv":HashType.
    fims__HashType*                      hash                           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Size of the file or package providing the physical essence representation.
/// </BLOCKQUOTE></PRE>
/// Element "packageSize" of XSD type xs:unsignedLong.
    ULONG64*                             packageSize                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Multipurpose Internet Mail Extensions Media Type for the physical essence representation.
///   The MIME type can include any required or optional parameters after
///   the type, separated by semicolons. Note that this MIME type refers
///   to the overall type of media, for example a folder containing P2
///   card data or an AS-02 bundle both use MXF file formats, setting this
///   property to "application/mxf".
/// </BLOCKQUOTE></PRE>
/// class _fims__BMContentFormatType_mimeType operations:
/// - soap_new__fims__BMContentFormatType_mimeType(soap*) allocate
/// - soap_new__fims__BMContentFormatType_mimeType(soap*, int num) allocate array
/// - soap_new_req__fims__BMContentFormatType_mimeType(soap*, ...) allocate, set required members
/// - soap_new_set__fims__BMContentFormatType_mimeType(soap*, ...) allocate, set all public members
/// - int soap_read__fims__BMContentFormatType_mimeType(soap*, _fims__BMContentFormatType_mimeType*) deserialize from a stream
/// - int soap_write__fims__BMContentFormatType_mimeType(soap, _fims__BMContentFormatType_mimeType*) serialize to a stream
    class _fims__BMContentFormatType_mimeType
    {
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *mimeType                       0;	///< Optional element.
};

/// @brief "http://base.fims.tv":BMEssenceLocatorType is an abstract complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Location of a physical representation of an item of content. Note that essence locations may be shared by multiple physical content formats and/or logical content items. For example, a folder structure taken from a camera may contain both master-quality and proxy-quality versions. The same essence locator can be targeted by two different physical content formats for the same logical content item. As another example, an AS-02 bundle may contain two different editorial versions of the same programme and can be referenced from two separate logical content items.
/// </BLOCKQUOTE></PRE>
/// class fims__BMEssenceLocatorType operations:
/// - soap_new_fims__BMEssenceLocatorType(soap*) allocate
/// - soap_new_fims__BMEssenceLocatorType(soap*, int num) allocate array
/// - soap_new_req_fims__BMEssenceLocatorType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMEssenceLocatorType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMEssenceLocatorType(soap*, fims__BMEssenceLocatorType*) deserialize from a stream
/// - int soap_write_fims__BMEssenceLocatorType(soap, fims__BMEssenceLocatorType*) serialize to a stream
class fims__BMEssenceLocatorType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   Kind of storage for the essence, for example "online" or "hsm".
/// </BLOCKQUOTE></PRE>
/// Element "storageType" of XSD type "http://base.fims.tv":StorageType.
    fims__StorageType*                   storageType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the geographical location of the content, for example "New York".
/// </BLOCKQUOTE></PRE>
/// Element "locatorInfo" of XSD type xs:string.
    std::wstring*                        locatorInfo                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Multipurpose Internet Mail Extensions Media Type for the physical container used for the representation. Vendors are encouraged to register MIME types for the containers in use, such as a folder containing capture data from a camera. Where additional structural data is required, vendors are encouraged to extend one of the essence locator types (single file, list, or folder).
/// </BLOCKQUOTE></PRE>
/// class _fims__BMEssenceLocatorType_containerMimeType operations:
/// - soap_new__fims__BMEssenceLocatorType_containerMimeType(soap*) allocate
/// - soap_new__fims__BMEssenceLocatorType_containerMimeType(soap*, int num) allocate array
/// - soap_new_req__fims__BMEssenceLocatorType_containerMimeType(soap*, ...) allocate, set required members
/// - soap_new_set__fims__BMEssenceLocatorType_containerMimeType(soap*, ...) allocate, set all public members
/// - int soap_read__fims__BMEssenceLocatorType_containerMimeType(soap*, _fims__BMEssenceLocatorType_containerMimeType*) deserialize from a stream
/// - int soap_write__fims__BMEssenceLocatorType_containerMimeType(soap, _fims__BMEssenceLocatorType_containerMimeType*) serialize to a stream
    class _fims__BMEssenceLocatorType_containerMimeType
    {
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *containerMimeType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The essence status may be New, Online, Offine, Removed, Purged, Invalid, or Processing.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMEssenceLocatorStatusType.
    fims__BMEssenceLocatorStatusType*    status                         0;	///< Optional element.
};

/// @brief "http://base.fims.tv":StorageType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Different kinds of storage media available (e.g. online on disk), in combination with type group attributes.
/// </BLOCKQUOTE></PRE>
/// class fims__StorageType operations:
/// - soap_new_fims__StorageType(soap*) allocate
/// - soap_new_fims__StorageType(soap*, int num) allocate array
/// - soap_new_req_fims__StorageType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__StorageType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__StorageType(soap*, fims__StorageType*) deserialize from a stream
/// - int soap_write_fims__StorageType(soap, fims__StorageType*) serialize to a stream
class fims__StorageType
{ public:
/// __item wraps ""http://base.fims.tv":StorageTypes" simpleContent.
    enum fims__StorageTypes              __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":HashFunctionType is a complexType with simpleContent.
///
/// <PRE><BLOCKQUOTE>
///   Different hash functions that can be used to hash the content, as defined in SMPTE ST 2032, in combination with type group description.
/// </BLOCKQUOTE></PRE>
/// class fims__HashFunctionType operations:
/// - soap_new_fims__HashFunctionType(soap*) allocate
/// - soap_new_fims__HashFunctionType(soap*, int num) allocate array
/// - soap_new_req_fims__HashFunctionType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__HashFunctionType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__HashFunctionType(soap*, fims__HashFunctionType*) deserialize from a stream
/// - int soap_write_fims__HashFunctionType(soap, fims__HashFunctionType*) serialize to a stream
class fims__HashFunctionType
{ public:
/// __item wraps ""http://base.fims.tv":HashFunctionTypes" simpleContent.
    enum fims__HashFunctionTypes         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
/// @todo <anyAttribute namespace="##other">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://base.fims.tv":BMCustomStatusExtensionType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   A custom status extension type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMCustomStatusExtensionType operations:
/// - soap_new_fims__BMCustomStatusExtensionType(soap*) allocate
/// - soap_new_fims__BMCustomStatusExtensionType(soap*, int num) allocate array
/// - soap_new_req_fims__BMCustomStatusExtensionType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMCustomStatusExtensionType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMCustomStatusExtensionType(soap*, fims__BMCustomStatusExtensionType*) deserialize from a stream
/// - int soap_write_fims__BMCustomStatusExtensionType(soap, fims__BMCustomStatusExtensionType*) serialize to a stream
class fims__BMCustomStatusExtensionType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   The Resource Type Code value.
/// </BLOCKQUOTE></PRE>
/// Element "code" of XSD type xs:string.
    std::wstring                         code                           1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Resource Type Description value.
/// </BLOCKQUOTE></PRE>
/// Element "description" of XSD type xs:string.
    std::wstring*                        description                    0;	///< Optional element.
};

/// @brief "http://base.fims.tv":BMContentStatusType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   The Content Status Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMContentStatusType operations:
/// - soap_new_fims__BMContentStatusType(soap*) allocate
/// - soap_new_fims__BMContentStatusType(soap*, int num) allocate array
/// - soap_new_req_fims__BMContentStatusType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMContentStatusType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMContentStatusType(soap*, fims__BMContentStatusType*) deserialize from a stream
/// - int soap_write_fims__BMContentStatusType(soap, fims__BMContentStatusType*) serialize to a stream
class fims__BMContentStatusType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   The Content Status value.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMStatusType.
    enum fims__BMStatusType              status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Content Status Sub-status value.
/// </BLOCKQUOTE></PRE>
/// Element "subStatus" of XSD type "http://base.fims.tv":BMCustomStatusExtensionType.
    fims__BMCustomStatusExtensionType*   subStatus                      0;	///< Optional element.
};

/// @brief "http://base.fims.tv":BMEssenceLocatorStatusType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   The Essence Locator Status Type.
/// </BLOCKQUOTE></PRE>
/// class fims__BMEssenceLocatorStatusType operations:
/// - soap_new_fims__BMEssenceLocatorStatusType(soap*) allocate
/// - soap_new_fims__BMEssenceLocatorStatusType(soap*, int num) allocate array
/// - soap_new_req_fims__BMEssenceLocatorStatusType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__BMEssenceLocatorStatusType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__BMEssenceLocatorStatusType(soap*, fims__BMEssenceLocatorStatusType*) deserialize from a stream
/// - int soap_write_fims__BMEssenceLocatorStatusType(soap, fims__BMEssenceLocatorStatusType*) serialize to a stream
class fims__BMEssenceLocatorStatusType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   The Essence Locator Status value.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMStatusType.
    enum fims__BMStatusType              status                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   The Essence Locator Status Sub-status value.
/// </BLOCKQUOTE></PRE>
/// Element "subStatus" of XSD type "http://base.fims.tv":BMCustomStatusExtensionType.
    fims__BMCustomStatusExtensionType*   subStatus                      0;	///< Optional element.
};

/// @brief "http://base.fims.tv":LockTokenType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the Lock Token Type object that has several attributes for locking access to an instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// class fims__LockTokenType operations:
/// - soap_new_fims__LockTokenType(soap*) allocate
/// - soap_new_fims__LockTokenType(soap*, int num) allocate array
/// - soap_new_req_fims__LockTokenType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__LockTokenType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__LockTokenType(soap*, fims__LockTokenType*) deserialize from a stream
/// - int soap_write_fims__LockTokenType(soap, fims__LockTokenType*) serialize to a stream
class fims__LockTokenType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   The Username representing the user account for gaining access to a media resource.
/// </BLOCKQUOTE></PRE>
/// Element "userName" of XSD type xs:string.
    std::wstring*                        userName                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The time and date that this instance of a lock token expires and releases the lock to the instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// Element "expiration" of XSD type xs:dateTime.
    time_t*                              expiration                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Indicates the media resource that is the target of the lock.
/// </BLOCKQUOTE></PRE>
/// Element "resourceReferences" of XSD type "http://base.fims.tv":ResourceReferencesType.
    fims__ResourceReferencesType*        resourceReferences             0;	///< Optional element.
};

/// @brief "http://base.fims.tv":SuperLockTokenType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ResourceType.
///
/// <PRE><BLOCKQUOTE>
///   Represents the Super Lock Token Type object that gives super locking access to a currently locked instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// class fims__SuperLockTokenType operations:
/// - soap_new_fims__SuperLockTokenType(soap*) allocate
/// - soap_new_fims__SuperLockTokenType(soap*, int num) allocate array
/// - soap_new_req_fims__SuperLockTokenType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SuperLockTokenType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SuperLockTokenType(soap*, fims__SuperLockTokenType*) deserialize from a stream
/// - int soap_write_fims__SuperLockTokenType(soap, fims__SuperLockTokenType*) serialize to a stream
class fims__SuperLockTokenType : public fims__ResourceType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/// <PRE><BLOCKQUOTE>
///   The Username representing the user account for gaining access to a media resource.
/// </BLOCKQUOTE></PRE>
/// Element "userName" of XSD type xs:string.
    std::wstring*                        userName                       0;	///< Optional element.
};

/// @brief "http://base.fims.tv":ContentStatusEventType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ContentEventType.
///
/// <PRE><BLOCKQUOTE>
///   The Content Status Event Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__ContentStatusEventType operations:
/// - soap_new_fims__ContentStatusEventType(soap*) allocate
/// - soap_new_fims__ContentStatusEventType(soap*, int num) allocate array
/// - soap_new_req_fims__ContentStatusEventType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContentStatusEventType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContentStatusEventType(soap*, fims__ContentStatusEventType*) deserialize from a stream
/// - int soap_write_fims__ContentStatusEventType(soap, fims__ContentStatusEventType*) serialize to a stream
class fims__ContentStatusEventType : public fims__ContentEventType
{ public:
/*  INHERITED FROM fims__EventPayloadType:
    END OF INHERITED FROM fims__EventPayloadType */
/*  INHERITED FROM fims__ContentEventType:
/// <PRE><BLOCKQUOTE>
///   The Target Resource entry for the Content Event.
/// </BLOCKQUOTE></PRE>
/// Element "targetResourceReference" of XSD type "http://base.fims.tv":ResourceReferenceType.
    fims__ResourceReferenceType*         targetResourceReference        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
    END OF INHERITED FROM fims__ContentEventType */
};

/// @brief "http://base.fims.tv":ContentCustomEventType is a complexType with complexContent extension of XSD type "http://base.fims.tv":ContentEventType.
///
/// <PRE><BLOCKQUOTE>
///   The Content Custom Event Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__ContentCustomEventType operations:
/// - soap_new_fims__ContentCustomEventType(soap*) allocate
/// - soap_new_fims__ContentCustomEventType(soap*, int num) allocate array
/// - soap_new_req_fims__ContentCustomEventType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContentCustomEventType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContentCustomEventType(soap*, fims__ContentCustomEventType*) deserialize from a stream
/// - int soap_write_fims__ContentCustomEventType(soap, fims__ContentCustomEventType*) serialize to a stream
class fims__ContentCustomEventType : public fims__ContentEventType
{ public:
/*  INHERITED FROM fims__EventPayloadType:
    END OF INHERITED FROM fims__EventPayloadType */
/*  INHERITED FROM fims__ContentEventType:
/// <PRE><BLOCKQUOTE>
///   The Target Resource entry for the Content Event.
/// </BLOCKQUOTE></PRE>
/// Element "targetResourceReference" of XSD type "http://base.fims.tv":ResourceReferenceType.
    fims__ResourceReferenceType*         targetResourceReference        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
    END OF INHERITED FROM fims__ContentEventType */
/// <PRE><BLOCKQUOTE>
///   The Template identifier that uniquely represents the instance of the Content Custom Event.
/// </BLOCKQUOTE></PRE>
/// Element "templateID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType*                templateID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The Custom Event Template for this instance.
/// </BLOCKQUOTE></PRE>
/// Element "customEventTemplate" of XSD type "http://base.fims.tv":CustomEventTemplateType.
    fims__CustomEventTemplateType*       customEventTemplate            0;	///< Optional element.
};

/// @brief "http://base.fims.tv":SystemExceptionEventType is a complexType with complexContent extension of XSD type "http://base.fims.tv":SystemEventType.
///
/// <PRE><BLOCKQUOTE>
///   The System Exception Event Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__SystemExceptionEventType operations:
/// - soap_new_fims__SystemExceptionEventType(soap*) allocate
/// - soap_new_fims__SystemExceptionEventType(soap*, int num) allocate array
/// - soap_new_req_fims__SystemExceptionEventType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SystemExceptionEventType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SystemExceptionEventType(soap*, fims__SystemExceptionEventType*) deserialize from a stream
/// - int soap_write_fims__SystemExceptionEventType(soap, fims__SystemExceptionEventType*) serialize to a stream
class fims__SystemExceptionEventType : public fims__SystemEventType
{ public:
/*  INHERITED FROM fims__EventPayloadType:
    END OF INHERITED FROM fims__EventPayloadType */
/*  INHERITED FROM fims__SystemEventType:
    END OF INHERITED FROM fims__SystemEventType */
/// <PRE><BLOCKQUOTE>
///   The System Event Error Code attribute.
/// </BLOCKQUOTE></PRE>
/// Element "errorCode" of XSD type xs:string.
    std::wstring*                        errorCode                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The System Event Error Title attribute.
/// </BLOCKQUOTE></PRE>
/// Element "errorTitle" of XSD type xs:string.
    std::wstring*                        errorTitle                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The System Event Error Title attribute.
/// </BLOCKQUOTE></PRE>
/// Element "errorDescription" of XSD type xs:string.
    std::wstring*                        errorDescription               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The System Event date and time attribute using the dateTime format.
/// </BLOCKQUOTE></PRE>
/// Element "errorDateTime" of XSD type xs:dateTime.
    time_t*                              errorDateTime                  0;	///< Optional element.
};

/// @brief "http://base.fims.tv":SystemPerformanceEventType is a complexType with complexContent extension of XSD type "http://base.fims.tv":SystemEventType.
///
/// <PRE><BLOCKQUOTE>
///   The System Performance Event Type declaration.
/// </BLOCKQUOTE></PRE>
/// class fims__SystemPerformanceEventType operations:
/// - soap_new_fims__SystemPerformanceEventType(soap*) allocate
/// - soap_new_fims__SystemPerformanceEventType(soap*, int num) allocate array
/// - soap_new_req_fims__SystemPerformanceEventType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SystemPerformanceEventType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SystemPerformanceEventType(soap*, fims__SystemPerformanceEventType*) deserialize from a stream
/// - int soap_write_fims__SystemPerformanceEventType(soap, fims__SystemPerformanceEventType*) serialize to a stream
class fims__SystemPerformanceEventType : public fims__SystemEventType
{ public:
/*  INHERITED FROM fims__EventPayloadType:
    END OF INHERITED FROM fims__EventPayloadType */
/*  INHERITED FROM fims__SystemEventType:
    END OF INHERITED FROM fims__SystemEventType */
/// <PRE><BLOCKQUOTE>
///   The System Performance Event Type "TBD" attribute entry.
/// </BLOCKQUOTE></PRE>
/// Element "TBD" of XSD type xs:string.
    std::wstring*                        TBD                            0;	///< Optional element.
};

/// @brief "http://description.fims.tv":titleType is a complexType with complexContent extension of XSD type "http://description.fims.tv":textElementType.
///
/// class fimsdescription__titleType operations:
/// - soap_new_fimsdescription__titleType(soap*) allocate
/// - soap_new_fimsdescription__titleType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__titleType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__titleType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__titleType(soap*, fimsdescription__titleType*) deserialize from a stream
/// - int soap_write_fimsdescription__titleType(soap, fimsdescription__titleType*) serialize to a stream
class fimsdescription__titleType : public fimsdescription__textElementType
{ public:
/*  INHERITED FROM fimsdescription__textElementType:
    END OF INHERITED FROM fimsdescription__textElementType */
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
};

/// @brief "http://description.fims.tv":subjectType is a complexType with complexContent extension of XSD type "http://description.fims.tv":textElementType.
///
/// class fimsdescription__subjectType operations:
/// - soap_new_fimsdescription__subjectType(soap*) allocate
/// - soap_new_fimsdescription__subjectType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__subjectType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__subjectType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__subjectType(soap*, fimsdescription__subjectType*) deserialize from a stream
/// - int soap_write_fimsdescription__subjectType(soap, fimsdescription__subjectType*) serialize to a stream
class fimsdescription__subjectType : public fimsdescription__textElementType
{ public:
/*  INHERITED FROM fimsdescription__textElementType:
    END OF INHERITED FROM fimsdescription__textElementType */
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
};

/// @brief "http://description.fims.tv":descriptionType is a complexType with complexContent extension of XSD type "http://description.fims.tv":textElementType.
///
/// class fimsdescription__descriptionType operations:
/// - soap_new_fimsdescription__descriptionType(soap*) allocate
/// - soap_new_fimsdescription__descriptionType(soap*, int num) allocate array
/// - soap_new_req_fimsdescription__descriptionType(soap*, ...) allocate, set required members
/// - soap_new_set_fimsdescription__descriptionType(soap*, ...) allocate, set all public members
/// - int soap_read_fimsdescription__descriptionType(soap*, fimsdescription__descriptionType*) deserialize from a stream
/// - int soap_write_fimsdescription__descriptionType(soap, fimsdescription__descriptionType*) serialize to a stream
class fimsdescription__descriptionType : public fimsdescription__textElementType
{ public:
/*  INHERITED FROM fimsdescription__textElementType:
    END OF INHERITED FROM fimsdescription__textElementType */
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
/// Attribute "typeLanguage" of XSD type xs:language.
   @xsd__language*                       typeLanguage                   0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
};

/// @brief "http://base.fims.tv":VideoFormatType is a complexType with complexContent extension of XSD type "http://base.fims.tv":FormatType.
///
/// <PRE><BLOCKQUOTE>
///   Characteristics of a video signal. See 'videoFormat' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// class fims__VideoFormatType operations:
/// - soap_new_fims__VideoFormatType(soap*) allocate
/// - soap_new_fims__VideoFormatType(soap*, int num) allocate array
/// - soap_new_req_fims__VideoFormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__VideoFormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__VideoFormatType(soap*, fims__VideoFormatType*) deserialize from a stream
/// - int soap_write_fims__VideoFormatType(soap, fims__VideoFormatType*) serialize to a stream
class fims__VideoFormatType : public fims__FormatType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__FormatType:
/// <PRE><BLOCKQUOTE>
///   User defined technical attributes. See 'technical attribute' in EBU Tech 3293 for
///   more information.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__TechnicalAttributeType* of length 0..unbounded.
    std::vector<fims__TechnicalAttributeType*> technicalAttribute             0;
    END OF INHERITED FROM fims__FormatType */
/// <PRE><BLOCKQUOTE>
///   Width of the image or picture. Used as numerator to define the aspect ratio for video
///   content. See 'width' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Element "displayWidth" of XSD type "http://base.fims.tv":LengthType.
    fims__LengthType*                    displayWidth                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Height of the image or picture. Used as denominator to define the aspect ratio for video
///   content. See 'height' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Element "displayHeight" of XSD type "http://base.fims.tv":LengthType.
    fims__LengthType*                    displayHeight                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Frame rate for the video content, measured in frames/second.
/// </BLOCKQUOTE></PRE>
/// Element "frameRate" of XSD type "http://base.fims.tv":RationalType.
    fims__RationalType*                  frameRate                      0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Ratio of the picture (the width by the height), for instance '4:3' or '16:9' (rational). The
///   format of the aspect ratio is specified in the format attributes.
///   See 'aspectRatio' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Element "aspectRatio" of XSD type "http://base.fims.tv":RationalType.
    fims__RationalType*                  aspectRatio                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the encoding parameters of the resource (e.g. H264) for a video channel. See
///   'videoEncoding' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Element "videoEncoding" of XSD type "http://base.fims.tv":CodecType.
    fims__CodecType*                     videoEncoding                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Definition of the video tracks in the source.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMTrackType* of length 0..unbounded.
    std::vector<fims__BMTrackType*     > videoTrack                     0;
/// <PRE><BLOCKQUOTE>
///   Number of bits at which the video is encoded, measured in bits per second.
/// </BLOCKQUOTE></PRE>
/// Element "bitRate" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             bitRate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of bitrate, either constant or variable.
/// </BLOCKQUOTE></PRE>
/// Element "bitRateMode" of XSD type "http://base.fims.tv":BitRateModeType.
    enum fims__BitRateModeType*          bitRateMode                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of scanning lines in the image, also known as resolution height. For example, 1080,
///   720, 576 etc..
/// </BLOCKQUOTE></PRE>
/// Element "lines" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             lines                          0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the image is presented using interlaced or progressive scanning.
/// </BLOCKQUOTE></PRE>
/// Element "scanningFormat" of XSD type "http://base.fims.tv":ScanningFormatType.
    enum fims__ScanningFormatType*       scanningFormat                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the fields are ordered top (upper) or bottom (lower) field first in video stream
///   encoding order.
/// </BLOCKQUOTE></PRE>
/// Element "scanningOrder" of XSD type "http://base.fims.tv":ScanningOrderType.
    enum fims__ScanningOrderType*        scanningOrder                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether noise was removed from the signal.
/// </BLOCKQUOTE></PRE>
/// Element "noiseFilter" of XSD type xs:boolean.
    bool*                                noiseFilter                    0;	///< Optional element.
};

/// @brief "http://base.fims.tv":AudioFormatType is a complexType with complexContent extension of XSD type "http://base.fims.tv":FormatType.
///
/// <PRE><BLOCKQUOTE>
///   Characteristics of an audio signal. See 'audioFormat' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// class fims__AudioFormatType operations:
/// - soap_new_fims__AudioFormatType(soap*) allocate
/// - soap_new_fims__AudioFormatType(soap*, int num) allocate array
/// - soap_new_req_fims__AudioFormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__AudioFormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__AudioFormatType(soap*, fims__AudioFormatType*) deserialize from a stream
/// - int soap_write_fims__AudioFormatType(soap, fims__AudioFormatType*) serialize to a stream
class fims__AudioFormatType : public fims__FormatType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__FormatType:
/// <PRE><BLOCKQUOTE>
///   User defined technical attributes. See 'technical attribute' in EBU Tech 3293 for
///   more information.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__TechnicalAttributeType* of length 0..unbounded.
    std::vector<fims__TechnicalAttributeType*> technicalAttribute             0;
    END OF INHERITED FROM fims__FormatType */
/// <PRE><BLOCKQUOTE>
///   Audio sampling rate that defines the number of samples per second taken from the continuous audio signal, and it is expressed in Hertz.
/// </BLOCKQUOTE></PRE>
/// Element "samplingRate" of XSD type xs:decimal.
    xsd__decimal*                        samplingRate                   0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the audio compression format of the resource (e.g. AAC) for an audio channel.
/// </BLOCKQUOTE></PRE>
/// Element "audioEncoding" of XSD type "http://base.fims.tv":CodecType.
    fims__CodecType*                     audioEncoding                  0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Defines the audio track configuration that expresses the arrangement or audio tracks e.g.
///   'stereo', '2+1', 'surround', 'surround (7+1)' etc..
/// </BLOCKQUOTE></PRE>
/// class _fims__AudioFormatType_trackConfiguration operations:
/// - soap_new__fims__AudioFormatType_trackConfiguration(soap*) allocate
/// - soap_new__fims__AudioFormatType_trackConfiguration(soap*, int num) allocate array
/// - soap_new_req__fims__AudioFormatType_trackConfiguration(soap*, ...) allocate, set required members
/// - soap_new_set__fims__AudioFormatType_trackConfiguration(soap*, ...) allocate, set all public members
/// - int soap_read__fims__AudioFormatType_trackConfiguration(soap*, _fims__AudioFormatType_trackConfiguration*) deserialize from a stream
/// - int soap_write__fims__AudioFormatType_trackConfiguration(soap, _fims__AudioFormatType_trackConfiguration*) serialize to a stream
    class _fims__AudioFormatType_trackConfiguration
    {
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *trackConfiguration             0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Definition of audio tracks in the source.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__BMTrackType* of length 0..unbounded.
    std::vector<fims__BMTrackType*     > audioTrack                     0;
/// <PRE><BLOCKQUOTE>
///   Number of channels used for the source recording.
/// </BLOCKQUOTE></PRE>
/// Element "channels" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             channels                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Number of bits at which the audio is encoded, measured in bits per second.
/// </BLOCKQUOTE></PRE>
/// Element "bitRate" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             bitRate                        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Type of bitrate, either constant or variable.
/// </BLOCKQUOTE></PRE>
/// Element "bitRateMode" of XSD type "http://base.fims.tv":BitRateModeType.
    enum fims__BitRateModeType*          bitRateMode                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Sample size for the recording, e.g. 16- or 24-bits per sample.
/// </BLOCKQUOTE></PRE>
/// Element "sampleSize" of XSD type xs:nonNegativeInteger.
    xsd__nonNegativeInteger*             sampleSize                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Whether the samples are represented as integer or floating point values.
/// </BLOCKQUOTE></PRE>
/// Element "sampleType" of XSD type "http://base.fims.tv":AudioSampleType.
    enum fims__AudioSampleType*          sampleType                     0;	///< Optional element.
};

/// @brief "http://base.fims.tv":DataFormatType is a complexType with complexContent extension of XSD type "http://base.fims.tv":FormatType.
///
/// <PRE><BLOCKQUOTE>
///   Characteristics of a data signal, used to carry captioning or ancillary data.
/// </BLOCKQUOTE></PRE>
/// class fims__DataFormatType operations:
/// - soap_new_fims__DataFormatType(soap*) allocate
/// - soap_new_fims__DataFormatType(soap*, int num) allocate array
/// - soap_new_req_fims__DataFormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__DataFormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__DataFormatType(soap*, fims__DataFormatType*) deserialize from a stream
/// - int soap_write_fims__DataFormatType(soap, fims__DataFormatType*) serialize to a stream
class fims__DataFormatType : public fims__FormatType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__FormatType:
/// <PRE><BLOCKQUOTE>
///   User defined technical attributes. See 'technical attribute' in EBU Tech 3293 for
///   more information.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__TechnicalAttributeType* of length 0..unbounded.
    std::vector<fims__TechnicalAttributeType*> technicalAttribute             0;
    END OF INHERITED FROM fims__FormatType */
/// <PRE><BLOCKQUOTE>
///   Where captioning data is present, describes the captioning formats and their purpose.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__CaptioningFormatType* of length 0..unbounded.
    std::vector<fims__CaptioningFormatType*> captioningFormat               0;
/// <PRE><BLOCKQUOTE>
///   Where ancillary data is present, describes the captioning formats and their
///   purpose.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__AncillaryDataFormatType* of length 0..unbounded.
    std::vector<fims__AncillaryDataFormatType*> ancillaryDataFormat            0;
};

/// @brief "http://base.fims.tv":ContainerFormatType is a complexType with complexContent extension of XSD type "http://base.fims.tv":FormatType.
///
/// <PRE><BLOCKQUOTE>
///   Container/wrapper format that is used in concert to the streams encoding, for example MXF, wave, Quicktime, etc. See 'fileFormat' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// class fims__ContainerFormatType operations:
/// - soap_new_fims__ContainerFormatType(soap*) allocate
/// - soap_new_fims__ContainerFormatType(soap*, int num) allocate array
/// - soap_new_req_fims__ContainerFormatType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ContainerFormatType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ContainerFormatType(soap*, fims__ContainerFormatType*) deserialize from a stream
/// - int soap_write_fims__ContainerFormatType(soap, fims__ContainerFormatType*) serialize to a stream
class fims__ContainerFormatType : public fims__FormatType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__FormatType:
/// <PRE><BLOCKQUOTE>
///   User defined technical attributes. See 'technical attribute' in EBU Tech 3293 for
///   more information.
/// </BLOCKQUOTE></PRE>
/// Vector of fims__TechnicalAttributeType* of length 0..unbounded.
    std::vector<fims__TechnicalAttributeType*> technicalAttribute             0;
    END OF INHERITED FROM fims__FormatType */
/// <PRE><BLOCKQUOTE>
///   Defines the file format for the data. See 'fileFormat' in EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// class _fims__ContainerFormatType_containerFormat operations:
/// - soap_new__fims__ContainerFormatType_containerFormat(soap*) allocate
/// - soap_new__fims__ContainerFormatType_containerFormat(soap*, int num) allocate array
/// - soap_new_req__fims__ContainerFormatType_containerFormat(soap*, ...) allocate, set required members
/// - soap_new_set__fims__ContainerFormatType_containerFormat(soap*, ...) allocate, set all public members
/// - int soap_read__fims__ContainerFormatType_containerFormat(soap*, _fims__ContainerFormatType_containerFormat*) deserialize from a stream
/// - int soap_write__fims__ContainerFormatType_containerFormat(soap, _fims__ContainerFormatType_containerFormat*) serialize to a stream
    class _fims__ContainerFormatType_containerFormat
    {
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="formatGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text field. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatLabel" of XSD type xs:string.
   @std::wstring*                        formatLabel                    0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   An optional definition. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatDefinition" of XSD type xs:string.
   @std::wstring*                        formatDefinition               0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   A link to a term or identification of a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "formatLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         formatLink                     0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *containerFormat                0;	///< Optional element.
};

/// @brief "http://base.fims.tv":SimpleFileLocatorType is a complexType with complexContent extension of XSD type "http://base.fims.tv":BMEssenceLocatorType.
///
/// <PRE><BLOCKQUOTE>
///   Location of essence represented by a single file.
/// </BLOCKQUOTE></PRE>
/// class fims__SimpleFileLocatorType operations:
/// - soap_new_fims__SimpleFileLocatorType(soap*) allocate
/// - soap_new_fims__SimpleFileLocatorType(soap*, int num) allocate array
/// - soap_new_req_fims__SimpleFileLocatorType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__SimpleFileLocatorType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__SimpleFileLocatorType(soap*, fims__SimpleFileLocatorType*) deserialize from a stream
/// - int soap_write_fims__SimpleFileLocatorType(soap, fims__SimpleFileLocatorType*) serialize to a stream
class fims__SimpleFileLocatorType : public fims__BMEssenceLocatorType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__BMEssenceLocatorType:
/// <PRE><BLOCKQUOTE>
///   Kind of storage for the essence, for example "online" or "hsm".
/// </BLOCKQUOTE></PRE>
/// Element "storageType" of XSD type "http://base.fims.tv":StorageType.
    fims__StorageType*                   storageType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the geographical location of the content, for example "New York".
/// </BLOCKQUOTE></PRE>
/// Element "locatorInfo" of XSD type xs:string.
    std::wstring*                        locatorInfo                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Multipurpose Internet Mail Extensions Media Type for the physical container used for the representation. Vendors are encouraged to register MIME types for the containers in use, such as a folder containing capture data from a camera. Where additional structural data is required, vendors are encouraged to extend one of the essence locator types (single file, list, or folder).
/// </BLOCKQUOTE></PRE>
/// class _fims__SimpleFileLocatorType_containerMimeType operations:
/// - soap_new__fims__SimpleFileLocatorType_containerMimeType(soap*) allocate
/// - soap_new__fims__SimpleFileLocatorType_containerMimeType(soap*, int num) allocate array
/// - soap_new_req__fims__SimpleFileLocatorType_containerMimeType(soap*, ...) allocate, set required members
/// - soap_new_set__fims__SimpleFileLocatorType_containerMimeType(soap*, ...) allocate, set all public members
/// - int soap_read__fims__SimpleFileLocatorType_containerMimeType(soap*, _fims__SimpleFileLocatorType_containerMimeType*) deserialize from a stream
/// - int soap_write__fims__SimpleFileLocatorType_containerMimeType(soap, _fims__SimpleFileLocatorType_containerMimeType*) serialize to a stream
    class _fims__SimpleFileLocatorType_containerMimeType
    {
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *containerMimeType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The essence status may be New, Online, Offine, Removed, Purged, Invalid, or Processing.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMEssenceLocatorStatusType.
    fims__BMEssenceLocatorStatusType*    status                         0;	///< Optional element.
    END OF INHERITED FROM fims__BMEssenceLocatorType */
/// <PRE><BLOCKQUOTE>
///   Location of the essence-containing single file, such as an MXF OP-1a
///   file.
/// </BLOCKQUOTE></PRE>
/// Element "file" of XSD type xs:anyURI.
    xsd__anyURI*                         file                           0;	///< Optional element.
};

/// @brief "http://base.fims.tv":ListFileLocatorType is a complexType with complexContent extension of XSD type "http://base.fims.tv":BMEssenceLocatorType.
///
/// <PRE><BLOCKQUOTE>
///   Location of essence represented by a list of files, such as the collection of multiple bitrate files for HTTP Live Streaming.
/// </BLOCKQUOTE></PRE>
/// class fims__ListFileLocatorType operations:
/// - soap_new_fims__ListFileLocatorType(soap*) allocate
/// - soap_new_fims__ListFileLocatorType(soap*, int num) allocate array
/// - soap_new_req_fims__ListFileLocatorType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__ListFileLocatorType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__ListFileLocatorType(soap*, fims__ListFileLocatorType*) deserialize from a stream
/// - int soap_write_fims__ListFileLocatorType(soap, fims__ListFileLocatorType*) serialize to a stream
class fims__ListFileLocatorType : public fims__BMEssenceLocatorType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__BMEssenceLocatorType:
/// <PRE><BLOCKQUOTE>
///   Kind of storage for the essence, for example "online" or "hsm".
/// </BLOCKQUOTE></PRE>
/// Element "storageType" of XSD type "http://base.fims.tv":StorageType.
    fims__StorageType*                   storageType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the geographical location of the content, for example "New York".
/// </BLOCKQUOTE></PRE>
/// Element "locatorInfo" of XSD type xs:string.
    std::wstring*                        locatorInfo                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Multipurpose Internet Mail Extensions Media Type for the physical container used for the representation. Vendors are encouraged to register MIME types for the containers in use, such as a folder containing capture data from a camera. Where additional structural data is required, vendors are encouraged to extend one of the essence locator types (single file, list, or folder).
/// </BLOCKQUOTE></PRE>
/// class _fims__ListFileLocatorType_containerMimeType operations:
/// - soap_new__fims__ListFileLocatorType_containerMimeType(soap*) allocate
/// - soap_new__fims__ListFileLocatorType_containerMimeType(soap*, int num) allocate array
/// - soap_new_req__fims__ListFileLocatorType_containerMimeType(soap*, ...) allocate, set required members
/// - soap_new_set__fims__ListFileLocatorType_containerMimeType(soap*, ...) allocate, set all public members
/// - int soap_read__fims__ListFileLocatorType_containerMimeType(soap*, _fims__ListFileLocatorType_containerMimeType*) deserialize from a stream
/// - int soap_write__fims__ListFileLocatorType_containerMimeType(soap, _fims__ListFileLocatorType_containerMimeType*) serialize to a stream
    class _fims__ListFileLocatorType_containerMimeType
    {
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *containerMimeType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The essence status may be New, Online, Offine, Removed, Purged, Invalid, or Processing.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMEssenceLocatorStatusType.
    fims__BMEssenceLocatorStatusType*    status                         0;	///< Optional element.
    END OF INHERITED FROM fims__BMEssenceLocatorType */
/// <PRE><BLOCKQUOTE>
///   List of a collection of files that, taken together, represent an essence location. Note that
///   the files are not necessarily stored in the folder, on the same disk resource, or even on the same server.
/// </BLOCKQUOTE></PRE>
/// Vector of xsd__anyURI of length 0..unbounded.
    std::vector<xsd__anyURI            > file                           0;
};

/// @brief "http://base.fims.tv":FolderLocatorType is a complexType with complexContent extension of XSD type "http://base.fims.tv":BMEssenceLocatorType.
///
/// <PRE><BLOCKQUOTE>
///   Parent of a folder structure that, taken as a whole including its children, represents an essence location.
/// </BLOCKQUOTE></PRE>
/// class fims__FolderLocatorType operations:
/// - soap_new_fims__FolderLocatorType(soap*) allocate
/// - soap_new_fims__FolderLocatorType(soap*, int num) allocate array
/// - soap_new_req_fims__FolderLocatorType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__FolderLocatorType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__FolderLocatorType(soap*, fims__FolderLocatorType*) deserialize from a stream
/// - int soap_write_fims__FolderLocatorType(soap, fims__FolderLocatorType*) serialize to a stream
class fims__FolderLocatorType : public fims__BMEssenceLocatorType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__BMEssenceLocatorType:
/// <PRE><BLOCKQUOTE>
///   Kind of storage for the essence, for example "online" or "hsm".
/// </BLOCKQUOTE></PRE>
/// Element "storageType" of XSD type "http://base.fims.tv":StorageType.
    fims__StorageType*                   storageType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the geographical location of the content, for example "New York".
/// </BLOCKQUOTE></PRE>
/// Element "locatorInfo" of XSD type xs:string.
    std::wstring*                        locatorInfo                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Multipurpose Internet Mail Extensions Media Type for the physical container used for the representation. Vendors are encouraged to register MIME types for the containers in use, such as a folder containing capture data from a camera. Where additional structural data is required, vendors are encouraged to extend one of the essence locator types (single file, list, or folder).
/// </BLOCKQUOTE></PRE>
/// class _fims__FolderLocatorType_containerMimeType operations:
/// - soap_new__fims__FolderLocatorType_containerMimeType(soap*) allocate
/// - soap_new__fims__FolderLocatorType_containerMimeType(soap*, int num) allocate array
/// - soap_new_req__fims__FolderLocatorType_containerMimeType(soap*, ...) allocate, set required members
/// - soap_new_set__fims__FolderLocatorType_containerMimeType(soap*, ...) allocate, set all public members
/// - int soap_read__fims__FolderLocatorType_containerMimeType(soap*, _fims__FolderLocatorType_containerMimeType*) deserialize from a stream
/// - int soap_write__fims__FolderLocatorType_containerMimeType(soap, _fims__FolderLocatorType_containerMimeType*) serialize to a stream
    class _fims__FolderLocatorType_containerMimeType
    {
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *containerMimeType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The essence status may be New, Online, Offine, Removed, Purged, Invalid, or Processing.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMEssenceLocatorStatusType.
    fims__BMEssenceLocatorStatusType*    status                         0;	///< Optional element.
    END OF INHERITED FROM fims__BMEssenceLocatorType */
/// <PRE><BLOCKQUOTE>
///   Root of a folder structure where the root and its children are an essence representation.
/// </BLOCKQUOTE></PRE>
/// Element "folder" of XSD type xs:anyURI.
    xsd__anyURI*                         folder                         0;	///< Optional element.
};

/// @brief "http://base.fims.tv":EssencePlaceholderLocatorType is a complexType with complexContent extension of XSD type "http://base.fims.tv":BMEssenceLocatorType.
///
/// <PRE><BLOCKQUOTE>
///   Location of essence represented by placeholder.
/// </BLOCKQUOTE></PRE>
/// class fims__EssencePlaceholderLocatorType operations:
/// - soap_new_fims__EssencePlaceholderLocatorType(soap*) allocate
/// - soap_new_fims__EssencePlaceholderLocatorType(soap*, int num) allocate array
/// - soap_new_req_fims__EssencePlaceholderLocatorType(soap*, ...) allocate, set required members
/// - soap_new_set_fims__EssencePlaceholderLocatorType(soap*, ...) allocate, set all public members
/// - int soap_read_fims__EssencePlaceholderLocatorType(soap*, fims__EssencePlaceholderLocatorType*) deserialize from a stream
/// - int soap_write_fims__EssencePlaceholderLocatorType(soap, fims__EssencePlaceholderLocatorType*) serialize to a stream
class fims__EssencePlaceholderLocatorType : public fims__BMEssenceLocatorType
{ public:
/*  INHERITED FROM fims__ResourceReferenceType:
/// <PRE><BLOCKQUOTE>
///   Locally distinct identifier for the resource that can be used to make reference to the resource. The
///   reference may also be globally unique.
/// </BLOCKQUOTE></PRE>
/// Element "resourceID" of XSD type "http://base.fims.tv":ResourceIDType.
    fims__ResourceIDType                 resourceID                     1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   Identifier for the specific revision of the resource. Tracking the different versions of resources
///   across systems enables different instances and versions of a resource to
///   coexist at different locations and updated to be eventually consistent
///   according to local policy.
/// </BLOCKQUOTE></PRE>
/// Element "revisionID" of XSD type "http://base.fims.tv":RevisionIDType.
    fims__RevisionIDType*                revisionID                     0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   A Uniform Resource Location that points to a specific instance of a resource at a location.
/// </BLOCKQUOTE></PRE>
/// Element "location" of XSD type xs:anyURI.
    xsd__anyURI*                         location                       0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceReferenceType */
/*  INHERITED FROM fims__ResourceType:
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was created.
/// </BLOCKQUOTE></PRE>
/// Element "resourceCreationDate" of XSD type xs:dateTime.
    time_t*                              resourceCreationDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Date and time when this resource was last modified. Modification date of the resource should
///   be updated when any of the values of the resource's properties are updated.
/// </BLOCKQUOTE></PRE>
/// Element "resourceModifiedDate" of XSD type xs:dateTime.
    time_t*                              resourceModifiedDate           0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has generated the object as a result of an operation or procedure.
/// </BLOCKQUOTE></PRE>
/// Element "serviceGeneratedElement" of XSD type xs:boolean.
    bool*                                serviceGeneratedElement        0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   An indication the service has fully populated the generated object.
/// </BLOCKQUOTE></PRE>
/// Element "isFullyPopulated" of XSD type xs:boolean.
    bool*                                isFullyPopulated               0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Endpoints where a service can send back a notification for a job completed or failed.
/// </BLOCKQUOTE></PRE>
/// Element "notifyAt" of XSD type "http://base.fims.tv":AsyncEndpointType.
    fims__AsyncEndpointType*             notifyAt                       0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionGroup" of XSD type "http://base.fims.tv":ExtensionGroup.
    fims__ExtensionGroup*                ExtensionGroup                 0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Extension point.
/// </BLOCKQUOTE></PRE>
/// Element "ExtensionAttributes" of XSD type "http://base.fims.tv":ExtensionAttributes.
    fims__ExtensionAttributes*           ExtensionAttributes            0;	///< Optional element.
    END OF INHERITED FROM fims__ResourceType */
/*  INHERITED FROM fims__BMEssenceLocatorType:
/// <PRE><BLOCKQUOTE>
///   Kind of storage for the essence, for example "online" or "hsm".
/// </BLOCKQUOTE></PRE>
/// Element "storageType" of XSD type "http://base.fims.tv":StorageType.
    fims__StorageType*                   storageType                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Describes the geographical location of the content, for example "New York".
/// </BLOCKQUOTE></PRE>
/// Element "locatorInfo" of XSD type xs:string.
    std::wstring*                        locatorInfo                    0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   Multipurpose Internet Mail Extensions Media Type for the physical container used for the representation. Vendors are encouraged to register MIME types for the containers in use, such as a folder containing capture data from a camera. Where additional structural data is required, vendors are encouraged to extend one of the essence locator types (single file, list, or folder).
/// </BLOCKQUOTE></PRE>
/// class _fims__EssencePlaceholderLocatorType_containerMimeType operations:
/// - soap_new__fims__EssencePlaceholderLocatorType_containerMimeType(soap*) allocate
/// - soap_new__fims__EssencePlaceholderLocatorType_containerMimeType(soap*, int num) allocate array
/// - soap_new_req__fims__EssencePlaceholderLocatorType_containerMimeType(soap*, ...) allocate, set required members
/// - soap_new_set__fims__EssencePlaceholderLocatorType_containerMimeType(soap*, ...) allocate, set all public members
/// - int soap_read__fims__EssencePlaceholderLocatorType_containerMimeType(soap*, _fims__EssencePlaceholderLocatorType_containerMimeType*) deserialize from a stream
/// - int soap_write__fims__EssencePlaceholderLocatorType_containerMimeType(soap, _fims__EssencePlaceholderLocatorType_containerMimeType*) serialize to a stream
    class _fims__EssencePlaceholderLocatorType_containerMimeType
    {
/// __item wraps "xs:string" simpleContent.
    std::wstring                         __item                        ;
//  BEGIN ATTRIBUTEGROUP <xs:attributeGroup name="typeGroup">.
/// <PRE><BLOCKQUOTE>
///   Free text. Example: H264 Main Profile @ Level 1. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLabel" of XSD type xs:string.
   @std::wstring*                        typeLabel                      0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Free text for an optional definition. Example: the video compression scheme H264, main profile, level1 as specified by ISO/IEC. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeDefinition" of XSD type xs:string.
   @std::wstring*                        typeDefinition                 0;	///< Optional attribute.
/// <PRE><BLOCKQUOTE>
///   Link to a classification scheme. See EBU Tech 3293 for more information.
/// </BLOCKQUOTE></PRE>
/// Attribute "typeLink" of XSD type xs:anyURI.
   @xsd__anyURI*                         typeLink                       0;	///< Optional attribute.
//  END OF ATTRIBUTEGROUP
    }                                   *containerMimeType              0;	///< Optional element.
/// <PRE><BLOCKQUOTE>
///   The essence status may be New, Online, Offine, Removed, Purged, Invalid, or Processing.
/// </BLOCKQUOTE></PRE>
/// Element "status" of XSD type "http://base.fims.tv":BMEssenceLocatorStatusType.
    fims__BMEssenceLocatorStatusType*    status                         0;	///< Optional element.
    END OF INHERITED FROM fims__BMEssenceLocatorType */
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://temp/edlprovider                                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://temp/edlprovider":installedEdlsResponse of XSD type "http://temp/edlprovider":InstalledEdlsResponseType.
/// <PRE><BLOCKQUOTE>
///   This element provides the list of EDL types in the service together with the recommended extension types.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://temp/edlprovider":getEdlRequest of XSD type "http://temp/edlprovider":EdlCreateRequestType.
/// <PRE><BLOCKQUOTE>
///   This element represents the request made to create an EDL.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://temp/edlprovider":getEdlDoubleRequest of XSD type "http://temp/edlprovider":EdlCreateRequestDoubleType.
/// <PRE><BLOCKQUOTE>
///   This element represents the request made to create an EDL using a frame rate represented in floating point.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://temp/edlprovider":getEdlResponse of XSD type "http://temp/edlprovider":EdlCreateResponseType.
/// <PRE><BLOCKQUOTE>
///   This element represents the response when a EDL is created, containing the EDL contents.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://temp/edlprovider":edlProviderFault of XSD type "http://temp/edlprovider":EdlProviderFaultType.
/// <PRE><BLOCKQUOTE>
///   This element represents a fault that might occur when requesting EDL's from the service.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://temp/edlprovider                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://base.fims.tv                                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://base.fims.tv":manageJobRequest of XSD type "http://base.fims.tv":ManageJobRequestType.
/// <PRE><BLOCKQUOTE>
///   This element allows to submit jobs management requests, such as getting the status or pausing a job.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":manageJobResponse of XSD type "http://base.fims.tv":ManageJobResponseType.
/// <PRE><BLOCKQUOTE>
///   This element provides the response to job management requests, which includes the current status of the job.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":manageQueueRequest of XSD type "http://base.fims.tv":ManageQueueRequestType.
/// <PRE><BLOCKQUOTE>
///   This element allows to submit queue management requests, such as getting the status or locking a queue.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":manageQueueResponse of XSD type "http://base.fims.tv":ManageQueueResponseType.
/// <PRE><BLOCKQUOTE>
///   This element provides the response to queue management requests, which includes the status and length of the queue.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryJobRequest of XSD type "http://base.fims.tv":QueryJobRequestType.
/// <PRE><BLOCKQUOTE>
///   This element is used to request the list of jobs in a queue.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryJobResponse of XSD type "http://base.fims.tv":QueryJobResponseType.
/// <PRE><BLOCKQUOTE>
///   This element provides the list of jobs in a queue.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryServiceDescriptionRequest of XSD type "http://base.fims.tv":QueryServiceDescriptionRequestType.
/// <PRE><BLOCKQUOTE>
///   This element is used to request the service capability.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryServiceDescriptionResponse of XSD type "http://base.fims.tv":QueryServiceDescriptionResponseType.
/// <PRE><BLOCKQUOTE>
///   Provides the requested service capability.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":fault of XSD type "http://base.fims.tv":FaultType.
/// <PRE><BLOCKQUOTE>
///   Element used to carry a fault defined in the base schema, as detailed in the "ErrorCodeType" enumeration.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":resource of XSD type "http://base.fims.tv":ResourceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":resources of XSD type "http://base.fims.tv":ResourcesType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":profile of XSD type "http://base.fims.tv":ProfileType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":profiles of XSD type "http://base.fims.tv":ProfilesType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":service of XSD type "http://base.fims.tv":ServiceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":services of XSD type "http://base.fims.tv":ServicesType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queue of XSD type "http://base.fims.tv":QueueType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queues of XSD type "http://base.fims.tv":QueuesType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":job of XSD type "http://base.fims.tv":JobType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":jobs of XSD type "http://base.fims.tv":JobsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":videoFormat of XSD type "http://base.fims.tv":VideoFormatType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":videoFormats of XSD type "http://base.fims.tv":VideoFormatsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":audioFormat of XSD type "http://base.fims.tv":AudioFormatType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":audioFormats of XSD type "http://base.fims.tv":AudioFormatsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":containerFormat of XSD type "http://base.fims.tv":ContainerFormatType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":containerFormats of XSD type "http://base.fims.tv":ContainerFormatsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":dataFormat of XSD type "http://base.fims.tv":DataFormatType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":dataFormats of XSD type "http://base.fims.tv":DataFormatsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmObject of XSD type "http://base.fims.tv":BMObjectType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmObjects of XSD type "http://base.fims.tv":BMObjectsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmContent of XSD type "http://base.fims.tv":BMContentType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmContents of XSD type "http://base.fims.tv":BMContentsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmContentFormat of XSD type "http://base.fims.tv":BMContentFormatType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmContentFormats of XSD type "http://base.fims.tv":BMContentFormatsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmEssenceLocator of XSD type "http://base.fims.tv":BMEssenceLocatorType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmEssenceLocators of XSD type "http://base.fims.tv":BMEssenceLocatorsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":description of XSD type "http://base.fims.tv":DescriptionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":descriptions of XSD type "http://base.fims.tv":DescriptionsType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":resourceReference of XSD type "http://base.fims.tv":ResourceReferenceType.
/// <PRE><BLOCKQUOTE>
///   This is an instance of a Resource Reference.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":resourceReferences of XSD type "http://base.fims.tv":ResourceReferencesType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Resource References of ResourceReferencesType.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customValue of XSD type "http://base.fims.tv":CustomValueType.
/// <PRE><BLOCKQUOTE>
///   This is an instance of a custom value.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customValues of XSD type "http://base.fims.tv":CustomValuesType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Custom Values of CustomValuesType.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmCustomStatusExtension of XSD type "http://base.fims.tv":BMCustomStatusExtensionType.
/// <PRE><BLOCKQUOTE>
///   An instance of a custom status extension type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmCustomStatusExtensions of XSD type "http://base.fims.tv":BMCustomStatusExtensionsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Custom Status Extensions of Custom Status Extensions Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmContentStatus of XSD type "http://base.fims.tv":BMContentStatusType.
/// <PRE><BLOCKQUOTE>
///   An instance of Content Status.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmContentStatuses of XSD type "http://base.fims.tv":BMContentStatusesType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Content Statuses of Custom Statuses Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmEssenceLocatorStatus of XSD type "http://base.fims.tv":BMEssenceLocatorStatusType.
/// <PRE><BLOCKQUOTE>
///   An instance of Essence Locator Status.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":bmEssenceLocatorStatuses of XSD type "http://base.fims.tv":BMEssenceLocatorStatusesType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Essence Locator Statuses of Essence Locator Statuses Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":credential of XSD type "http://base.fims.tv":CredentialType.
/// <PRE><BLOCKQUOTE>
///   An instance of a credential type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":credentials of XSD type "http://base.fims.tv":CredentialsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Credentials of the Credentials Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":lockToken of XSD type "http://base.fims.tv":LockTokenType.
/// <PRE><BLOCKQUOTE>
///   An instance of a lock token bound to an instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":lockTokens of XSD type "http://base.fims.tv":LockTokensType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Lock Tokens of the Lock Tokens Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":superLockToken of XSD type "http://base.fims.tv":SuperLockTokenType.
/// <PRE><BLOCKQUOTE>
///   An instance of a Super Lock Token Type that has super locking access to a currently locked instance of a media resource.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":superLockTokens of XSD type "http://base.fims.tv":SuperLockTokensType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Super Lock Tokens of the Super Lock Tokens Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryExpression of XSD type "http://base.fims.tv":QueryExpressionType.
/// <PRE><BLOCKQUOTE>
///   An instance of a Query Expression resource.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryExpressions of XSD type "http://base.fims.tv":QueryExpressionsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Query Expressions of the Query Expressions Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customQueryParameterOperator of XSD type "http://base.fims.tv":CustomQueryParameterOperatorType.
/// <PRE><BLOCKQUOTE>
///   An instance of a Custom Query Parameter Operator resource.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customQueryParameterOperators of XSD type "http://base.fims.tv":CustomQueryParameterOperatorsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Custom Query Parameter Operators of the Custom Query Parameter Operators Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryParameter of XSD type "http://base.fims.tv":QueryParameterType.
/// <PRE><BLOCKQUOTE>
///   An instance of the Query Parameter Type representation with several parameter attributes.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryParameters of XSD type "http://base.fims.tv":QueryParametersType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Query Parameters of the Query Parameters Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customQueryGroupOperator of XSD type "http://base.fims.tv":CustomQueryGroupOperatorType.
/// <PRE><BLOCKQUOTE>
///   An instance a Custom Query Group Operator representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customQueryGroupOperators of XSD type "http://base.fims.tv":CustomQueryGroupOperatorsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Custom Query Group Operators of the Custom Query Group Operators Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryGroup of XSD type "http://base.fims.tv":QueryGroupType.
/// <PRE><BLOCKQUOTE>
///   An instance of a Query Group representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":queryGroups of XSD type "http://base.fims.tv":QueryGroupsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Query Groups of the Query Groups Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customEventTemplate of XSD type "http://base.fims.tv":CustomEventTemplateType.
/// <PRE><BLOCKQUOTE>
///   An instance of a Custom Event Template representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":customEventTemplates of XSD type "http://base.fims.tv":CustomEventTemplatesType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Custom Event Templates of the Custom Event Templates Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":eventEnvelope of XSD type "http://base.fims.tv":EventEnvelopeType.
/// <PRE><BLOCKQUOTE>
///   An instance of an Event Envelope representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":eventEnvelopes of XSD type "http://base.fims.tv":EventEnvelopesType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Event Envelopes of the Event Envelopes Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":eventPayload of XSD type "http://base.fims.tv":EventPayloadType.
/// <PRE><BLOCKQUOTE>
///   An instance of the Event Payload representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":eventPayloads of XSD type "http://base.fims.tv":EventPayloadsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Event Payloads of the Event Payloads Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":contentEvent of XSD type "http://base.fims.tv":ContentEventType.
/// <PRE><BLOCKQUOTE>
///   An instance of the Content Event representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":contentEvents of XSD type "http://base.fims.tv":ContentEventsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Content Events of the Content Events Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":contentStatusEvent of XSD type "http://base.fims.tv":ContentStatusEventType.
/// <PRE><BLOCKQUOTE>
///   An instance of the Content Status Event representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":contentStatusEvents of XSD type "http://base.fims.tv":ContentStatusEventsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Content Status Events of the Content Status Events Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":contentCustomEvent of XSD type "http://base.fims.tv":ContentCustomEventType.
/// <PRE><BLOCKQUOTE>
///   An instance of the Content Custom Event representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":contentCustomEvents of XSD type "http://base.fims.tv":ContentCustomEventsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of Content Custom Events of the Content Custom Events Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":systemEvent of XSD type "http://base.fims.tv":SystemEventType.
/// <PRE><BLOCKQUOTE>
///   An instance of the System Event representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":systemEvents of XSD type "http://base.fims.tv":SystemEventsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of System Events of the System Events Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":systemExceptionEvent of XSD type "http://base.fims.tv":SystemExceptionEventType.
/// <PRE><BLOCKQUOTE>
///   An instance of the System Exception Event representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":systemExceptionEvents of XSD type "http://base.fims.tv":SystemExceptionEventsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of System Exception Events of the System Exception Events Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":systemPerformanceEvent of XSD type "http://base.fims.tv":SystemPerformanceEventType.
/// <PRE><BLOCKQUOTE>
///   An instance of the System Performance Event representation.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.fims.tv":systemPerformanceEvents of XSD type "http://base.fims.tv":SystemPerformanceEventsType.
/// <PRE><BLOCKQUOTE>
///   This is the list of System Performance Events of the System Performance Events Type.
/// </BLOCKQUOTE></PRE>
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://base.fims.tv                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://baseTime.fims.tv                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://baseTime.fims.tv                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://description.fims.tv                                               *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://description.fims.tv":bmContentDescription of XSD type "http://description.fims.tv":bmContentDescriptionType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://description.fims.tv                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap edlprovider service name:	EdlProviderBinding 
//gsoap edlprovider service type:	EdlProviderService 
//gsoap edlprovider service port:	http://host/path/EDLProviderPort 
//gsoap edlprovider service namespace:	http://temp/edlprovider 
//gsoap edlprovider service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage EDLProvider Definitions

@section EDLProvider_bindings Service Bindings

  - @ref EdlProviderBinding

@section EDLProvider_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page EdlProviderBinding Binding "EdlProviderBinding"

@section EdlProviderBinding_operations Operations of Binding "EdlProviderBinding"

  - @ref __edlprovider__getInstalledEdls

  - @ref __edlprovider__getEdl

  - @ref __edlprovider__getEdlDouble

@section EdlProviderBinding_ports Endpoints of Binding "EdlProviderBinding"

  - http://host/path/EDLProviderPort

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
struct SOAP_ENV__Detail
{
/// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
/// SOAP Fault message "FaultMsg" part "fault" element ""http://temp/edlprovider":edlProviderFault".
    edlprovider__EdlProviderFaultType*   edlprovider__edlProviderFault ;
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object of type X or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   EdlProviderBinding                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __edlprovider__getInstalledEdls                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__edlprovider__getInstalledEdls" of service binding "EdlProviderBinding".
This operation gets all the EDL types available in the service.

  - SOAP document/literal style messaging

  - Action: "http://temp/edlprovider/getInstalledEdls"

  - Addressing input action: "http://temp/edlprovider/getInstalledEdls"

  - Addressing output action: "http://temp/edlprovider/getInstalledEdlsResponse"

  - SOAP Output Fault: "http://temp/edlprovider":edlProviderFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___edlprovider__getInstalledEdls(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    edlprovider__InstalledEdlsResponseType&edlprovider__installedEdlsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __edlprovider__getInstalledEdls(
    struct soap *soap,
    // input parameters:
    // output parameters:
    edlprovider__InstalledEdlsResponseType&edlprovider__installedEdlsResponse
  );
@endcode

C++ proxy class (defined in soapEdlProviderBindingProxy.h):
@code
  class EdlProviderBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEdlProviderBindingService.h):
@code
  class EdlProviderBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap edlprovider service method-protocol:	getInstalledEdls SOAP
//gsoap edlprovider service method-style:	getInstalledEdls document
//gsoap edlprovider service method-encoding:	getInstalledEdls literal
//gsoap edlprovider service method-input-action:	getInstalledEdls http://temp/edlprovider/getInstalledEdls
//gsoap edlprovider service method-output-action:	getInstalledEdls http://temp/edlprovider/getInstalledEdlsResponse
//gsoap edlprovider service method-fault:	getInstalledEdls edlprovider__edlProviderFault
int __edlprovider__getInstalledEdls(
///  out parameter: This message provides the response to getting all the EDL types available in the service.
    edlprovider__InstalledEdlsResponseType&edlprovider__installedEdlsResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __edlprovider__getEdl                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__edlprovider__getEdl" of service binding "EdlProviderBinding".
This operation gets all the edl types available in the service.

  - SOAP document/literal style messaging

  - Action: "http://temp/edlprovider/getEdl"

  - Addressing input action: "http://temp/edlprovider/getEdl"

  - Addressing output action: "http://temp/edlprovider/getEdlResponse"

  - SOAP Output Fault: "http://temp/edlprovider":edlProviderFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___edlprovider__getEdl(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    edlprovider__EdlCreateRequestType*  edlprovider__getEdlRequest,
    // output parameters:
    edlprovider__EdlCreateResponseType &edlprovider__getEdlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __edlprovider__getEdl(
    struct soap *soap,
    // input parameters:
    edlprovider__EdlCreateRequestType*  edlprovider__getEdlRequest,
    // output parameters:
    edlprovider__EdlCreateResponseType &edlprovider__getEdlResponse
  );
@endcode

C++ proxy class (defined in soapEdlProviderBindingProxy.h):
@code
  class EdlProviderBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEdlProviderBindingService.h):
@code
  class EdlProviderBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap edlprovider service method-protocol:	getEdl SOAP
//gsoap edlprovider service method-style:	getEdl document
//gsoap edlprovider service method-encoding:	getEdl literal
//gsoap edlprovider service method-input-action:	getEdl http://temp/edlprovider/getEdl
//gsoap edlprovider service method-output-action:	getEdl http://temp/edlprovider/getEdlResponse
//gsoap edlprovider service method-fault:	getEdl edlprovider__edlProviderFault
int __edlprovider__getEdl(
///  out parameter: This message represents the request to create an EDL with a specific type.
    edlprovider__EdlCreateRequestType*  edlprovider__getEdlRequest,	///< Input parameter
///  out parameter: This message provides the response to getting an EDL type from the service.
    edlprovider__EdlCreateResponseType &edlprovider__getEdlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __edlprovider__getEdlDouble                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__edlprovider__getEdlDouble" of service binding "EdlProviderBinding".
This operation gets all the EDL types available in the service.

  - SOAP document/literal style messaging

  - Action: "http://temp/edlprovider/getEdlDouble"

  - Addressing input action: "http://temp/edlprovider/getEdlDouble"

  - Addressing output action: "http://temp/edlprovider/getEdlDoubleResponse"

  - SOAP Output Fault: "http://temp/edlprovider":edlProviderFault (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___edlprovider__getEdlDouble(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    edlprovider__EdlCreateRequestDoubleType* edlprovider__getEdlDoubleRequest,
    // output parameters:
    edlprovider__EdlCreateResponseType &edlprovider__getEdlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __edlprovider__getEdlDouble(
    struct soap *soap,
    // input parameters:
    edlprovider__EdlCreateRequestDoubleType* edlprovider__getEdlDoubleRequest,
    // output parameters:
    edlprovider__EdlCreateResponseType &edlprovider__getEdlResponse
  );
@endcode

C++ proxy class (defined in soapEdlProviderBindingProxy.h):
@code
  class EdlProviderBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapEdlProviderBindingService.h):
@code
  class EdlProviderBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap edlprovider service method-protocol:	getEdlDouble SOAP
//gsoap edlprovider service method-style:	getEdlDouble document
//gsoap edlprovider service method-encoding:	getEdlDouble literal
//gsoap edlprovider service method-input-action:	getEdlDouble http://temp/edlprovider/getEdlDouble
//gsoap edlprovider service method-output-action:	getEdlDouble http://temp/edlprovider/getEdlDoubleResponse
//gsoap edlprovider service method-fault:	getEdlDouble edlprovider__edlProviderFault
int __edlprovider__getEdlDouble(
///  out parameter: This message represents the request to create an EDL with a specific type.
    edlprovider__EdlCreateRequestDoubleType* edlprovider__getEdlDoubleRequest,	///< Input parameter
///  out parameter: This message provides the response to getting an EDL type from the service.
    edlprovider__EdlCreateResponseType &edlprovider__getEdlResponse	///< Output parameter
);

/**

@page EdlProviderBinding Binding "EdlProviderBinding"

@section EdlProviderBinding_policy_enablers Policy Enablers of Binding "EdlProviderBinding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section edlprovider Top-level root elements of schema "http://temp/edlprovider"

  - <installedEdlsResponse> (use wsdl2h option -g to auto-generate)

  - <getEdlRequest> (use wsdl2h option -g to auto-generate)

  - <getEdlDoubleRequest> (use wsdl2h option -g to auto-generate)

  - <getEdlResponse> (use wsdl2h option -g to auto-generate)

  - <edlProviderFault> (use wsdl2h option -g to auto-generate)

  - <Map> @ref _edlprovider__Map
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__edlprovider__Map(struct soap*, _edlprovider__Map*);
    // Writer (returns SOAP_OK on success):
    soap_write__edlprovider__Map(struct soap*, _edlprovider__Map*);
    @endcode

@section fims Top-level root elements of schema "http://base.fims.tv"

  - <manageJobRequest> (use wsdl2h option -g to auto-generate)

  - <manageJobResponse> (use wsdl2h option -g to auto-generate)

  - <manageQueueRequest> (use wsdl2h option -g to auto-generate)

  - <manageQueueResponse> (use wsdl2h option -g to auto-generate)

  - <queryJobRequest> (use wsdl2h option -g to auto-generate)

  - <queryJobResponse> (use wsdl2h option -g to auto-generate)

  - <queryServiceDescriptionRequest> (use wsdl2h option -g to auto-generate)

  - <queryServiceDescriptionResponse> (use wsdl2h option -g to auto-generate)

  - <fault> (use wsdl2h option -g to auto-generate)

  - <resource> (use wsdl2h option -g to auto-generate)

  - <resources> (use wsdl2h option -g to auto-generate)

  - <profile> (use wsdl2h option -g to auto-generate)

  - <profiles> (use wsdl2h option -g to auto-generate)

  - <service> (use wsdl2h option -g to auto-generate)

  - <services> (use wsdl2h option -g to auto-generate)

  - <queue> (use wsdl2h option -g to auto-generate)

  - <queues> (use wsdl2h option -g to auto-generate)

  - <job> (use wsdl2h option -g to auto-generate)

  - <jobs> (use wsdl2h option -g to auto-generate)

  - <formatCollection> @ref _fims__formatCollection
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__fims__formatCollection(struct soap*, _fims__formatCollection*);
    // Writer (returns SOAP_OK on success):
    soap_write__fims__formatCollection(struct soap*, _fims__formatCollection*);
    @endcode

  - <videoFormat> (use wsdl2h option -g to auto-generate)

  - <videoFormats> (use wsdl2h option -g to auto-generate)

  - <audioFormat> (use wsdl2h option -g to auto-generate)

  - <audioFormats> (use wsdl2h option -g to auto-generate)

  - <containerFormat> (use wsdl2h option -g to auto-generate)

  - <containerFormats> (use wsdl2h option -g to auto-generate)

  - <dataFormat> (use wsdl2h option -g to auto-generate)

  - <dataFormats> (use wsdl2h option -g to auto-generate)

  - <bmObject> (use wsdl2h option -g to auto-generate)

  - <bmObjects> (use wsdl2h option -g to auto-generate)

  - <bmContent> (use wsdl2h option -g to auto-generate)

  - <bmContents> (use wsdl2h option -g to auto-generate)

  - <bmContentFormat> (use wsdl2h option -g to auto-generate)

  - <bmContentFormats> (use wsdl2h option -g to auto-generate)

  - <bmEssenceLocator> (use wsdl2h option -g to auto-generate)

  - <bmEssenceLocators> (use wsdl2h option -g to auto-generate)

  - <description> (use wsdl2h option -g to auto-generate)

  - <descriptions> (use wsdl2h option -g to auto-generate)

  - <resourceReference> (use wsdl2h option -g to auto-generate)

  - <resourceReferences> (use wsdl2h option -g to auto-generate)

  - <customValue> (use wsdl2h option -g to auto-generate)

  - <customValues> (use wsdl2h option -g to auto-generate)

  - <bmCustomStatusExtension> (use wsdl2h option -g to auto-generate)

  - <bmCustomStatusExtensions> (use wsdl2h option -g to auto-generate)

  - <bmContentStatus> (use wsdl2h option -g to auto-generate)

  - <bmContentStatuses> (use wsdl2h option -g to auto-generate)

  - <bmEssenceLocatorStatus> (use wsdl2h option -g to auto-generate)

  - <bmEssenceLocatorStatuses> (use wsdl2h option -g to auto-generate)

  - <credential> (use wsdl2h option -g to auto-generate)

  - <credentials> (use wsdl2h option -g to auto-generate)

  - <lockToken> (use wsdl2h option -g to auto-generate)

  - <lockTokens> (use wsdl2h option -g to auto-generate)

  - <superLockToken> (use wsdl2h option -g to auto-generate)

  - <superLockTokens> (use wsdl2h option -g to auto-generate)

  - <queryExpression> (use wsdl2h option -g to auto-generate)

  - <queryExpressions> (use wsdl2h option -g to auto-generate)

  - <customQueryParameterOperator> (use wsdl2h option -g to auto-generate)

  - <customQueryParameterOperators> (use wsdl2h option -g to auto-generate)

  - <queryParameter> (use wsdl2h option -g to auto-generate)

  - <queryParameters> (use wsdl2h option -g to auto-generate)

  - <customQueryGroupOperator> (use wsdl2h option -g to auto-generate)

  - <customQueryGroupOperators> (use wsdl2h option -g to auto-generate)

  - <queryGroup> (use wsdl2h option -g to auto-generate)

  - <queryGroups> (use wsdl2h option -g to auto-generate)

  - <customEventTemplate> (use wsdl2h option -g to auto-generate)

  - <customEventTemplates> (use wsdl2h option -g to auto-generate)

  - <eventEnvelope> (use wsdl2h option -g to auto-generate)

  - <eventEnvelopes> (use wsdl2h option -g to auto-generate)

  - <eventPayload> (use wsdl2h option -g to auto-generate)

  - <eventPayloads> (use wsdl2h option -g to auto-generate)

  - <contentEvent> (use wsdl2h option -g to auto-generate)

  - <contentEvents> (use wsdl2h option -g to auto-generate)

  - <contentStatusEvent> (use wsdl2h option -g to auto-generate)

  - <contentStatusEvents> (use wsdl2h option -g to auto-generate)

  - <contentCustomEvent> (use wsdl2h option -g to auto-generate)

  - <contentCustomEvents> (use wsdl2h option -g to auto-generate)

  - <systemEvent> (use wsdl2h option -g to auto-generate)

  - <systemEvents> (use wsdl2h option -g to auto-generate)

  - <systemExceptionEvent> (use wsdl2h option -g to auto-generate)

  - <systemExceptionEvents> (use wsdl2h option -g to auto-generate)

  - <systemPerformanceEvent> (use wsdl2h option -g to auto-generate)

  - <systemPerformanceEvents> (use wsdl2h option -g to auto-generate)

@section fimstime Top-level root elements of schema "http://baseTime.fims.tv"

@section fimsdescription Top-level root elements of schema "http://description.fims.tv"

  - <bmContentDescription> (use wsdl2h option -g to auto-generate)

*/

/* End of D:\Sandbox\EdlProvider\Soap\gsoap\src\EDLProviderInterface.h */
