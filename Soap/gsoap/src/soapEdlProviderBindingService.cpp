/* soapEdlProviderBindingService.cpp
   Generated by gSOAP 2.8.17r from D:\Sandbox\EdlProvider\Soap\gsoap\src\EDLProviderInterface.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapEdlProviderBindingService.h"

EdlProviderBindingService::EdlProviderBindingService()
{	this->soap = soap_new();
	this->own = true;
	EdlProviderBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

EdlProviderBindingService::EdlProviderBindingService(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	EdlProviderBindingService_init(_soap->imode, _soap->omode);
}

EdlProviderBindingService::EdlProviderBindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	EdlProviderBindingService_init(iomode, iomode);
}

EdlProviderBindingService::EdlProviderBindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	EdlProviderBindingService_init(imode, omode);
}

EdlProviderBindingService::~EdlProviderBindingService()
{	if (this->own)
		soap_free(this->soap);
}

void EdlProviderBindingService::EdlProviderBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"fimsdescription", "http://description.fims.tv", NULL, NULL},
	{"fims", "http://base.fims.tv", NULL, NULL},
	{"edlprovider", "http://temp/edlprovider", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void EdlProviderBindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void EdlProviderBindingService::reset()
{	destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	EdlProviderBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
EdlProviderBindingService *EdlProviderBindingService::copy()
{	EdlProviderBindingService *dup = SOAP_NEW_COPY(EdlProviderBindingService);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

int EdlProviderBindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int EdlProviderBindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int EdlProviderBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int EdlProviderBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int EdlProviderBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int EdlProviderBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void EdlProviderBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void EdlProviderBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *EdlProviderBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void EdlProviderBindingService::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *EdlProviderBindingService::soap_header()
{	return this->soap->header;
}

int EdlProviderBindingService::run(int port)
{	if (soap_valid_socket(this->soap->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->soap->error;
			soap_destroy(this->soap);
			soap_end(this->soap);
		}
	}
	else
		return this->soap->error;
	return SOAP_OK;
}

SOAP_SOCKET EdlProviderBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET EdlProviderBindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int EdlProviderBindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif

int EdlProviderBindingService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->soap->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->soap->max_keep_alive > 0 && !--k)
			this->soap->keep_alive = 0;
#endif

		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if (dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___edlprovider__getInstalledEdls(EdlProviderBindingService*);
static int serve___edlprovider__getEdl(EdlProviderBindingService*);
static int serve___edlprovider__getEdlDouble(EdlProviderBindingService*);

int EdlProviderBindingService::dispatch()
{	EdlProviderBindingService_init(this->soap->imode, this->soap->omode);
	soap_peek_element(this->soap);
	if (!soap_match_tag(this->soap, this->soap->tag, "edlprovider:getEdlRequest"))
		return serve___edlprovider__getEdl(this);
	if (!soap_match_tag(this->soap, this->soap->tag, "edlprovider:getEdlDoubleRequest"))
		return serve___edlprovider__getEdlDouble(this);
	return serve___edlprovider__getInstalledEdls(this);
}

static int serve___edlprovider__getInstalledEdls(EdlProviderBindingService *service)
{	struct soap *soap = service->soap;
	struct __edlprovider__getInstalledEdls soap_tmp___edlprovider__getInstalledEdls;
	edlprovider__ArrayOfstring edlprovider__installedEdlsResponse;
	edlprovider__installedEdlsResponse.soap_default(soap);
	soap_default___edlprovider__getInstalledEdls(soap, &soap_tmp___edlprovider__getInstalledEdls);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->getInstalledEdls(&edlprovider__installedEdlsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	edlprovider__installedEdlsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || edlprovider__installedEdlsResponse.soap_put(soap, "edlprovider:installedEdlsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || edlprovider__installedEdlsResponse.soap_put(soap, "edlprovider:installedEdlsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___edlprovider__getEdl(EdlProviderBindingService *service)
{	struct soap *soap = service->soap;
	struct __edlprovider__getEdl soap_tmp___edlprovider__getEdl;
	edlprovider__EdlCreateResponseType edlprovider__getEdlResponse;
	edlprovider__getEdlResponse.soap_default(soap);
	soap_default___edlprovider__getEdl(soap, &soap_tmp___edlprovider__getEdl);
	if (!soap_get___edlprovider__getEdl(soap, &soap_tmp___edlprovider__getEdl, "-edlprovider:getEdl", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->getEdl(soap_tmp___edlprovider__getEdl.edlprovider__getEdlRequest, &edlprovider__getEdlResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	edlprovider__getEdlResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || edlprovider__getEdlResponse.soap_put(soap, "edlprovider:getEdlResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || edlprovider__getEdlResponse.soap_put(soap, "edlprovider:getEdlResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___edlprovider__getEdlDouble(EdlProviderBindingService *service)
{	struct soap *soap = service->soap;
	struct __edlprovider__getEdlDouble soap_tmp___edlprovider__getEdlDouble;
	edlprovider__EdlCreateResponseType edlprovider__getEdlResponse;
	edlprovider__getEdlResponse.soap_default(soap);
	soap_default___edlprovider__getEdlDouble(soap, &soap_tmp___edlprovider__getEdlDouble);
	if (!soap_get___edlprovider__getEdlDouble(soap, &soap_tmp___edlprovider__getEdlDouble, "-edlprovider:getEdlDouble", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->getEdlDouble(soap_tmp___edlprovider__getEdlDouble.edlprovider__getEdlDoubleRequest, &edlprovider__getEdlResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	edlprovider__getEdlResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || edlprovider__getEdlResponse.soap_put(soap, "edlprovider:getEdlResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || edlprovider__getEdlResponse.soap_put(soap, "edlprovider:getEdlResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
